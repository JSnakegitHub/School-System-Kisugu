package clarion.academics.ui;

import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Optional;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;

import clarion.attendance.core.AttendanceLessons;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Control;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Callback;
import school.ui.finances.CashBookController;

public class AutoGeneratingAndPrintingReportCards extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static final String SRC = "F:\\WorkSpace\\Clarion Project\\Clarion Project\\Report.pdf";

	public static final String SRCA = "F:\\WorkSpace\\Clarion Project\\Clarion Project\\ReportA.pdf";
	public static final String DESTA = "F:\\WorkSpace\\Clarion Project\\Clarion Project\\Final_CopyA.pdf";
	// public static final String labelPath.getText()+"SchoolBadge.png" =
	// "F:\\WorkSpace\\Clarion Project\\Clarion Project\\SchoolBadge.png";

	private String comment3;
	private String grade3;
	private String comment4;
	private String grade4;
	private String comment5;
	private String grade5;
	private String comment6;
	private String grade6;
	private String comment7;
	private String grade7;
	private String comment8;
	private String grade8;
	private String comment9;
	private String grade9;
	private String comment10;
	private String grade10;
	private String comment11;
	private String grade11;
	private String comment12;
	private String grade12;
	private String comment13;
	private String grade13;
	private String comment14;
	private String grade14;
	private String comment15;
	private String grade15;
	private String comment16;
	private String grade16;
	private String comment17;
	private String grade17;
	private String comment18;
	private String grade18;
	private String studentNameHeader;
	private String answer;
	private double classAverage;
	private double studentAverage;
	private ListView<Integer> lvList;
	private ObservableList<Integer> items;
	private String gradeValue1;
	private String gradeValue2;
	private String gradeValue3;
	private String gradeValue4;
	private String gradeValue5;
	private String gradeValue6;
	private String gradeValue7;
	private String gradeValue8;
	private String gradeValue9;
	private String gradeValue10;
	private String gradeValue11;
	private String gradeValue12;
	private String gradeValue13;
	private String gradeValue14;
	private String gradeValue15;
	private String gradeValue16;
	private String gradeValue17;
	private String gradeValue18;
	private double bestStudent;
	private double worstStudent;
	private String populationValue;
	private String Number;
	private double intmot1;
	private double inteot1;
	private double subject1Avg;
	private int yes1;
	private int yes2;
	private double intmot2;
	private double inteot2;
	private double subject2Avg;
	private int yes3;
	private double intmot3;
	private double inteot3;
	private double subject3Avg;
	private int yes4;
	private double intmot4;
	private double inteot4;
	private double subject4Avg;
	private int yes5;
	private double intmot5;
	private double inteot5;
	private double subject5Avg;
	private int yes6;
	private double intmot6;
	private double inteot6;
	private double subject6Avg;
	private int yes7;
	private double intmot7;
	private double inteot7;
	private double subject7Avg;
	private int yes8;
	private double intmot8;
	private double inteot8;
	private double subject8Avg;
	private int yes9;
	private double intmot9;
	private double inteot9;
	private double subject9Avg;
	private int yes10;
	private double intmot10;
	private double inteot10;
	private double subject10Avg;
	private int yes11;
	private double intmot11;
	private double inteot11;
	private double subject11Avg;
	private int yes12;
	private double intmot12;
	private double inteot12;
	private double subject12Avg;
	private int yes13;
	private double intmot13;
	private double inteot13;
	private double subject13Avg;
	private int yes14;
	private double intmot14;
	private double inteot14;
	private double subject14Avg;
	private int yes15;
	private double inteot15;
	private double intmot15;
	private double subject15Avg;
	private int yes16;
	private double intmot16;
	private double inteot16;
	private double subject16Avg;
	private int yes17;
	private double intmot17;
	private double inteot17;
	private double subject17Avg;
	private int yes18;
	private double intmot18;
	private double inteot18;
	private double subject18Avg;
	private String year;
	private PdfPCell cell8Avg;
	private PdfPCell cell9Avg;
	private PdfPCell cell10Avg;
	private PdfPCell cell11Avg;
	private PdfPCell cell12Avg;
	private PdfPCell cell13Avg;
	private PdfPCell cell14Avg;
	private PdfPCell cell15Avg;
	private PdfPCell cell16Avg;
	private PdfPCell cell17Avg;
	private PdfPCell cell18Avg;
	private PdfPCell cell7Avg;
	private PdfPCell cell6Avg;
	private PdfPCell cell5Avg;
	private PdfPCell cell4Avg;
	private PdfPCell cell3Avg;
	private PdfPCell cell2Avg;
	private PdfPCell cell1Avg;
	private Phrase sjcl;
	private String sqlJazz;
	private PdfReader reader;
	private FileOutputStream output;
	private PdfStamper stamper;
	private String fileSRC;
	private Paragraph eot1p;
	private Paragraph mot1p;
	private Paragraph mot2p;
	private Paragraph eot2p;
	private Paragraph mot3p;
	private Paragraph eot3p;
	private Paragraph mot4p;
	private Paragraph eot4p;
	private Paragraph mot5p;
	private Paragraph eot5p;
	private Paragraph mot6p;
	private Paragraph eot6p;
	private Paragraph mot7p;
	private Paragraph eot7p;
	private Paragraph mot8p;
	private Paragraph eot8p;
	private Paragraph mot9p;
	private Paragraph eot9p;
	private Paragraph mot10p;
	private Paragraph eot10p;
	private Paragraph mot11p;
	private Paragraph eot11p;
	private Paragraph mot12p;
	private Paragraph eot12p;
	private Paragraph mot13p;
	private Paragraph eot13p;
	private Paragraph mot14p;
	private Paragraph eot14p;
	private Paragraph mot15p;
	private Paragraph eot15p;
	private Paragraph mot16p;
	private Paragraph eot16p;
	private Paragraph mot17p;
	private Paragraph eot17p;
	private Paragraph mot18p;
	private Paragraph eot18p;
	private Paragraph comment1p;
	private PdfPCell cellcomment1;
	private Paragraph comment2p;
	private PdfPCell cellcomment2;
	private Paragraph comment3p;
	private PdfPCell cellcomment3;
	private Paragraph comment4p;
	private PdfPCell cellcomment4;
	private Paragraph comment5p;
	private PdfPCell cellcomment5;
	private Paragraph comment6p;
	private PdfPCell cellcomment6;
	private PdfPCell cellcomment7;
	private Paragraph comment7p;
	private Paragraph comment8p;
	private PdfPCell cellcomment8;
	private Paragraph comment9p;
	private PdfPCell cellcomment9;
	private PdfPCell cellcomment10;
	private Paragraph comment10p;
	private Paragraph comment11p;
	private PdfPCell cellcomment11;
	private Paragraph comment12p;
	private PdfPCell cellcomment12;
	private Paragraph comment13p;
	private PdfPCell cellcomment13;
	private Paragraph comment14p;
	private PdfPCell cellcomment14;
	private Paragraph comment15p;
	private PdfPCell cellcomment15;
	private Paragraph comment16p;
	private PdfPCell cellcomment16;
	private Paragraph comment17p;
	private PdfPCell cellcomment17;
	private Paragraph comment18p;
	private PdfPCell cellcomment18;

	private String FilePath;
	private String subject1;
	private String subject2;
	private String subject3;
	private String subject4;
	private String subject5;
	private String subject6;
	private String subject7;
	private String subject18;
	private String subject17;
	private String subject16;
	private String subject15;
	private String subject14;
	private String subject13;
	private String subject12;
	private String subject11;
	private String subject10;
	private String subject9;
	private String subject8;
	private String mot1;
	private String rank1;
	private String eot1;
	private String rankeot1;
	private String mot2;
	private String rank2;
	private String eot2;
	private String rankeot2;
	private String eot3;
	private String rankeot3;
	private String mot3;
	private String rank3;
	private String eot4;
	private String rankeot4;
	private String mot4;
	private String rank4;
	private String mot5;
	private String rank5;
	private String eot5;
	private String rankeot5;
	private String mot6;
	private String rank6;
	private String eot6;
	private String rankeot6;
	private String mot7;
	private String rank7;
	private String eot7;
	private String rankeot7;
	private String mot8;
	private String rank8;
	private String eot8;
	private String rankeot8;
	private String mot9;
	private String rank9;
	private String eot9;
	private String rankeot9;
	private String mot10;
	private String rank10;
	private String eot10;
	private String rankeot10;
	private String mot11;
	private String rank11;
	private String eot11;
	private String rankeot11;
	private String mot12;
	private String rank12;
	private String eot12;
	private String rankeot12;
	private String mot13;
	private String rank13;
	private String eot13;
	private String rankeot13;
	private String mot14;
	private String rank14;
	private String eot14;
	private String rankeot14;
	private String mot15;
	private String rank15;
	private String eot15;
	private String rankeot15;
	private String mot16;
	private String rank16;
	private String eot16;
	private String rankeot16;
	private String mot17;
	private String rank17;
	private String eot17;
	private String rankeot17;
	private String mot18;
	private String rank18;
	private String eot18;
	private String rankeot18;
	private String grade1;
	private String remarks1;
	private String comment1;
	private String comment2;
	private String grade2;

	/*
	 * Attendance Entry's controls
	 */
	private JFXPanel jfxPanelAttendanceLesson;
	private TableView tableViewGrades;
	private ComboBox comboBoxClass;
	private ComboBox comboBoxTest;
	private ComboBox comboBoxSubject;
	private ObservableList<Object> dataClass;
	private ObservableList<Object> dataSubject;
	private ObservableList<Object> dataTestName;

	private Label labelDateEntriesAttendanceLesson;
	private Label labelNameEntriesAttendanceLesson;
	private Label labelClassEntriesAttendanceLesson;
	private Label labelTimeEntriesAttendanceLesson;
	private Label labelTermEntriesAttendanceLesson;
	private Label labelSubjectEntriesAttendanceLesson;

	private DatePicker datePickerEntriesAttendanceLesson;
	private ComboBox<?> comboBoxNameEntriesAttendanceLesson;
	private ComboBox<?> comboBoxClassEntriesAttendanceLesson;
	private ComboBox<?> comboBoxSubjectEntriesAttendanceLesson;
	private TextField fieldTimeEntriesAttendanceLesson;
	private ComboBox<?> comboBoxTermEntriesAttendanceLesson;

	private GridPane gridPaneEntriesAttendanceLesson;
	private VBox vBoxEntriesAttendanceLesson;
	/*
	 * Save or Clear Fields
	 */
	private Button buttonSaveAttendanceLesson;
	private Button buttonCancelAttendanceLesson;
	private Button buttonUpdateAttendanecLesson;
	private Button buttonPickAttendanceLesson;

	////////////////// Progress Bar Stuffs//////////////////
	final Float[] values = new Float[] { -2f };
	final Label[] labels = new Label[values.length];
	final ProgressBar[] pbs = new ProgressBar[values.length];
	final ProgressIndicator[] pins = new ProgressIndicator[values.length];
	final HBox hbs[] = new HBox[values.length];

	/*
	 * Search Fields
	 */

	private Label labelNameSearchAttendanceLesson;
	private Label labelClassSearchAttendanceLesson;
	private Label labelSubjectSearchAttendanceLesson;
	private Label labeltimeSearchAttendanceLesson;
	private Label labelTermSearchAttendanceLesson;

	private TextField fieldNameSearchAttendanceLesson;
	private TextField fieldClassSearchAttendanceLesson;
	private TextField fieldSubjectSearchAttendanceLesson;
	private TextField fieldtimeSearchAttendanceLesson;
	private TextField fieldTermSearchAttendanceLesson;

	private GridPane gridPaneSearchAttendanceLesson;
	private VBox vBoxsearchAttendanceLesson;

	// private HBox hBoxAttendanceLesson;
	private BorderPane borderPaneAttendanceLesson;
	private Scene sceneAttendanceLesson;
	private VBox vBoxTop;

	private TableColumn<AttendanceLessons, Date> columnDate;
	private TableColumn<AttendanceLessons, String> columnTeachersName;
	private TableColumn<AttendanceLessons, String> columnClass;
	private TableColumn<AttendanceLessons, String> columnSubject;

	private TableColumn<AttendanceLessons, String> columnTime;
	private TableColumn<AttendanceLessons, String> columnTerm;

	private TableColumn<AttendanceLessons, Integer> columnSNo;

	private VBox vBoxTableAttendanceLesson;

	private Connection conn;

	private PreparedStatement pst;

	private ObservableList<Object> staffs;

	private ObservableList<Object> classes;

	private ObservableList<Object> subjects;

	private ObservableList<String> terms;

	private Label labelTermSearchAttendanceLessonEOT;

	private TextField fieldTermSearchAttendanceLessonEOT;

	private HBox hboxHomeMain;

	private VBox vboxLabelPicture;

	private Label labelPictureStudent;

	private VBox vboxLabelPictureReal;

	private TableColumn columnClassGrade;

	private TableColumn columnSubjectGrade;

	private TableColumn columnTimeGrade;

	private TableColumn columnTermGrade;

	private TableColumn columnTermGradeAgg;

	protected JFXPanel jfxPanel;

	protected Stage stage;

	private Image image;

	private ImageView finalViewedImage;

	private ObservableList<Object> data;

	private TableView tableview;

	private ObservableList<Object> dataGrades;

	protected TreeView tree;

	private Connection cnx;

	private PreparedStatement ps;

	private ResultSet rs;

	private Connection con;

	private Statement stm;

	HashMap<Integer, Tests> node = new HashMap<>(); // for child nodes
	HashMap<Integer, Tests> pere = new HashMap<>(); // for parent nodes
	Tests c; // object from Test class

	protected ObservableList<Object> testsCats;

	protected ObservableList<Object> tests;

	private int parentNode;

	private int codeNode;

	private Label labelPaymentCode;

	private Button buttonDeleteMarks;

	private Label labelPathName;

	private static Label labelPath;

	private JFreeChart chart;

	private DefaultPieDataset defaultPieDataset;

	private ResultSet result;

	private double below50Count;

	private double btn50_60;

	private double btn60_70;

	private double btn70_101;

	private double btn80_101;

	private double btn70_80;

	private double btn80_100;

	private Label labelTerm;

	private ObservableList<Object> term;

	private ComboBox comboTerm;

	private FileOutputStream outputA;

	private ObservableList<Object> paper;

	private String mot1_1;

	private String subject1_1;

	private String mot1_3;

	private String mot1_2;

	private String eot1_1;

	private String eot1_2;

	private String eot1_3;

	private double intmot1_1;

	private double inteot1_1;

	private double subject1_1Avg;

	private double subject1_2Avg;

	private double subject1_3Avg;

	private double intmot1_3;

	private double inteot1_3;

	private double intmot1_2;

	private double inteot1_2;

	private Paragraph mot1_1p;

	private Paragraph mot1_2p;

	private Paragraph mot1_3p;

	private Paragraph eot1_1p;

	private Paragraph eot1_2p;

	private Paragraph eot1_3p;

	private PdfPCell cell1_1Avg;

	private PdfPCell cell1_2Avg;

	private PdfPCell cell1_3Avg;

	private String comment1_1;

	private Paragraph comment1_1p;

	private PdfPCell cellcomment1_1;

	private String grade1_1;

	private String grade1_2;

	private String grade1_3;

	private String gradeValue1_1;

	private String gradeValue1_2;

	private String gradeValue1_3;

	private double valuepaper1_1;

	private double valuepaper1_2;

	private double valuepaper1_3;

	private double averageValue;

	private String gradeA1;

	private Paragraph gradeA1p;

	private PdfPCell gradeA1c;

	private PdfPCell comment1c;

	private String mot2_3;

	private String eot2_1;

	private String eot2_2;

	private String eot2_3;

	private String mot2_2;

	private String mot2_1;

	private double intmot2_1;

	private double inteot2_1;

	private double subject2_1Avg;

	private double intmot2_2;

	private double inteot2_2;

	private double subject2_2Avg;

	private double intmot2_3;

	private double inteot2_3;

	private double subject2_3Avg;

	private Paragraph mot2_1p;

	private Paragraph mot2_2p;

	private Paragraph mot2_3p;

	private Paragraph eot2_1p;

	private Paragraph eot2_2p;

	private Paragraph eot2_3p;

	private PdfPCell cell2_1Avg;

	private PdfPCell cell2_2Avg;

	private PdfPCell cell2_3Avg;

	private String grade2_1;

	private String grade2_2;

	private String grade2_3;

	private String gradeValue2_1;

	private String gradeValue2_2;

	private String gradeValue2_3;

	private double valuepaper2_1;

	private double valuepaper2_2;

	private double valuepaper2_3;

	private String mot3_1;

	private String mot3_2;

	private String mot3_3;

	private String eot3_1;

	private String eot3_2;

	private String eot3_3;

	private double intmot3_1;

	private double inteot3_1;

	private double subject3_1Avg;

	private double intmot3_2;

	private double inteot3_2;

	private double subject3_2Avg;

	private double intmot3_3;

	private double inteot3_3;

	private double subject3_3Avg;

	private Paragraph mot3_1p;

	private Paragraph mot3_2p;

	private Paragraph mot3_3p;

	private Paragraph eot3_1p;

	private Paragraph eot3_2p;

	private Paragraph eot3_3p;

	private PdfPCell cell3_1Avg;

	private PdfPCell cell3_2Avg;

	private PdfPCell cell3_3Avg;

	private String grade3_1;

	private String grade3_2;

	private String grade3_3;

	private String gradeValue3_1;

	private String gradeValue3_2;

	private String gradeValue3_3;

	private double valuepaper3_1;

	private double valuepaper3_2;

	private double valuepaper3_3;

	private String mot4_1;

	private String mot4_2;

	private String mot4_3;

	private String eot4_1;

	private String eot4_2;

	private String eot4_3;

	private double intmot4_1;

	private double inteot4_1;

	private double subject4_1Avg;

	private double intmot4_2;

	private double inteot4_2;

	private double subject4_2Avg;

	private double intmot4_3;

	private double inteot4_3;

	private double subject4_3Avg;

	private Paragraph mot4_1p;

	private Paragraph mot4_2p;

	private Paragraph mot4_3p;

	private Paragraph eot4_1p;

	private Paragraph eot4_2p;

	private Paragraph eot4_3p;

	private PdfPCell cell4_1Avg;

	private PdfPCell cell4_2Avg;

	private PdfPCell cell4_3Avg;

	private String grade4_1;

	private String grade4_2;

	private String grade4_3;

	private String gradeValue4_1;

	private String gradeValue4_2;

	private String gradeValue4_3;

	private double valuepaper4_1;

	private double valuepaper4_2;

	private double valuepaper4_3;

	private String mot5_1;

	private String mot5_2;

	private String mot5_3;

	private String eot5_1;

	private String eot5_2;

	private String eot5_3;

	private double intmot5_1;

	private double inteot5_1;

	private double subject5_1Avg;

	private double intmot5_2;

	private double inteot5_2;

	private double subject5_2Avg;

	private double intmot5_3;

	private double inteot5_3;

	private double subject5_3Avg;

	private Paragraph mot5_1p;

	private Paragraph mot5_2p;

	private Paragraph mot5_3p;

	private Paragraph eot5_1p;

	private Paragraph eot5_2p;

	private Paragraph eot5_3p;

	private PdfPCell cell5_1Avg;

	private PdfPCell cell5_2Avg;

	private PdfPCell cell5_3Avg;

	private String grade5_1;

	private String grade5_2;

	private String grade5_3;

	private String gradeValue5_1;

	private String gradeValue5_2;

	private String gradeValue5_3;

	private double valuepaper5_1;

	private double valuepaper5_2;

	private double valuepaper5_3;

	private String mot6_1;

	private String mot6_2;

	private String mot6_3;

	private String eot6_1;

	private String eot6_2;

	private String eot6_3;

	private double intmot6_1;

	private double inteot6_1;

	private double subject6_1Avg;

	private double intmot6_2;

	private double inteot6_2;

	private double subject6_2Avg;

	private double intmot6_3;

	private double inteot6_3;

	private double subject6_3Avg;

	private Paragraph mot6_1p;

	private Paragraph mot6_2p;

	private Paragraph mot6_3p;

	private Paragraph eot6_1p;

	private Paragraph eot6_2p;

	private Paragraph eot6_3p;

	private PdfPCell cell6_1Avg;

	private PdfPCell cell6_2Avg;

	private PdfPCell cell6_3Avg;

	private String grade6_1;

	private String grade6_2;

	private String grade6_3;

	private String gradeValue6_1;

	private String gradeValue6_2;

	private String gradeValue6_3;

	private double valuepaper6_1;

	private double valuepaper6_2;

	private double valuepaper6_3;

	private String mot7_1;

	private String mot7_2;

	private String mot7_3;

	private String eot7_1;

	private String eot7_2;

	private String eot7_3;

	private double intmot7_1;

	private double inteot7_1;

	private double subject7_1Avg;

	private double intmot7_2;

	private double inteot7_2;

	private double subject7_2Avg;

	private double intmot7_3;

	private double inteot7_3;

	private double subject7_3Avg;

	private Paragraph mot7_1p;

	private Paragraph mot7_2p;

	private Paragraph mot7_3p;

	private Paragraph eot7_1p;

	private Paragraph eot7_2p;

	private Paragraph eot7_3p;

	private PdfPCell cell7_1Avg;

	private PdfPCell cell7_2Avg;

	private PdfPCell cell7_3Avg;

	private String grade7_1;

	private String grade7_2;

	private String grade7_3;

	private String gradeValue7_1;

	private String gradeValue7_2;

	private String gradeValue7_3;

	private double valuepaper7_1;

	private double valuepaper7_2;

	private double valuepaper7_3;

	private String mot8_1;

	private String mot8_2;

	private String mot8_3;

	private String eot8_1;

	private String eot8_2;

	private String eot8_3;

	private double intmot8_1;

	private double inteot8_1;

	private double subject8_1Avg;

	private double intmot8_2;

	private double inteot8_2;

	private double subject8_2Avg;

	private double intmot8_3;

	private double inteot8_3;

	private double subject8_3Avg;

	private Paragraph mot8_1p;

	private Paragraph mot8_2p;

	private Paragraph mot8_3p;

	private Paragraph eot8_1p;

	private Paragraph eot8_2p;

	private Paragraph eot8_3p;

	private PdfPCell cell8_1Avg;

	private PdfPCell cell8_2Avg;

	private PdfPCell cell8_3Avg;

	private String grade8_1;

	private String grade8_2;

	private String grade8_3;

	private String gradeValue8_1;

	private String gradeValue8_2;

	private String gradeValue8_3;

	private double valuepaper8_1;

	private double valuepaper8_2;

	private double valuepaper8_3;

	private String mot9_1;

	private String mot9_2;

	private String mot9_3;

	private String eot9_1;

	private String eot9_2;

	private String eot9_3;

	private double intmot9_1;

	private double inteot9_1;

	private double subject9_1Avg;

	private double intmot9_2;

	private double inteot9_2;

	private double subject9_2Avg;

	private double intmot9_3;

	private double inteot9_3;

	private double subject9_3Avg;

	private Paragraph mot9_1p;

	private Paragraph mot9_2p;

	private Paragraph mot9_3p;

	private Paragraph eot9_1p;

	private Paragraph eot9_2p;

	private Paragraph eot9_3p;

	private PdfPCell cell9_1Avg;

	private PdfPCell cell9_2Avg;

	private PdfPCell cell9_3Avg;

	private String grade9_1;

	private String grade9_2;

	private String grade9_3;

	private String gradeValue9_1;

	private String gradeValue9_2;

	private String gradeValue9_3;

	private double valuepaper9_1;

	private double valuepaper9_2;

	private double valuepaper9_3;

	private String mot10_1;

	private String mot10_2;

	private String mot10_3;

	private String eot10_1;

	private String eot10_2;

	private String eot10_3;

	private double intmot10_1;

	private double inteot10_1;

	private double subject10_1Avg;

	private double intmot10_2;

	private double inteot10_2;

	private double subject10_2Avg;

	private double intmot10_3;

	private double inteot10_3;

	private double subject10_3Avg;

	private Paragraph mot10_1p;

	private Paragraph mot10_2p;

	private Paragraph mot10_3p;

	private Paragraph eot10_1p;

	private Paragraph eot10_2p;

	private Paragraph eot10_3p;

	private PdfPCell cell10_1Avg;

	private PdfPCell cell10_2Avg;

	private PdfPCell cell10_3Avg;

	private String grade10_1;

	private String grade10_2;

	private String grade10_3;

	private String gradeValue10_1;

	private String gradeValue10_2;

	private String gradeValue10_3;

	private double valuepaper10_1;

	private double valuepaper10_2;

	private double valuepaper10_3;

	private String mot11_1;

	private String mot11_2;

	private String mot11_3;

	private String eot11_1;

	private String eot11_2;

	private String eot11_3;

	private double intmot11_1;

	private double inteot11_1;

	private double subject11_1Avg;

	private double intmot11_2;

	private double inteot11_2;

	private double subject11_2Avg;

	private double intmot11_3;

	private double inteot11_3;

	private double subject11_3Avg;

	private Paragraph mot11_1p;

	private Paragraph mot11_2p;

	private Paragraph mot11_3p;

	private Paragraph eot11_1p;

	private Paragraph eot11_2p;

	private Paragraph eot11_3p;

	private PdfPCell cell11_1Avg;

	private PdfPCell cell11_2Avg;

	private PdfPCell cell11_3Avg;

	private String grade11_1;

	private String grade11_2;

	private String grade11_3;

	private String gradeValue11_1;

	private String gradeValue11_2;

	private String gradeValue11_3;

	private double valuepaper11_1;

	private double valuepaper11_2;

	private double valuepaper11_3;

	private String mot12_1;

	private String mot12_2;

	private String mot12_3;

	private String eot12_1;

	private String eot12_2;

	private String eot12_3;

	private double intmot12_1;

	private double inteot12_1;

	private double subject12_1Avg;

	private double intmot12_2;

	private double inteot12_2;

	private double subject12_2Avg;

	private double intmot12_3;

	private double inteot12_3;

	private double subject12_3Avg;

	private Paragraph mot12_1p;

	private Paragraph mot12_2p;

	private Paragraph mot12_3p;

	private Paragraph eot12_1p;

	private Paragraph eot12_2p;

	private Paragraph eot12_3p;

	private PdfPCell cell12_1Avg;

	private PdfPCell cell12_2Avg;

	private PdfPCell cell12_3Avg;

	private String grade12_1;

	private String grade12_2;

	private String grade12_3;

	private String gradeValue12_1;

	private String gradeValue12_2;

	private String gradeValue12_3;

	private double valuepaper12_1;

	private double valuepaper12_2;

	private double valuepaper12_3;

	private String mot13_1;

	private String mot13_2;

	private String mot13_3;

	private String eot13_1;

	private String eot13_2;

	private String eot13_3;

	private double intmot13_1;

	private double inteot13_1;

	private double subject13_1Avg;

	private double intmot13_2;

	private double inteot13_2;

	private double subject13_2Avg;

	private double intmot13_3;

	private double inteot13_3;

	private double subject13_3Avg;

	private Paragraph mot13_1p;

	private Paragraph mot13_2p;

	private Paragraph mot13_3p;

	private Paragraph eot13_1p;

	private Paragraph eot13_2p;

	private Paragraph eot13_3p;

	private PdfPCell cell13_1Avg;

	private PdfPCell cell13_2Avg;

	private PdfPCell cell13_3Avg;

	private String grade13_1;

	private String grade13_2;

	private String grade13_3;

	private String gradeValue13_1;

	private String gradeValue13_2;

	private String gradeValue13_3;

	private double valuepaper13_1;

	private double valuepaper13_2;

	private double valuepaper13_3;

	private String mot14_1;

	private String mot14_2;

	private String mot14_3;

	private String eot14_1;

	private String eot14_2;

	private String eot14_3;

	private double intmot14_1;

	private double inteot14_1;

	private double subject14_1Avg;

	private double intmot14_2;

	private double inteot14_2;

	private double subject14_2Avg;

	private double intmot14_3;

	private double inteot14_3;

	private double subject14_3Avg;

	private Paragraph mot14_1p;

	private Paragraph mot14_2p;

	private Paragraph mot14_3p;

	private Paragraph eot14_1p;

	private Paragraph eot14_2p;

	private Paragraph eot14_3p;

	private PdfPCell cell14_1Avg;

	private PdfPCell cell14_2Avg;

	private PdfPCell cell14_3Avg;

	private String grade14_1;

	private String grade14_2;

	private String grade14_3;

	private String gradeValue14_1;

	private String gradeValue14_2;

	private String gradeValue14_3;

	private double valuepaper14_1;

	private double valuepaper14_2;

	private double valuepaper14_3;

	private String mot15_1;

	private String mot15_2;

	private String mot15_3;

	private String eot15_1;

	private String eot15_2;

	private String eot15_3;

	private double intmot15_1;

	private double inteot15_1;

	private double subject15_1Avg;

	private double intmot15_2;

	private double inteot15_2;

	private double subject15_2Avg;

	private double intmot15_3;

	private double inteot15_3;

	private double subject15_3Avg;

	private Paragraph mot15_1p;

	private Paragraph mot15_2p;

	private Paragraph mot15_3p;

	private Paragraph eot15_1p;

	private Paragraph eot15_2p;

	private Paragraph eot15_3p;

	private PdfPCell cell15_1Avg;

	private PdfPCell cell15_2Avg;

	private PdfPCell cell15_3Avg;

	private String grade15_1;

	private String grade15_2;

	private String grade15_3;

	private String gradeValue15_1;

	private String gradeValue15_2;

	private String gradeValue15_3;

	private double valuepaper15_1;

	private double valuepaper15_2;

	private double valuepaper15_3;

	private String mot16_1;

	private String mot16_2;

	private String mot16_3;

	private String eot16_1;

	private String eot16_2;

	private String eot16_3;

	private double intmot16_1;

	private double inteot16_1;

	private double subject16_1Avg;

	private double intmot16_2;

	private double inteot16_2;

	private double subject16_2Avg;

	private double intmot16_3;

	private double inteot16_3;

	private double subject16_3Avg;

	private Paragraph mot16_1p;

	private Paragraph mot16_2p;

	private Paragraph mot16_3p;

	private Paragraph eot16_1p;

	private Paragraph eot16_2p;

	private Paragraph eot16_3p;

	private PdfPCell cell16_1Avg;

	private PdfPCell cell16_2Avg;

	private PdfPCell cell16_3Avg;

	private String grade16_1;

	private String grade16_2;

	private String grade16_3;

	private String gradeValue16_1;

	private String gradeValue16_2;

	private String gradeValue16_3;

	private double valuepaper16_1;

	private double valuepaper16_2;

	private double valuepaper16_3;

	private PdfPTable tableO;

	private PdfPTable table;

	private String gradeA16;

	private Paragraph gradeA16p;

	private PdfPCell gradeA16c;

	private PdfPCell comment16c;

	private String gradeA15;

	private Paragraph gradeA15p;

	private PdfPCell gradeA15c;

	private PdfPCell comment15c;

	private String gradeA14;

	private Paragraph gradeA14p;

	private PdfPCell gradeA14c;

	private PdfPCell comment14c;

	private String gradeA13;

	private Paragraph gradeA13p;

	private PdfPCell gradeA13c;

	private PdfPCell comment13c;

	private String gradeA12;

	private Paragraph gradeA12p;

	private PdfPCell gradeA12c;

	private PdfPCell comment12c;

	private String gradeA11;

	private Paragraph gradeA11p;

	private PdfPCell gradeA11c;

	private PdfPCell comment11c;

	private String gradeA10;

	private Paragraph gradeA10p;

	private PdfPCell gradeA10c;

	private PdfPCell comment10c;

	private String gradeA9;

	private Paragraph gradeA9p;

	private PdfPCell gradeA9c;

	private PdfPCell comment9c;

	private String gradeA8;

	private Paragraph gradeA8p;

	private PdfPCell gradeA8c;

	private PdfPCell comment8c;
	private String gradeA7;

	private Paragraph gradeA7p;

	private PdfPCell gradeA7c;

	private PdfPCell comment7c;

	private String gradeA6;

	private Paragraph gradeA6p;

	private PdfPCell gradeA6c;

	private PdfPCell comment6c;

	private String gradeA5;

	private Paragraph gradeA5p;

	private PdfPCell gradeA5c;

	private PdfPCell comment5c;

	private String gradeA4;

	private Paragraph gradeA4p;

	private PdfPCell gradeA4c;

	private PdfPCell comment4c;

	private String gradeA3;

	private Paragraph gradeA3p;

	private PdfPCell gradeA3c;

	private PdfPCell comment3c;

	private String gradeA2;

	private Paragraph gradeA2p;

	private PdfPCell gradeA2c;

	private PdfPCell comment2c;

	private GridPane gridPanePapers;

	private Label labelSub1;

	private TextField fieldPapers;

	private TextField fieldPapers1;

	private Label labelSub2;

	private TextField fieldPapers2;

	private Label labelSub3;

	private TextField fieldPapers3;

	private Label labelSub4;

	private TextField fieldPapers4;

	private Label labelSub5;

	private TextField fieldPapers5;

	private Label labelSub6;

	private TextField fieldPapers6;

	private Label labelSub7;

	private TextField fieldPapers7;

	private Label labelSub8;

	private TextField fieldPapers8;

	private Label labelSub9;

	private TextField fieldPapers9;

	private Label labelSub10;

	private TextField fieldPapers10;

	private Label labelSub11;

	private TextField fieldPapers11;

	private Label labelSub12;

	private TextField fieldPapers12;

	private Label labelSub13;

	private TextField fieldPapers13;

	private Label labelSub14;

	private TextField fieldPapers14;

	private Label labelSub15;

	private TextField fieldPapers15;

	private Label labelSub16;

	private TextField fieldPapers16;

	private int pointA9;

	private int pointA8;

	private int pointA7;

	private int pointA6;

	private int pointA5;

	private int pointA4;

	private int pointA3;

	private int pointA2;

	private int pointA1;

	private int pointA10;

	private int pointA11;

	private int pointA12;

	private int pointA13;

	private int pointA14;

	private int pointA15;

	private int pointA16;

	private int totalpoints;

	private int principalPassA1;

	private int principalPassA2;

	private int principalPassA3;

	private int principalPassA4;

	private int principalPassA5;

	private int principalPassA6;

	private int principalPassA7;

	private int principalPassA8;

	private int principalPassA9;

	private int principalPassA10;

	private int principalPassA11;

	private int principalPassA12;

	private int principalPassA16;

	private int totalPrincipalPasses;

	private int principalPassA13;

	private int principalPassA14;

	private int principalPassA15;

	private int totalSubsidiaryPasses;

	private String commentPP;

	private String commentSP;

	private String SQL1_2;

	private String SQL1_3;

	private String SQL1_1;

	private String SQL2_2;

	private String SQL2_3;

	private String SQL2_1;

	private String SQL3_1;

	private String SQL3_2;

	private String SQL3_3;

	private String SQL4_1;

	private String SQL4_2;

	private String SQL4_3;

	private String SQL5_2;

	private String SQL5_3;

	private String SQL5_1;

	private String SQL6_2;

	private String SQL6_3;

	private String SQL6_1;

	private String SQL8_2;

	private String SQL8_3;

	private String SQL8_1;

	private String SQL7_2;

	private String SQL7_3;

	private String SQL7_1;

	private String SQL9_2;

	private String SQL9_3;

	private String SQL9_1;

	private String SQL10_2;

	private String SQL10_3;

	private String SQL10_1;

	private String SQL11_1;

	private String SQL11_2;

	private String SQL11_3;

	private String SQL12_1;

	private String SQL12_2;

	private String SQL12_3;

	private String SQL13_2;

	private String SQL13_3;

	private String SQL13_1;

	private String SQL14_2;

	private String SQL14_3;

	private String SQL14_1;

	private String SQL15_2;

	private String SQL15_3;

	private String SQL15_1;

	private String SQL16_2;

	private String SQL16_3;

	private String SQL16_1;

	private Button btnChoosePath;

	private FileOutputStream outputTemp;

	private int subsidiaryPassA15;

	private int subsidiaryPassA14;

	private int subsidiaryPassA13;

	private String commentPoint;

	ResultSet studentName;

	private String DEST;

	private ObservableList<String> stream;

	private ComboBox comboBoxStream;

	private String SQL1;
	private String SQL2;
	private String SQL3;
	private String SQL4;
	private String SQL5;
	private String SQL6;
	private String SQL7;
	private String SQL8;
	private String SQL9;
	private String SQL10;
	private String SQL11;
	private String SQL12;
	private String SQL13;
	private String SQL14;
	private String SQL15;
	private String SQL16;
	private String SQL17;
	private String SQL18;

	private ResultSet staffInitial;

	private String initialsData;

	private String endOfTermTest;

	private PdfPTable tableReportHeader;

	private PdfPCell cellGrade1;

	private PdfPCell cellNum1;

	private PdfPCell cellSub1;

	private String sql_initials;

	private PdfPCell cellNum2;

	private PdfPCell cellSub2;

	private PdfPCell cellGrade2;

	private PdfPCell cellNum3;

	private PdfPCell cellSub3;

	private PdfPCell cellGrade3;

	private PdfPCell cellSub4;

	private PdfPCell cellGrade4;

	private PdfPCell cellSub5;

	private PdfPCell cellGrade5;

	private PdfPCell cellSub6;

	private PdfPCell cellGrade6;

	private PdfPCell cellSub7;

	private PdfPCell cellGrade7;

	private PdfPCell cellSub8;

	private PdfPCell cellGrade8;

	private PdfPCell cellSub9;

	private PdfPCell cellGrade9;

	private PdfPCell cellSub10;

	private PdfPCell cellGrade10;

	private PdfPCell cellSub11;

	private PdfPCell cellGrade11;

	private PdfPCell cellSub12;

	private PdfPCell cellGrade12;

	private PdfPCell cellSub13;

	private PdfPCell cellGrade13;

	private PdfPCell cellSub14;

	private PdfPCell cellGrade14;

	private PdfPCell cellSub15;

	private PdfPCell cellGrade15;

	private PdfPCell cellSub16;

	private PdfPCell cellGrade16;

	private PdfPCell cellSub17;

	private PdfPCell cellGrade17;

	private PdfPCell cellSub18;

	private PdfPCell cellGrade18;

	private PdfPCell cellNum4;
	private PdfPCell cellNum5;
	private PdfPCell cellNum6;
	private PdfPCell cellNum7;
	private PdfPCell cellNum8;
	private PdfPCell cellNum9;
	private PdfPCell cellNum10;
	private PdfPCell cellNum11;
	private PdfPCell cellNum12;
	private PdfPCell cellNum13;
	private PdfPCell cellNum14;
	private PdfPCell cellNum15;
	private PdfPCell cellNum16;
	private PdfPCell cellNum17;
	private PdfPCell cellNum18;

	private ResultSet Grade2;
	private Paragraph paraGrade1;
	private Paragraph paraGrade2;
	private Paragraph paraGrade3;
	private Paragraph paraGrade4;
	private Paragraph paraGrade5;
	private Paragraph paraGrade6;
	private Paragraph paraGrade7;
	private Paragraph paraGrade8;
	private Paragraph paraGrade9;
	private Paragraph paraGrade10;
	private Paragraph paraGrade11;
	private Paragraph paraGrade12;
	private Paragraph paraGrade13;
	private Paragraph paraGrade14;
	private Paragraph paraGrade15;
	private Paragraph paraGrade16;
	private Paragraph paraGrade17;
	private Paragraph paraGrade18;

	private String valueGrade1;
	private String valueGrade2;
	private String valueGrade3;
	private String valueGrade4;
	private String valueGrade12;
	private String valueGrade5;
	private String valueGrade13;
	private String valueGrade6;
	private String valueGrade14;
	private String valueGrade7;
	private String valueGrade15;
	private String valueGrade8;
	private String valueGrade16;
	private String valueGrade9;
	private String valueGrade17;
	private String valueGrade10;
	private String valueGrade18;
	private String valueGrade11;

	private String studentClass;

	private String studentClassNumber;

	private String studentTerm;

	private String studentYear;

	private Paragraph totalMarks;

	private Paragraph division;

	private Paragraph positionStream;

	private Paragraph divisionValue;

	private Paragraph distinction1;

	private Paragraph MARKS;

	private Paragraph distinction2;

	private Paragraph credit3;

	private Paragraph credit4;

	private Paragraph credit5;

	private Paragraph credit6;

	private Paragraph pass7;

	private Paragraph pass8;

	private Paragraph failed9;

	private Paragraph GRADE;

	private Paragraph distinction1V;

	private Paragraph distinction2V;

	private Paragraph credit3V;

	private Paragraph credit4V;

	private Paragraph credit5V;

	private Paragraph credit6V;

	private Paragraph pass7V;

	private Paragraph pass8V;

	private Paragraph failed9V;

	private Paragraph headerSchoolName;

	private String schoolName;

	private String schoolAddress;

	private String schoolPhone;

	private String schoolEmail;

	private double studentTotal;

	private String StudentNumber;

	private String resultStudentTotalSQL;

	private String divisionValueN;

	private Paragraph Points;

	private Paragraph SixPoints;

	private Paragraph FivePoints;

	private Paragraph FourPoints;

	private Paragraph ThreePoints;

	private Paragraph TwoPoints;

	private Paragraph OnePoints;

	private Paragraph ZeroPoints;

	private Paragraph ForTwo;

	private Paragraph SixForTwo;

	private Paragraph FiveForTwo;

	private Paragraph FourForTwo;

	private Paragraph ThreeForTwo;

	private Paragraph TwoForTwo;

	private Paragraph OneForTwo;

	private Paragraph ZeroForTwo;

	private Paragraph ForThree;

	private Paragraph SixForThree;

	private Paragraph FiveForThree;

	private Paragraph FourForThree;

	private Paragraph ThreeForThree;

	private Paragraph TwoForThree;

	private Paragraph OneForThree;

	private Paragraph ZeroForThree;

	private PdfPTable tableKeys;

	private String sql_Name;

	private ResultSet staffName;

	private String nameData;

	private Paragraph paraheading;

	public static void main(String[] args) {
		new AutoGeneratingAndPrintingReportCards();

	}

	public AutoGeneratingAndPrintingReportCards() {
		// TODO Auto-generated constructor stub

		jfxPanelAttendanceLesson = new JFXPanel();
		borderPaneAttendanceLesson = new BorderPane();

		// vBoxTop = new VBox();
		// borderPaneAttendanceLesson.setTop(vBoxTop);

		vBoxTableAttendanceLesson = new VBox();

		// borderPaneAttendanceLesson.setCenter(vBoxTableAttendanceLesson);

		// hBoxAttendanceLesson = new HBox();

		/*
		 * Entries Control Start Here
		 */
		labelTermEntriesAttendanceLesson = new Label("Test 2:");
		labelTerm = new Label("Term");
		labelClassEntriesAttendanceLesson = new Label("Student Class:");
		labelSubjectEntriesAttendanceLesson = new Label("Test 1:");
		labelPath = new Label("");
		labelPathName = new Label("Results Save Location:");
		labelPaymentCode = new Label("Payment Code");

		terms = FXCollections.observableArrayList();
		comboTerm = new ComboBox<>(terms);
		comboTerm.setPromptText("Choose Term");
		displayInComboBoxTerms(comboTerm, "select term_name from student_terms");

		staffs = FXCollections.observableArrayList();
		comboBoxNameEntriesAttendanceLesson = new ComboBox<>(staffs);
		comboBoxNameEntriesAttendanceLesson.setPromptText("Choose Name");
		displayInComboBoxStaffs(comboBoxNameEntriesAttendanceLesson, "select staff_name from table_teaching_staffs");

		classes = FXCollections.observableArrayList();
		comboBoxClassEntriesAttendanceLesson = new ComboBox<>(classes);
		comboBoxClassEntriesAttendanceLesson.setPromptText("Choose Class");
		displayInComboBoxClass(comboBoxClassEntriesAttendanceLesson, "select class_name from student_classes");

		subjects = FXCollections.observableArrayList();
		comboBoxSubjectEntriesAttendanceLesson = new ComboBox<>(subjects);
		comboBoxSubjectEntriesAttendanceLesson.setPromptText("Choose Subject");
		displayInComboBoxSubject(comboBoxSubjectEntriesAttendanceLesson, "select catname from tests_categories");

		stream = FXCollections.observableArrayList("S1", "S2", "S3", "S4", "S5A", "S5S", "S6A", "S6S");
		comboBoxStream = new ComboBox<>(stream);
		comboBoxStream.setPromptText("Choose Stream");

		fieldTimeEntriesAttendanceLesson = new TextField();
		fieldTimeEntriesAttendanceLesson.setPromptText("Class Number");
		fieldTimeEntriesAttendanceLesson.setPromptText("Enter Class Number Here:");
		fieldTimeEntriesAttendanceLesson.setOnKeyReleased(new EventHandler<Event>() {

			@Override
			public void handle(Event arg0) {
				// TODO Auto-generated method stub
				displayStudentPicture();
			}
		});
		terms = FXCollections.observableArrayList();
		comboBoxTermEntriesAttendanceLesson = new ComboBox<>(terms);
		comboBoxTermEntriesAttendanceLesson.setPromptText("Choose Test");
		displayInComboBoxTerms(comboBoxTermEntriesAttendanceLesson, "select catname from tests_categories");

		comboBoxClassEntriesAttendanceLesson.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent arg0) {
				// TODO Auto-generated method stub
				if (comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedIndex() <= 3) {
					fieldPapers16.setVisible(false);
					fieldPapers15.setVisible(false);
					fieldPapers14.setVisible(false);
					fieldPapers13.setVisible(false);
					fieldPapers12.setVisible(false);
					fieldPapers11.setVisible(false);
					fieldPapers10.setVisible(false);
					fieldPapers9.setVisible(false);
					fieldPapers8.setVisible(false);
					fieldPapers7.setVisible(false);
					fieldPapers6.setVisible(false);
					fieldPapers5.setVisible(false);
					fieldPapers4.setVisible(false);
					fieldPapers3.setVisible(false);
					fieldPapers2.setVisible(false);
					fieldPapers1.setVisible(false);

					labelSub16.setVisible(false);
					labelSub15.setVisible(false);
					labelSub14.setVisible(false);
					labelSub13.setVisible(false);
					labelSub12.setVisible(false);
					labelSub11.setVisible(false);
					labelSub10.setVisible(false);
					labelSub9.setVisible(false);
					labelSub8.setVisible(false);
					labelSub7.setVisible(false);
					labelSub6.setVisible(false);
					labelSub5.setVisible(false);
					labelSub4.setVisible(false);
					labelSub3.setVisible(false);
					labelSub2.setVisible(false);
					labelSub1.setVisible(false);

				} else {
					fieldPapers16.setVisible(true);
					fieldPapers15.setVisible(true);
					fieldPapers14.setVisible(true);
					fieldPapers13.setVisible(true);
					fieldPapers12.setVisible(true);
					fieldPapers11.setVisible(true);
					fieldPapers10.setVisible(true);
					fieldPapers9.setVisible(true);
					fieldPapers8.setVisible(true);
					fieldPapers7.setVisible(true);
					fieldPapers6.setVisible(true);
					fieldPapers5.setVisible(true);
					fieldPapers4.setVisible(true);
					fieldPapers3.setVisible(true);
					fieldPapers2.setVisible(true);
					fieldPapers1.setVisible(true);

					labelSub16.setVisible(true);
					labelSub15.setVisible(true);
					labelSub14.setVisible(true);
					labelSub13.setVisible(true);
					labelSub12.setVisible(true);
					labelSub11.setVisible(true);
					labelSub10.setVisible(true);
					labelSub9.setVisible(true);
					labelSub8.setVisible(true);
					labelSub7.setVisible(true);
					labelSub6.setVisible(true);
					labelSub5.setVisible(true);
					labelSub4.setVisible(true);
					labelSub3.setVisible(true);
					labelSub2.setVisible(true);
					labelSub1.setVisible(true);
				}

			}
		});

		buttonSaveAttendanceLesson = new Button("Generate Results");
		btnChoosePath = new Button("Choose Save Location");

		buttonSaveAttendanceLesson.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent arg0) {
				// TODO Auto-generated method stub

				plotGraphPieChart();
				Platform.runLater(new Runnable() {

					private Scene scene;

					@Override
					public void run() {
						// TODO Auto-generated method stub
						if (comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedIndex() <= 3) {

							/*************************************************************************
							 * Progress of the report generation
							 *************************************************************************/

							Group root = new Group();
							scene = new Scene(root, 250, 55, Color.BLACK);
							Stage stage = new Stage();

							stage.initStyle(StageStyle.UNDECORATED);
							stage.setScene(scene);
							stage.setTitle("Progress Controls");

							for (int i = 0; i < values.length; i++) {
								final Label label = labels[i] = new Label();

								final ProgressBar pb = pbs[i] = new ProgressBar();
								pb.setProgress(values[i]);

								final ProgressIndicator pin = pins[i] = new ProgressIndicator();
								pin.setProgress(values[i]);
								final HBox hb = hbs[i] = new HBox();
								hb.setSpacing(5);
								hb.setAlignment(Pos.CENTER);
								hb.getChildren().addAll(label, pb, pin);
							}

							final VBox vb = new VBox();
							vb.setSpacing(1);
							vb.getChildren().addAll(hbs);
							scene.setRoot(vb);
							stage.setResizable(false);
							stage.setOpacity(0.8);
							stage.show();

							ResultSet eachClassNumber;
							try {

								Calendar calendar = Calendar.getInstance();

								String fourdigits = "" + calendar.getTime();

								year = fourdigits.substring(fourdigits.length() - 4);

								String SQLClassNumber = "SELECT class_number from student_ledger where class_number LIKE '%"
										+ comboBoxStream.getSelectionModel().getSelectedItem() + "%' and year='" + year
										+ "'";
								eachClassNumber = generateCellValue(SQLClassNumber);

								ResultSet paymentCode;

								while (eachClassNumber.next()) {

									/*
									 * Loop Through Class Number 1 To The End
									 */

									String classNumber = eachClassNumber.getString(1);

									String SQLPaymentCode = "SELECT payment_code from student_ledger where class_number = '"
											+ classNumber + "' and year='" + year + "'";
									paymentCode = generateCellValue(SQLPaymentCode);
									if (paymentCode.next()) {

										String studentCode = paymentCode.getString(1);
										labelPaymentCode.setText(studentCode);

									}

									studentName = generateCellValue(
											"SELECT student_name from student_ledger where class_number='" + classNumber
													+ "' and year='" + year + "' LIMIT 1");
									if (studentName.next()) {

										studentNameHeader = studentName.getString(1);

										System.out.println(studentNameHeader);

										DEST = labelPath.getText() + studentName.getString(1) + ".pdf";

										generateReportForOlevel(classNumber, DEST);

									} else {

									}

								}

								JOptionPane.showMessageDialog(null,
										"Done Auto Generating Report Cards For The Selected Class");

							} catch (Exception e) {
								e.printStackTrace();
							}

							stage.hide();

						} else {

							/*************************************************************************
							 * Progress of the report generation
							 *************************************************************************/
							Group root = new Group();
							scene = new Scene(root, 250, 55, Color.BLACK);
							Stage stage = new Stage();

							stage.initStyle(StageStyle.UNDECORATED);
							stage.setScene(scene);
							stage.setTitle("Progress Controls");

							for (int i = 0; i < values.length; i++) {
								final Label label = labels[i] = new Label();

								final ProgressBar pb = pbs[i] = new ProgressBar();
								pb.setProgress(values[i]);

								final ProgressIndicator pin = pins[i] = new ProgressIndicator();
								pin.setProgress(values[i]);
								final HBox hb = hbs[i] = new HBox();
								hb.setSpacing(5);
								hb.setAlignment(Pos.CENTER);
								hb.getChildren().addAll(label, pb, pin);
							}

							final VBox vb = new VBox();
							vb.setSpacing(1);
							vb.getChildren().addAll(hbs);
							scene.setRoot(vb);
							stage.setResizable(false);
							stage.setOpacity(0.8);
							stage.show();

							ResultSet eachClassNumber;
							try {

								Calendar calendar = Calendar.getInstance();

								String fourdigits = "" + calendar.getTime();

								year = fourdigits.substring(fourdigits.length() - 4);

								String SQLClassNumber = "SELECT class_number from student_ledger where class_number LIKE '%"
										+ comboBoxStream.getSelectionModel().getSelectedItem() + "%' and year='" + year
										+ "'";
								eachClassNumber = generateCellValue(SQLClassNumber);

								ResultSet paymentCode;

								while (eachClassNumber.next()) {

									/*
									 * Loop Through Class Number 1 To The End
									 */

									String classNumber = eachClassNumber.getString(1);

									String SQLPaymentCode = "SELECT payment_code from student_ledger where class_number = '"
											+ classNumber + "' and year='" + year + "'";
									paymentCode = generateCellValue(SQLPaymentCode);
									if (paymentCode.next()) {

										String studentCode = paymentCode.getString(1);
										labelPaymentCode.setText(studentCode);

									}

									studentName = generateCellValue(
											"SELECT student_name from student_ledger where class_number='" + classNumber
													+ "' and year='" + year + "' LIMIT 1");
									if (studentName.next()) {

										studentNameHeader = studentName.getString(1);

										System.out.println(studentNameHeader);

										DEST = labelPath.getText() + studentName.getString(1) + ".pdf";

										generateReportForAlevel(classNumber, DEST);

									} else {

									}

								}

								JOptionPane.showMessageDialog(null,
										"Done Auto Generating Report Cards For The Selected Class");

							} catch (Exception e) {
								e.printStackTrace();
							}
							stage.hide();

						}

					}

				});

			}
		});

		btnChoosePath.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent arg0) {

				// choose file save path or folder

				JFileChooser fc = new JFileChooser();
				fc.setCurrentDirectory(new java.io.File("."));
				fc.setDialogTitle("Choose Folder Where Autogenerated Results Will Be Saved");
				fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				/*********************************
				 * Disable the "All Files" option
				 **********************************/
				fc.setAcceptAllFileFilterUsed(false);

				if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
					String path = fc.getSelectedFile().getAbsolutePath().toString().replace("\\", "\\\\") + "\\\\";
					labelPath.setText(path);
				} else {
					JOptionPane.showMessageDialog(null, "No Selection Made");
				}

				// if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
				//
				// String fil = fc.getSelectedFile().getAbsolutePath();
				// String FilePath = fil.replace("\\", "\\\\");
				//
				// labelPath.setText("" + FilePath);
				// }
			}
		});
		gridPaneSearchAttendanceLesson = new GridPane();
		vBoxsearchAttendanceLesson = new VBox();

		gridPaneEntriesAttendanceLesson = new GridPane();
		gridPaneEntriesAttendanceLesson.setVgap(15);
		gridPaneEntriesAttendanceLesson.setHgap(15);

		gridPaneEntriesAttendanceLesson.setPadding(new Insets(10));

		gridPaneEntriesAttendanceLesson.add(comboBoxStream, 0, 0);
		gridPaneEntriesAttendanceLesson.add(fieldTimeEntriesAttendanceLesson, 0, 1);
		gridPaneEntriesAttendanceLesson.add(labelClassEntriesAttendanceLesson, 2, 0);
		gridPaneEntriesAttendanceLesson.add(labelSubjectEntriesAttendanceLesson, 3, 0);
		gridPaneEntriesAttendanceLesson.add(labelTermEntriesAttendanceLesson, 4, 0);
		gridPaneEntriesAttendanceLesson.add(labelTerm, 5, 0);

		gridPaneEntriesAttendanceLesson.add(labelPaymentCode, 0, 2);
		gridPaneEntriesAttendanceLesson.add(comboBoxClassEntriesAttendanceLesson, 2, 1);
		gridPaneEntriesAttendanceLesson.add(comboBoxSubjectEntriesAttendanceLesson, 3, 1);
		gridPaneEntriesAttendanceLesson.add(comboBoxTermEntriesAttendanceLesson, 4, 1);
		gridPaneEntriesAttendanceLesson.add(buttonSaveAttendanceLesson, 5, 2);
		gridPaneEntriesAttendanceLesson.add(comboTerm, 5, 1);
		gridPaneEntriesAttendanceLesson.add(labelPathName, 2, 2);
		gridPaneEntriesAttendanceLesson.add(labelPath, 3, 2);
		gridPaneEntriesAttendanceLesson.add(btnChoosePath, 4, 2);

		gridPanePapers = new GridPane();
		gridPanePapers.setVgap(10);
		gridPanePapers.setHgap(10);
		gridPanePapers.setAlignment(Pos.CENTER);

		labelSub1 = new Label("");
		gridPanePapers.add(labelSub1, 0, 0);
		fieldPapers1 = new TextField("2");
		fieldPapers1.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers1, 1, 0);

		labelSub2 = new Label("");
		gridPanePapers.add(labelSub2, 2, 0);
		fieldPapers2 = new TextField("2");
		fieldPapers2.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers2, 3, 0);

		labelSub3 = new Label("");
		gridPanePapers.add(labelSub3, 0, 1);
		fieldPapers3 = new TextField("3");
		fieldPapers3.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers3, 1, 1);

		labelSub4 = new Label("");
		gridPanePapers.add(labelSub4, 2, 1);
		fieldPapers4 = new TextField("3");
		fieldPapers4.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers4, 3, 1);

		labelSub5 = new Label("");
		gridPanePapers.add(labelSub5, 0, 2);
		fieldPapers5 = new TextField("3");
		fieldPapers5.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers5, 1, 2);

		labelSub6 = new Label("");
		gridPanePapers.add(labelSub6, 2, 2);
		fieldPapers6 = new TextField("3");
		fieldPapers6.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers6, 3, 2);

		labelSub7 = new Label("");
		gridPanePapers.add(labelSub7, 0, 3);
		fieldPapers7 = new TextField("2");
		fieldPapers7.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers7, 1, 3);

		labelSub8 = new Label("");
		gridPanePapers.add(labelSub8, 2, 3);
		fieldPapers8 = new TextField("3");
		fieldPapers8.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers8, 3, 3);

		labelSub9 = new Label("");
		gridPanePapers.add(labelSub9, 0, 4);
		fieldPapers9 = new TextField("3");
		fieldPapers9.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers9, 1, 4);

		labelSub10 = new Label("");
		gridPanePapers.add(labelSub10, 2, 4);
		fieldPapers10 = new TextField("3");
		fieldPapers10.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers10, 3, 4);

		labelSub11 = new Label("");
		gridPanePapers.add(labelSub11, 0, 5);
		fieldPapers11 = new TextField("3");
		fieldPapers11.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers11, 1, 5);

		labelSub12 = new Label("");
		gridPanePapers.add(labelSub12, 2, 5);
		fieldPapers12 = new TextField("3");
		fieldPapers12.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers12, 3, 5);

		labelSub13 = new Label("");
		gridPanePapers.add(labelSub13, 0, 6);
		fieldPapers13 = new TextField("1");
		fieldPapers13.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers13, 1, 6);

		labelSub14 = new Label("");
		gridPanePapers.add(labelSub14, 2, 6);
		fieldPapers14 = new TextField("1");
		fieldPapers14.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers14, 3, 6);

		labelSub15 = new Label("");
		gridPanePapers.add(labelSub15, 0, 7);
		fieldPapers15 = new TextField("2");
		fieldPapers15.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers15, 1, 7);

		labelSub16 = new Label("");
		gridPanePapers.add(labelSub16, 2, 7);
		fieldPapers16 = new TextField("2");
		fieldPapers16.setPromptText("No. of Papers(1-9)");
		gridPanePapers.add(fieldPapers16, 3, 7);

		fieldPapers16.setVisible(false);
		fieldPapers15.setVisible(false);
		fieldPapers14.setVisible(false);
		fieldPapers13.setVisible(false);
		fieldPapers12.setVisible(false);
		fieldPapers11.setVisible(false);
		fieldPapers10.setVisible(false);
		fieldPapers9.setVisible(false);
		fieldPapers8.setVisible(false);
		fieldPapers7.setVisible(false);
		fieldPapers6.setVisible(false);
		fieldPapers5.setVisible(false);
		fieldPapers4.setVisible(false);
		fieldPapers3.setVisible(false);
		fieldPapers2.setVisible(false);
		fieldPapers1.setVisible(false);

		labelSub16.setVisible(false);
		labelSub15.setVisible(false);
		labelSub14.setVisible(false);
		labelSub13.setVisible(false);
		labelSub12.setVisible(false);
		labelSub11.setVisible(false);
		labelSub10.setVisible(false);
		labelSub9.setVisible(false);
		labelSub8.setVisible(false);
		labelSub7.setVisible(false);
		labelSub6.setVisible(false);
		labelSub5.setVisible(false);
		labelSub4.setVisible(false);
		labelSub3.setVisible(false);
		labelSub2.setVisible(false);
		labelSub1.setVisible(false);

		ResultSet subj1;

		try {

			subj1 = generateCellValue("select subject_name from student_subjectsa where id=1");
			if (subj1.next()) {

				labelSub1.setText(subj1.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}

		ResultSet subj2;

		try {

			subj2 = generateCellValue("select subject_name from student_subjectsa where id=2");
			if (subj2.next()) {

				labelSub2.setText(subj2.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj3;

		try {

			subj3 = generateCellValue("select subject_name from student_subjectsa where id=3");
			if (subj3.next()) {

				labelSub3.setText(subj3.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj4;

		try {

			subj4 = generateCellValue("select subject_name from student_subjectsa where id=4");
			if (subj4.next()) {

				labelSub4.setText(subj4.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj5;

		try {

			subj5 = generateCellValue("select subject_name from student_subjectsa where id=5");
			if (subj5.next()) {

				labelSub5.setText(subj5.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj6;

		try {

			subj6 = generateCellValue("select subject_name from student_subjectsa where id=6");
			if (subj6.next()) {

				labelSub6.setText(subj6.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj7;

		try {

			subj7 = generateCellValue("select subject_name from student_subjectsa where id=7");
			if (subj7.next()) {

				labelSub7.setText(subj7.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj8;

		try {

			subj8 = generateCellValue("select subject_name from student_subjectsa where id=8");
			if (subj8.next()) {

				labelSub8.setText(subj8.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj9;

		try {

			subj9 = generateCellValue("select subject_name from student_subjectsa where id=9");
			if (subj9.next()) {

				labelSub9.setText(subj9.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj10;

		try {

			subj10 = generateCellValue("select subject_name from student_subjectsa where id=10");
			if (subj10.next()) {

				labelSub10.setText(subj10.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj11;

		try {

			subj11 = generateCellValue("select subject_name from student_subjectsa where id=11");
			if (subj11.next()) {

				labelSub11.setText(subj11.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj12;

		try {

			subj12 = generateCellValue("select subject_name from student_subjectsa where id=12");
			if (subj12.next()) {

				labelSub12.setText(subj12.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj13;

		try {

			subj13 = generateCellValue("select subject_name from student_subjectsa where id=13");
			if (subj13.next()) {

				labelSub13.setText(subj13.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj14;

		try {

			subj14 = generateCellValue("select subject_name from student_subjectsa where id=14");
			if (subj14.next()) {

				labelSub14.setText(subj14.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj15;

		try {

			subj15 = generateCellValue("select subject_name from student_subjectsa where id=15");
			if (subj15.next()) {

				labelSub15.setText(subj15.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet subj16;

		try {

			subj16 = generateCellValue("select subject_name from student_subjectsa where id=16");
			if (subj16.next()) {

				labelSub16.setText(subj16.getString(1));
			}

		} catch (Exception e) {
			// TODO: handle exception
		}

		vBoxsearchAttendanceLesson.getChildren().addAll(gridPaneEntriesAttendanceLesson, gridPanePapers);
		vBoxsearchAttendanceLesson.setAlignment(Pos.CENTER);

		hboxHomeMain = new HBox(2);

		hboxHomeMain.setAlignment(Pos.CENTER);
		vboxLabelPicture = new VBox(2);
		vboxLabelPictureReal = new VBox(2);

		vboxLabelPicture.setPadding(new Insets(10, 10, 10, 10));
		labelPictureStudent = new Label("");
		vboxLabelPictureReal.setPrefSize(150, 145);
		vboxLabelPictureReal.setStyle("-fx-border-color: white");
		vboxLabelPicture.getChildren().add(vboxLabelPictureReal);

		hboxHomeMain.getChildren().addAll(vBoxsearchAttendanceLesson, vboxLabelPicture);

		borderPaneAttendanceLesson.setTop(hboxHomeMain);

		sceneAttendanceLesson = new Scene(borderPaneAttendanceLesson);

		String styleSheet = getClass().getResource("attendance.css").toExternalForm();
		sceneAttendanceLesson.getStylesheets().add(styleSheet);

		jfxPanelAttendanceLesson.setScene(sceneAttendanceLesson);
		jfxPanelAttendanceLesson.setPreferredSize(new Dimension(1160, 480));

		this.add(jfxPanelAttendanceLesson);
	}

	protected void displayStudentPicture() {

		try {

			java.sql.Connection conn = CashBookController.getConnection();

			Calendar cal = Calendar.getInstance();

			String four = "" + cal.getTime();

			String answer = four.substring(four.length() - 4);

			PreparedStatement pst = conn.prepareStatement(
					"select students_info.photo,student_ledger.student_name,student_ledger.payment_code from student_ledger,students_info where (student_ledger.class_number='"
							+ fieldTimeEntriesAttendanceLesson.getText() + "' or student_ledger.payment_code= '"
							+ fieldTimeEntriesAttendanceLesson.getText() + "') and student_ledger.year = '" + answer
							+ "' and students_info.payment_code=student_ledger.payment_code group by students_info.payment_code");
			ResultSet rs = pst.executeQuery();

			if (rs.next()) {

				// String name = rs.getString("student_ledger.student_name");
				// labelNameSearchAttendanceLesson.setText(name);

				String code = rs.getString("student_ledger.payment_code");
				labelPaymentCode.setText(code);

				InputStream is = rs.getBinaryStream("students_info.photo");
				OutputStream os = new FileOutputStream(new File("photo.jpg"));
				byte[] content = new byte[1025];
				int size = 0;

				while ((size = is.read(content)) != -1) {

					os.write(content, 0, size);

				}

				os.close();
				is.close();

				image = new Image("file:photo.jpg", 145, 150, true, true);

				finalViewedImage = new ImageView(image);
				finalViewedImage.setFitHeight(145);
				finalViewedImage.setFitWidth(150);
				// finalViewedImage.setPreserveRatio(true);
				vboxLabelPictureReal.getChildren().clear();
				vboxLabelPictureReal.getChildren().add(finalViewedImage);
				// fieldtimeSearchAttendanceLesson.setEditable(true);

			} else {
				vboxLabelPictureReal.getChildren().remove(finalViewedImage);
				// labelNameSearchAttendanceLesson.setText("Student Name:");
				labelPaymentCode.setText("Payment Code");
				// fieldtimeSearchAttendanceLesson.setEditable(false);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	private void clearFields() {
		datePickerEntriesAttendanceLesson.getEditor().clear();
		comboBoxNameEntriesAttendanceLesson.getEditor().clear();
		comboBoxClassEntriesAttendanceLesson.getEditor().clear();
		comboBoxSubjectEntriesAttendanceLesson.getEditor().clear();
		fieldTimeEntriesAttendanceLesson.clear();
		comboBoxTermEntriesAttendanceLesson.getEditor().clear();
	}

	public void displayInComboBoxStaffs(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				staffs.add(rs.getString(1));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxClass(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				classes.add(rs.getString(1));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxClassGrades(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			dataClass.clear();
			while (rs.next()) {
				dataClass.add(rs.getString(1));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxSubjectGrades(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			dataSubject.clear();
			while (rs.next()) {
				dataSubject.add(rs.getString(1));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxTestName(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			dataTestName.clear();
			while (rs.next()) {
				dataTestName.add(rs.getString(1));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxSubject(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			while (rs.next()) {
				subjects.add(rs.getString(1));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxTerms(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			terms.clear();
			while (rs.next()) {
				terms.add(rs.getString(1));
			}
		} catch (SQLException e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxTests(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			tests.clear();
			while (rs.next()) {
				tests.add(rs.getString(1));
			}
		} catch (SQLException e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void displayInComboBoxTestsCategories(ComboBox combo, String query) {
		try {
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(query);

			ResultSet rs = pst.executeQuery();

			testsCats.clear();
			while (rs.next()) {
				testsCats.add(rs.getString(1));
			}
		} catch (SQLException e) {

			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (conn != null) {

				try {
					conn.close();
					pst.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}

	}

	public void AddUpdateDelete(String querries) {

		try {

			java.sql.Connection conn = null;
			java.sql.PreparedStatement pst = null;
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(querries);

			pst.executeUpdate();

			Platform.runLater(new Runnable() {

				@Override
				public void run() {
					// TODO Auto-generated method stub
					Alert alert = new Alert(Alert.AlertType.INFORMATION);
					alert.initStyle(StageStyle.TRANSPARENT);
					alert.initModality(Modality.WINDOW_MODAL);
					alert.setContentText("Request Executed Successfully");
					alert.setHeaderText("Notice of Success");
					Optional<ButtonType> result = alert.showAndWait();
					if (result.get() == ButtonType.OK) {

						alert.close();
					}
				}
			});

			displayInComboBoxTerms(comboBoxTermEntriesAttendanceLesson, "select test_name from students_tests");

		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, "Request Not Executed Successfully " + ex.getMessage());

		}
	}

	public void AddUpdateDeleteStudentsData(String querries) {

		try {

			java.sql.Connection conn = null;
			java.sql.PreparedStatement pst = null;
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(querries);

			pst.executeUpdate();

			JOptionPane.showMessageDialog(null, "Mark Recorded Successfully");

		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null,
					"Student Class Number Is Not In The System\nPlease check why this student is not in the system");

		}
	}

	public void AddUpdateDeleteSilently(String querries) {

		try {

			java.sql.Connection conn = null;
			java.sql.PreparedStatement pst = null;
			conn = CashBookController.getConnection();
			pst = conn.prepareStatement(querries);

			pst.executeUpdate();

		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(null, "Request Not Executed Successfully " + ex.getMessage());

		}
	}

	public Date convertFromUtilToSQLDate(java.util.Date dateUtil) {

		if (dateUtil != null) {
			java.sql.Date sqlDate = new java.sql.Date(dateUtil.getTime());

			return sqlDate;
		} else {
			return null;
		}
	}

	public void buildData() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select `Class Number`,`Student Class`,`Student Subject`,`Student Name`,`Staff Name` from students_marks";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));

				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(200);
				tableview.getColumns().addAll(col);

			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void buildDataLater() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select DISTINCT students_marks.`Class Number`,students_marks.`Student Class`,students_marks.`Student Subject`,students_marks.`Student Name`,"
					+ "students_marks.`Marks Obtained`,"
					+ "(CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
					+ "AND students_marks.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND students_marks.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
					+ "THEN students_grading.`Grade` ELSE '' END) AS Grade, "
					+ "students_marks.`Staff Name` from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
					+ " and students_grading.`Subject`='"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' and "
					+ "students_grading.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and students_grading.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and (CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND students_marks.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' THEN students_grading.`Grade` END)!=''";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(160);
				tableview.getColumns().addAll(col);
			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void buildDataLaterByStaff() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select DISTINCT students_marks.`Class Number`,students_marks.`Student Class`,students_marks.`Student Subject`,students_marks.`Student Name`,"
					+ "students_marks.`Marks Obtained`,students_marks.`Test Name`,(CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` ELSE '' END) AS Grade, "
					+ "students_marks.`Staff Name` from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject` and students_grading.`Subject`='"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' and "
					+ "students_grading.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and students_grading.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and (CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` END)!=''";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(160);
				tableview.getColumns().addAll(col);
			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void buildDataLaterByTest() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select DISTINCT students_marks.`Class Number`,students_marks.`Student Class`,students_marks.`Student Subject`,students_marks.`Student Name`,"
					+ "students_marks.`Marks Obtained`,students_marks.`Test Name`,(CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` ELSE '' END) AS Grade, "
					+ "students_marks.`Staff Name` from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject` and students_grading.`Subject`='"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' and "
					+ "students_grading.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and students_grading.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and (CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` END)!=''";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(160);
				tableview.getColumns().addAll(col);
			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void buildDataLaterBySubject() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select DISTINCT students_marks.`Class Number`,students_marks.`Student Class`,students_marks.`Student Subject`,students_marks.`Student Name`,"
					+ "students_marks.`Marks Obtained`,students_marks.`Test Name`,(CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` ELSE '' END) AS Grade, "
					+ "students_marks.`Staff Name` from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject` and students_grading.`Subject`='"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' and "
					+ "students_grading.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and students_grading.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and (CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` END)!=''";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(160);
				tableview.getColumns().addAll(col);
			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void buildDataLaterByClass() {
		java.sql.Connection c;
		data = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select DISTINCT students_marks.`Class Number`,students_marks.`Student Class`,students_marks.`Student Subject`,students_marks.`Student Name`,"
					+ "students_marks.`Marks Obtained`,students_marks.`Test Name`,(CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` ELSE '' END) AS Grade, "
					+ "students_marks.`Staff Name` from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject` and students_grading.`Subject`='"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' and "
					+ "students_grading.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and students_grading.`Test Name`='"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' and (CASE WHEN students_marks.`Marks Obtained` BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` THEN students_grading.`Grade` END)!=''";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableview.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(160);
				tableview.getColumns().addAll(col);
			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}
				data.add(row);

			}

			// FINALLY ADDED TO TableView
			tableview.setItems(data);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void saveAndShowGrades() {
		java.sql.Connection c;
		dataGrades = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select `Student Class`,`Subject`,`Test Name`,`From (%)`,`To (%)`,`Grade` from students_grading";
			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableViewGrades.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));

				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(200);
				tableViewGrades.getColumns().addAll(col);

			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}

				dataGrades.add(row);

			}

			// FINALLY ADDED TO TableView
			tableViewGrades.setItems(dataGrades);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void saveAndShowGradesClass() {
		java.sql.Connection c;
		dataGrades = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select `Student Class`,`Subject`,`Test Name`,`From (%)`,`To (%)`,`Grade` "
					+ "from students_grading where `Student Class`='"
					+ comboBoxClass.getSelectionModel().getSelectedItem() + "' " + "and `Subject`='"
					+ comboBoxSubject.getSelectionModel().getSelectedItem() + "' and `Test Name`='"
					+ comboBoxTest.getSelectionModel().getSelectedItem() + "'";

			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableViewGrades.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));

				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(200);
				tableViewGrades.getColumns().addAll(col);

			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}

				dataGrades.add(row);

			}

			// FINALLY ADDED TO TableView
			tableViewGrades.setItems(dataGrades);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void saveAndShowGradesSubject() {
		java.sql.Connection c;
		dataGrades = FXCollections.observableArrayList();
		try {
			c = CashBookController.getConnection();
			// SQL FOR SELECTING ALL OF CUSTOMER
			String SQL = "select `Student Class`,`Subject`,`Test Name`,`From (%)`,`To (%)`,`Grade` "
					+ "from students_grading where `Student Class`='"
					+ comboBoxClass.getSelectionModel().getSelectedItem() + "' " + "and `Subject`='"
					+ comboBoxSubject.getSelectionModel().getSelectedItem() + "' and `Test Name`='"
					+ comboBoxTest.getSelectionModel().getSelectedItem() + "'";

			// ResultSet
			ResultSet rs = c.createStatement().executeQuery(SQL);

			/************************
			 * 
			 * First Clear the table
			 * 
			 **************************/
			tableViewGrades.getColumns().clear();
			/**********************************
			 * TABLE COLUMN ADDED DYNAMICALLY *
			 **********************************/
			for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i + 1));

				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				col.setPrefWidth(200);
				tableViewGrades.getColumns().addAll(col);

			}

			/********************************
			 * Data added to ObservableList *
			 ********************************/
			while (rs.next()) {
				// Iterate Row
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rs.getString(i));
				}

				dataGrades.add(row);

			}

			// FINALLY ADDED TO TableView
			tableViewGrades.setItems(dataGrades);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Error on Building Data: " + e.getMessage());
		}
	}

	public void plotGraph() {
		JDBCCategoryDataset dataset;
		try {
			dataset = new JDBCCategoryDataset(CashBookController.getConnection(),
					"SELECT `Student Name`,`Marks Obtained` from students_marks");
			JFreeChart chart = ChartFactory.createBarChart("A Plot of Hardware Against Quantity", "Hardware",
					"Quantity", dataset, PlotOrientation.VERTICAL, false, true, true);
			BarRenderer renderer = null;
			CategoryPlot plot = null;
			renderer = new BarRenderer();
			ChartFrame frame = new ChartFrame("A Graph", chart);
			frame.setSize(550, 450);
			frame.setLocationRelativeTo(null);
			// frame.setVisible(true);

		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

	public void plotGraphPieChart() {
		DefaultPieDataset dataset = new DefaultPieDataset();
		ResultSet result1;
		String SQL1 = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM students_marks WHERE `Student Class`='"
				+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "' AND (`Test Name` LIKE '%"
				+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%' OR `Test Name` LIKE '%"
				+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%') GROUP BY `Class Number` HAVING AVG(`Marks Obtained`)<50) t";
		try {
			result1 = generateCellValue(SQL1);
			while (result1.next()) {
				below50Count = result1.getDouble(1);

			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		ResultSet result2;
		String SQL2 = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM students_marks WHERE `Student Class`='"
				+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "' AND (`Test Name` LIKE '%"
				+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%' OR `Test Name` LIKE '%"
				+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%') GROUP BY `Class Number` HAVING AVG(`Marks Obtained`) BETWEEN 50 AND 59) t";
		try {
			result2 = generateCellValue(SQL2);
			while (result2.next()) {
				btn50_60 = result2.getDouble(1);

			}
		} catch (Exception e) {
			// TODO: handle exception
		}

		ResultSet result3;
		String SQL3 = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM students_marks WHERE `Student Class`='"
				+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "' AND (`Test Name` LIKE '%"
				+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%' OR `Test Name` LIKE '%"
				+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%') GROUP BY `Class Number` HAVING AVG(`Marks Obtained`) BETWEEN 60 AND 69) t";
		try {
			result3 = generateCellValue(SQL3);
			while (result3.next()) {
				btn60_70 = result3.getDouble(1);

			}

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		ResultSet result4;
		String SQL4 = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM students_marks WHERE `Student Class`='"
				+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "' AND (`Test Name` LIKE '%"
				+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%' OR `Test Name` LIKE '%"
				+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%') GROUP BY `Class Number` HAVING AVG(`Marks Obtained`) BETWEEN 70 AND 79) t";
		try {
			result4 = generateCellValue(SQL4);
			while (result4.next()) {
				btn70_80 = result4.getDouble(1);

			}
		} catch (Exception e) {

		}
		// TODO: handle exception
		ResultSet result5;
		String SQL5 = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM students_marks WHERE `Student Class`='"
				+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "' AND (`Test Name` LIKE '%"
				+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%' OR `Test Name` LIKE '%"
				+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
				+ "%') GROUP BY `Class Number` HAVING AVG(`Marks Obtained`) BETWEEN 80 AND 100) t";
		try {
			result5 = generateCellValue(SQL5);
			while (result5.next()) {
				btn80_100 = result5.getDouble(1);

			}
		} catch (Exception e) {
			// TODO: handle exception
		}

		dataset.setValue("Below 50%", new Double(below50Count));
		dataset.setValue("Btn 50-60%", new Double(btn50_60));
		dataset.setValue("Btn 60-70%", new Double(btn60_70));
		dataset.setValue("Btn 70-80%", new Double(btn70_80));
		dataset.setValue("Btn 80-100%", new Double(btn80_100));

		JFreeChart chart = ChartFactory.createPieChart("Graphical Class Performance", dataset, true, true, true);

		ChartFrame frame = new ChartFrame("A Graph", chart);
		frame.setSize(550, 450);
		frame.setLocationRelativeTo(null);
		// frame.setVisible(true);
		try {

			final ChartRenderingInfo info = new ChartRenderingInfo();
			final File file1 = new File(labelPath.getText() + "Chart.png");
			ChartUtilities.saveChartAsPNG(file1, chart, 595, 390, info);
		} catch (Exception e) {
			// TODO: handle exception
			JOptionPane.showMessageDialog(null, "Error Saving Pie Chart: " + e.getMessage());
		}
		if (frame.isShowing()) {

		}

	}

	public ResultSet generateCellValue(String sql) {

		Statement statement;
		try {
			if (con == null) {
				con = CashBookController.getConnection();
			}

			statement = con.createStatement();

			result = statement.executeQuery(sql);

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

		}

		return result;
	}

	public String teachersInitials(String subject, String test) {

		if (wordCount(teachersName(subject, test)) == 2) {
			sql_initials = "SELECT CONCAT(SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',1),1,1),'.',"
					+ "SUBSTR(SUBSTRING_INDEX(SUBSTRING_INDEX(`Staff Name`,' ',2),' ',-1),1,1)) AS part2 "
					+ "from students_marks where `Test Name` LIKE '%" + test + "%' and `Student Subject`='" + subject
					+ "' LIMIT 1";
		} else if (wordCount(teachersName(subject, test)) == 3) {
			sql_initials = "SELECT CONCAT(SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',1),1,1),'.', "
					+ "SUBSTR(SUBSTRING_INDEX(SUBSTRING_INDEX(`Staff Name`,' ',2),' ',-1),1,1),'.',"
					+ "SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',-1),1,1)) AS part3 "
					+ "from students_marks where `Test Name` LIKE '%" + test + "%' and `Student Subject`='" + subject
					+ "' LIMIT 1";
		} else if (wordCount(teachersName(subject, test)) == 4) {
			sql_initials = "SELECT CONCAT(SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',1),1,1),'.', "
					+ "SUBSTR(SUBSTRING_INDEX(SUBSTRING_INDEX(`Staff Name`,' ',2),' ',-1),1,1),'.',"
					+ "SUBSTR(SUBSTRING_INDEX(SUBSTRING_INDEX(`Staff Name`,' ',-2),' ',1),1,1),'.',"
					+ "SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',-1),1,1)) AS part4 "
					+ "from students_marks where `Test Name` LIKE '%" + test + "%' and `Student Subject`='" + subject
					+ "' LIMIT 1";
		} else {
			sql_initials = "SELECT CONCAT(SUBSTR(SUBSTRING_INDEX(`Staff Name`,' ',1),1,1),'.', "
					+ "SUBSTR(SUBSTRING_INDEX(SUBSTRING_INDEX(`Staff Name`,' ',2),' ',-1),1,1)) AS part2 "
					+ "from students_marks where `Test Name` LIKE '%" + test + "%' and `Student Subject`='" + subject
					+ "' LIMIT 1";
		}

		staffInitial = generateCellValue(sql_initials);
		System.out.println(sql_initials);
		try {
			if (staffInitial.next()) {

				initialsData = staffInitial.getString(1);

			} else {
				initialsData = "";
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return initialsData;
	}

	public String teachersName(String subject, String test) {

		sql_Name = "SELECT `Staff Name` from students_marks where `Test Name` LIKE '%" + test
				+ "%' and `Student Subject`='" + subject + "' LIMIT 1";
		staffName = generateCellValue(sql_Name);
		try {
			if (staffName.next()) {

				nameData = staffName.getString(1);

			} else {
				nameData = "";
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return nameData;

	}

	private void fillTree() {
		String query = "SELECT id,catname FROM tests_categories";
		try {
			cnx = CashBookController.getConnection();
			ps = cnx.prepareStatement(query);
			rs = ps.executeQuery();

			try {
				con = CashBookController.getConnection();
				stm = con.createStatement();
			} catch (Exception ex) {
				ex.printStackTrace();
			}

			while (rs.next()) {

				ResultSet result = stm
						.executeQuery("select test_name from students_tests where catid='" + rs.getInt(1) + "'");
				while (result.next()) {
					parentNode = rs.getInt("id");
					String composant = rs.getString("catname");
					codeNode = rs.getInt("id");
					String niveau = result.getString("test_name");

					c = new Tests(codeNode, parentNode, composant, niveau);
					node.put(codeNode, c);
					pere.put(parentNode, c);
				}
				node.put(codeNode, c);
				pere.put(parentNode, c);
			}
			ps.close();
			rs.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("Error" + e);
		}

		TreeItem<String> system = new TreeItem<>("School Tests");
		// brows and fill parents node
		for (Integer k : pere.keySet()) {
			Tests p = pere.get(k);
			TreeItem<String> parent = new TreeItem<>();
			parent.setValue(p.getName());

			if (p.getDeptID() == k) {
				// if the parent > 0 it must attach to the root node
				if (k >= 0) {
					system.getChildren().add(parent);

				} else {

				}
			}

			// brows and fill child hashmap
			for (Integer i : node.keySet()) {
				Tests c = node.get(i);
				TreeItem<String> noeud = new TreeItem<>();
				noeud.setValue(c.getDepartment());

				if (c.getNameID() == i) {
					// if the parent > 0 it must attach to the root node
					if (i >= 0) {

						parent.getChildren().add(noeud);

					} else {

					}
				}
			}
		}
		tree.setRoot(system);
	}

	public static class Tests {

		private final SimpleStringProperty name;
		private final SimpleStringProperty department;
		private final Integer deptID;
		private final Integer nameID;

		private Tests(Integer id, Integer nameID, String name, String department) {

			this.deptID = id;
			this.nameID = nameID;
			this.name = new SimpleStringProperty(name);
			this.department = new SimpleStringProperty(department);
		}

		public Integer getDeptID() {
			return deptID;
		}

		public Integer getNameID() {
			return nameID;
		}

		public String getName() {
			return name.get();
		}

		public void setName(String fName) {
			name.set(fName);
		}

		public String getDepartment() {
			return department.get();
		}

		public void setDepartment(String fName) {
			department.set(fName);
		}

	}

	public void downloadStudentImage(String sqlDownload) {
		try {
			con = CashBookController.getConnection();
			pst = con.prepareStatement(sqlDownload);
			rs = pst.executeQuery();
			rs.next();
			Blob b = rs.getBlob(1);
			byte barr[] = new byte[(int) b.length()];// an array is created but
														// contains no data
			barr = b.getBytes(1, (int) b.length());

			try {
				FileOutputStream fout = new FileOutputStream(labelPath.getText() + "Student.png");
				fout.write(barr);
				fout.close();
			} catch (Exception e1) {
				e1.printStackTrace();
			}

			System.out.println("Done Downloading Image");

		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	public void downloadSchoolBadge(String sqlDownload) {
		try {
			con = CashBookController.getConnection();
			pst = con.prepareStatement(sqlDownload);
			rs = pst.executeQuery();
			rs.next();
			Blob b = rs.getBlob(1);
			byte barr[] = new byte[(int) b.length()];// an array is created but
														// contains no data
			barr = b.getBytes(1, (int) b.length());

			try {
				FileOutputStream fout = new FileOutputStream(labelPath.getText() + "SchoolBadge.png");
				fout.write(barr);
				fout.close();
			} catch (Exception e1) {
				e1.printStackTrace();
			}

			System.out.println("Done Downloading School Badge");

		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	public void manipulatePdf(String src, String dest) throws IOException, DocumentException {
		PdfReader reader = new PdfReader(src);
		int n = reader.getNumberOfPages();
		PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(dest));
		// text watermark
		Font f = new Font(FontFamily.HELVETICA, 55);
		Phrase p = new Phrase("St. Joseph's College Layibi", f);

		// image watermark
		com.itextpdf.text.Image img = com.itextpdf.text.Image.getInstance(labelPath.getText() + "SchoolBadge.png");
		float w = img.getScaledWidth();
		float h = img.getScaledHeight();
		// transparency
		PdfGState gs1 = new PdfGState();
		gs1.setFillOpacity(0.2f);
		// properties
		PdfContentByte over;
		Rectangle pagesize;
		float x, y;
		// loop over every page
		for (int i = 1; i <= n; i++) {
			pagesize = reader.getPageSizeWithRotation(i);
			x = (pagesize.getLeft() + pagesize.getRight()) / 2;
			y = (pagesize.getTop() + pagesize.getBottom()) / 2;
			over = stamper.getOverContent(i);
			over.saveState();
			over.setGState(gs1);
			if (i % 2 == -1)
				ColumnText.showTextAligned(over, Element.ALIGN_CENTER, p, x, y, 0);
			else
				over.addImage(img, w + 220, 0, 0, h + 225, x - (w), y - (h - 20));
			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, p, x, y, 45);

			over.restoreState();
		}
		stamper.close();
		reader.close();
	}

	public void manipulatePdfAlevel(String src, String dest) throws IOException, DocumentException {
		PdfReader reader = new PdfReader(src);
		int n = reader.getNumberOfPages();
		PdfStamper stamper = new PdfStamper(reader, new FileOutputStream(dest));
		// text watermark
		Font f = new Font(FontFamily.HELVETICA, 55);
		Phrase p = new Phrase("St. Joseph's College Layibi", f);

		// image watermark
		com.itextpdf.text.Image img = com.itextpdf.text.Image.getInstance(labelPath.getText() + "SchoolBadge.png");
		float w = img.getScaledWidth();
		float h = img.getScaledHeight();
		// transparency
		PdfGState gs1 = new PdfGState();
		gs1.setFillOpacity(0.2f);
		// properties
		PdfContentByte over;
		Rectangle pagesize;
		float x, y;
		// loop over every page
		for (int i = 1; i <= n; i++) {
			pagesize = reader.getPageSizeWithRotation(i);
			x = (pagesize.getLeft() + pagesize.getRight()) / 2;
			y = (pagesize.getTop() + pagesize.getBottom()) / 2;
			over = stamper.getOverContent(i);
			over.saveState();
			over.setGState(gs1);
			if (i % 2 == -1)
				ColumnText.showTextAligned(over, Element.ALIGN_CENTER, p, x, y, 0);
			else
				over.addImage(img, w + 220, 0, 0, h + 225, x - (w), y - (h + 80));
			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, p, x, y, 45);

			over.restoreState();
		}
		stamper.close();
		reader.close();
	}

	public void generateReportForOlevel(String classNumber, String destinationFolder) {

		/**************************************************
		 * Choosing the storage location of results
		 **************************************************/

		// JFileChooser fc = new JFileChooser();
		//
		// if (fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
		//
		// String fil = fc.getSelectedFile().getAbsolutePath();
		// FilePath = fil.replace("\\", "\\\\");
		//
		// labelPath.setText("" + FilePath);
		// }

		/****************************************************************
		 * Download Student Image and Store for later puting on results
		 ****************************************************************/

		Calendar cal = Calendar.getInstance();

		String four = "" + cal.getTime();

		answer = four.substring(four.length() - 4);
		downloadStudentImage("select students_info.photo from students_info,student_ledger "
				+ "where student_ledger.class_number='" + classNumber + "' AND student_ledger.year='" + answer
				+ "' and students_info.payment_code=student_ledger.payment_code group by students_info.payment_code");
		downloadSchoolBadge("select school_logo from school_details LIMIT 1");

		/**************************************************
		 * Creating a pdf document for holding report info
		 **************************************************/

		com.itextpdf.text.Document document = new com.itextpdf.text.Document();

		try {
			output = new FileOutputStream(destinationFolder);

			PdfWriter writer = PdfWriter.getInstance(document, output);

			/**************************************************
			 * Opening the .pdf document holding report info
			 **************************************************/

			document.open();

			/**************************************************
			 * Adding School badge to the report card
			 **************************************************/

			com.itextpdf.text.Image image = com.itextpdf.text.Image
					.getInstance(labelPath.getText() + "SchoolBadge.png");
			// image.scaleToFit(101, 90);
			image.setAlignment(Element.ALIGN_CENTER);

			/**************************************************
			 * Adding Student Picture to the report card
			 **************************************************/

			com.itextpdf.text.Image imageStudent = com.itextpdf.text.Image
					.getInstance(labelPath.getText() + "Student.png");
			// imageStudent.scaleToFit(101, 90);
			imageStudent.setAlignment(Element.ALIGN_CENTER);

			/**************************************************
			 * Creating document heading for report
			 **************************************************/

			ResultSet schoolStuffs;
			try {

				schoolStuffs = generateCellValue(
						"SELECT school_name,school_email,school_phone,school_address from school_details");
				if (schoolStuffs.next()) {
					schoolName = schoolStuffs.getString(1);
					schoolAddress = schoolStuffs.getString(4);
					schoolPhone = schoolStuffs.getString(3);
					schoolEmail = schoolStuffs.getString(2);

				} else {
					JOptionPane.showMessageDialog(null, "No School Details Found");
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			Paragraph heading = new Paragraph(schoolName,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new BaseColor(0, 126, 156)));
			heading.setAlignment(Element.ALIGN_CENTER);

			/**************************************************
			 * Creating document sub heading for report
			 **************************************************/

			Paragraph headingPOBOX = new Paragraph(schoolAddress,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingPOBOX.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingTel = new Paragraph(schoolPhone,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingTel.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingEmail = new Paragraph(schoolEmail,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingEmail.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingMoto = new Paragraph("HARD WORK AND DETERMINATION PAYS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD, new BaseColor(0, 126, 156)));
			headingMoto.setAlignment(Element.ALIGN_CENTER);

			PdfPCell cellHead = new PdfPCell();

			cellHead.addElement(headingPOBOX);
			cellHead.addElement(headingEmail);
			cellHead.addElement(headingTel);
			cellHead.addElement(headingMoto);

			PdfPTable tableHeader = new PdfPTable(3);

			PdfPCell cellLogo = new PdfPCell(image, true);
			PdfPCell cellStudentPic = new PdfPCell(imageStudent, true);

			cellLogo.setBorder(0);
			cellLogo.setFixedHeight(55f);
			cellHead.setBorder(0);
			cellHead.setFixedHeight(55f);
			cellStudentPic.setBorder(0);
			cellStudentPic.setFixedHeight(55f);

			tableHeader.addCell(cellLogo);
			tableHeader.addCell(cellHead);
			tableHeader.addCell(cellStudentPic);
			tableHeader.setWidthPercentage(100);
			// tableHeader.setTotalWidth(document.right() - document.left() + 20);
			tableHeader.setWidths(new float[] { 1, 4, 1 });

			document.add(tableHeader);

			// document.add(tableHeader); Table added to header instead

			/**************************************************
			 * Underlining the heading manually
			 **************************************************/

			Paragraph paragraphUnderline = new Paragraph("O-LEVEL TERMLY REPORT CARD",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(44, 67, 144)));
			paragraphUnderline.setAlignment(Element.ALIGN_CENTER);
			document.add(new Paragraph(""));
			document.add(Chunk.NEWLINE);

			paragraphUnderline.setAlignment(Element.ALIGN_CENTER);
			PdfPCell cell = new PdfPCell();
			cell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
			cell.setBorderColor(new BaseColor(44, 67, 144));
			cell.setBorderWidth(1f);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.addElement(paragraphUnderline);
			cell.addElement(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 2, Font.BOLD, BaseColor.WHITE)));
			cell.setFixedHeight(18f);

			tableReportHeader = new PdfPTable(1);
			tableReportHeader.setWidthPercentage(99);
			tableReportHeader.addCell(cell);

			LineSeparator sep = new LineSeparator();
			sep.setOffset(2);
			sep.setAlignment(Element.ALIGN_CENTER);
			sep.setLineColor(new BaseColor(0, 126, 156));
			sep.setPercentage(99);
			document.add(sep);

			document.add(tableReportHeader);
			LineSeparator sep1 = new LineSeparator();
			sep1.setOffset(2);
			sep1.setAlignment(Element.ALIGN_CENTER);
			sep1.setLineColor(new BaseColor(0, 126, 156));
			sep1.setPercentage(99);
			document.add(sep1);

			document.add(new Paragraph(""));

			PdfPTable tableMaMalo = new PdfPTable(4);
			tableMaMalo.setWidths(new float[] { 1, 2, 2, 1 });

			try {

				Calendar calendar = Calendar.getInstance();

				String fourdigits = "" + calendar.getTime();

				year = fourdigits.substring(fourdigits.length() - 4);

				studentName = generateCellValue(
						"SELECT student_name,class_number,student_class,term from student_ledger where class_number='"
								+ classNumber + "' and year='" + year + "' AND term='"
								+ comboTerm.getSelectionModel().getSelectedItem() + "' LIMIT 1");
				if (studentName.next()) {

					studentNameHeader = studentName.getString(1);
					studentClass = studentName.getString(3);
					studentClassNumber = studentName.getString(2);
					studentTerm = studentName.getString(4);

				} else {
					studentNameHeader = "No Student Found";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			Calendar calendar = new GregorianCalendar();
			int Calyear = calendar.get(Calendar.YEAR);

			Paragraph pName = new Paragraph("Student Name:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellName = new PdfPCell(pName);
			cellName.setBorder(0);
			tableMaMalo.addCell(cellName);

			Paragraph pNameValue = new Paragraph(studentNameHeader,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellNameValue = new PdfPCell(pNameValue);
			cellNameValue.setBorder(0);
			tableMaMalo.addCell(cellNameValue);

			Paragraph pClassNumber = new Paragraph("Admission Number:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellClassNumber = new PdfPCell(pClassNumber);
			cellClassNumber.setBorder(0);
			tableMaMalo.addCell(cellClassNumber);

			Paragraph pClassNumberValue = new Paragraph(studentClassNumber,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellClassNumberValue = new PdfPCell(pClassNumberValue);
			cellClassNumberValue.setBorder(0);
			tableMaMalo.addCell(cellClassNumberValue);

			Paragraph pClass = new Paragraph("Student Class:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellClass = new PdfPCell(pClass);
			cellClass.setBorder(0);
			tableMaMalo.addCell(cellClass);

			Paragraph pClassValue = new Paragraph(studentClass,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellClassValue = new PdfPCell(pClassValue);
			cellClassValue.setBorder(0);
			tableMaMalo.addCell(cellClassValue);

			Paragraph pYearTerm = new Paragraph("Term,Year:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellYearTerm = new PdfPCell(pYearTerm);
			cellYearTerm.setBorder(0);
			tableMaMalo.addCell(cellYearTerm);

			Paragraph pYearValue = new Paragraph(studentTerm + "," + Calyear,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellYearValue = new PdfPCell(pYearValue);
			cellYearValue.setBorder(0);
			tableMaMalo.addCell(cellYearValue);

			tableMaMalo.setWidthPercentage(100);

			document.add(new Paragraph(""));

			document.add(tableMaMalo);

			document.add(new Paragraph(""));

			/******************************************************
			 * Adding Background image
			 ******************************************************/
			com.itextpdf.text.Image imageBackground = com.itextpdf.text.Image
					.getInstance(labelPath.getText() + "SchoolBadge.png");
			imageBackground.scaleToFit(document.getPageSize().getWidth(), document.getPageSize().getHeight());
			imageBackground.setAlignment(com.itextpdf.text.Image.UNDERLYING);
			imageBackground.setAbsolutePosition(0, 0);
			// document.add(imageBackground);

			/**************************************************
			 * Creating Table for the report card
			 **************************************************/

			tableO = new PdfPTable(10);
			tableO.setWidths(new float[] { 1, 6, 2, 2, 2, 2, 2, 2, 3, 2 });

			/********************************************************************
			 * Set General Heading...Column Span number should cover all columns
			 ********************************************************************/
			String lastLetter = studentNameHeader.substring(studentNameHeader.length() - 1);
			if (lastLetter.equals("s") || lastLetter.equals("S")) {
				paraheading = new Paragraph(
						studentNameHeader + "' " + comboTerm.getSelectionModel().getSelectedItem() + " Results, "
								+ Calyear,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.WHITE));
			} else {
				paraheading = new Paragraph(
						studentNameHeader + "'s " + comboTerm.getSelectionModel().getSelectedItem() + " Results, "
								+ Calyear,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.WHITE));
			}

			PdfPCell headerGeneral = new PdfPCell(paraheading);
			headerGeneral.setPadding(5);
			headerGeneral.setColspan(10);
			headerGeneral.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral.setBackgroundColor(new BaseColor(23, 176, 196));

			/**************************************************
			 * Creating header of each column...column span=1
			 **************************************************/

			PdfPCell header1 = new PdfPCell(
					new Paragraph("S/N", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header1.setColspan(1);
			header1.setHorizontalAlignment(Element.ALIGN_CENTER);
			header1.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header2 = new PdfPCell(new Paragraph("Subject",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header2.setColspan(1);
			header2.setHorizontalAlignment(Element.ALIGN_CENTER);
			header2.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header3 = new PdfPCell(new Paragraph("MoT(%)",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header3.setColspan(1);
			header3.setHorizontalAlignment(Element.ALIGN_CENTER);
			header3.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header4 = new PdfPCell(new Paragraph("Rank",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header4.setColspan(1);
			header4.setHorizontalAlignment(Element.ALIGN_CENTER);
			header4.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header5 = new PdfPCell(new Paragraph("EoT(%)",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header5.setColspan(1);
			header5.setHorizontalAlignment(Element.ALIGN_CENTER);
			header5.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header6 = new PdfPCell(new Paragraph("Rank",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header6.setColspan(1);
			header6.setHorizontalAlignment(Element.ALIGN_CENTER);
			header6.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header7 = new PdfPCell(new Paragraph("Average",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header7.setColspan(1);
			header7.setHorizontalAlignment(Element.ALIGN_CENTER);
			header7.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header8 = new PdfPCell(new Paragraph("Grade",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header8.setColspan(1);
			header8.setHorizontalAlignment(Element.ALIGN_CENTER);
			header8.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header9 = new PdfPCell(new Paragraph("Remarks",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header9.setColspan(1);
			header9.setHorizontalAlignment(Element.ALIGN_CENTER);
			header9.setBackgroundColor(new BaseColor(0, 126, 156));

			PdfPCell header10 = new PdfPCell(new Paragraph("INITIAL",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));
			header10.setColspan(1);
			header10.setHorizontalAlignment(Element.ALIGN_CENTER);
			header10.setBackgroundColor(new BaseColor(0, 126, 156));

			/*****************************************************
			 * Adding the cells to the tableO and tableO to the doc
			 *****************************************************/

			tableO.addCell(headerGeneral);
			tableO.addCell(header1);
			tableO.addCell(header2);
			tableO.addCell(header3);
			tableO.addCell(header4);
			tableO.addCell(header5);
			tableO.addCell(header6);
			tableO.addCell(header7);
			tableO.addCell(header8);
			tableO.addCell(header9);
			tableO.addCell(header10);

			/************************************************************************
			 * First Subject and its marks
			 **************************************************************************/
			ResultSet Subject1;
			try {

				Subject1 = generateCellValue("SELECT subject_name from student_subjects where id=1");
				if (Subject1.next()) {
					subject1 = Subject1.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum1 = new PdfPCell(
					new Paragraph("1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub1 = new PdfPCell(new Paragraph("" + subject1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum1);
			tableO.addCell(cellSub1);

			ResultSet MoT1;
			try {

				MoT1 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject1 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject1
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT1.next()) {
					mot1 = MoT1.getString(1);
					rank1 = MoT1.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT1;
			try {

				EoT1 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject1 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject1
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT1.next()) {
					eot1 = EoT1.getString(1);
					rankeot1 = EoT1.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered1;
			try {

				Subjectoffered1 = generateCellValue("select `" + subject1
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered1.next()) {

					yes1 = Subjectoffered1.getInt(1);

				} else {
					yes1 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes1 == 1) {

				/***********************************************
				 * Student Does offer Paper 1---the only supported paper so far
				 ************************************************/
				if (!(eot1 == null) && !(eot1.equals("-")) && !(eot1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot1 == null) && !(mot1.equals("-")) && !(mot1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot1 = Double.parseDouble(mot1);
						inteot1 = Double.parseDouble(eot1);
						subject1Avg = (intmot1 + inteot1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot1 = "-";
						inteot1 = Double.parseDouble(eot1);
						subject1Avg = (inteot1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot1 = "-";

					if (!(mot1 == null) && !(mot1.equals("-")) && !(mot1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot1 = Double.parseDouble(mot1);
						subject1Avg = (intmot1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot1 = "-";
						subject1Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot1 = "";
				eot1 = "";
				subject1Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot1p = new Paragraph(mot1, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot1p = new Paragraph(eot1, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank1p = new Paragraph(rank1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot1p = new Paragraph(rankeot1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot1 = new PdfPCell(mot1p);
			PdfPCell cellrank1 = new PdfPCell(rank1p);
			PdfPCell celleot1 = new PdfPCell(eot1p);
			PdfPCell cellrankeot1 = new PdfPCell(rankeot1p);

			tableO.addCell(cellmot1);
			tableO.addCell(cellrank1);

			tableO.addCell(celleot1);
			tableO.addCell(cellrankeot1);

			if (subject1Avg == -1) {
				cell1Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell1Avg = new PdfPCell(new Paragraph("" + subject1Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot1p = new Paragraph(mot1, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot1p = new Paragraph(eot1, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell1Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject1Avg >= 0) {

				if (mot1.equals("-")) {
					SQL1 = "select DISTINCT (CASE WHEN " + subject1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL1 = "select DISTINCT (CASE WHEN " + subject1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade1;
				try {

					Grade1 = generateCellValue(SQL1);
					if (Grade1.next()) {
						grade1 = Grade1.getString(1);

						if (subject1Avg < 0 || cell1Avg == null || cell1Avg.equals("")) {
							grade1 = "";
						} else {
							grade1 = grade1;
						}

						paraGrade1 = new Paragraph(grade1,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade1 = new PdfPCell(new Paragraph("" + grade1,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade1 = "";
						paraGrade1 = new Paragraph(grade1,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade1 = new PdfPCell(new Paragraph("" + grade1,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject1Avg = -1;

				valueGrade1 = "";

				paraGrade1 = new Paragraph(valueGrade1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade1 = new PdfPCell(new Paragraph("" + grade1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject1Avg > 0 && subject1Avg < 50) {
				comment1 = "Poor";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment1 = new PdfPCell(comment1p);
			} else if (subject1Avg > 49 && subject1Avg < 60) {
				comment1 = "Fair";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment1 = new PdfPCell(comment1p);
			} else if (subject1Avg > 59 && subject1Avg < 70) {
				comment1 = "Good";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment1 = new PdfPCell(comment1p);
			} else if (subject1Avg > 69 && subject1Avg < 80) {
				comment1 = "V. Good";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment1 = new PdfPCell(comment1p);
			} else if (subject1Avg > 79 && subject1Avg < 101) {
				comment1 = "Excellent";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment1 = new PdfPCell(comment1p);
			} else {
				comment1 = "";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment1 = new PdfPCell(comment1p);
			}

			tableO.addCell(paraGrade1);
			tableO.addCell(cellcomment1);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject1, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Second Subject and its marks
			 **************************************************************************/

			ResultSet Subject2;
			try {

				Subject2 = generateCellValue("SELECT subject_name from student_subjects where id=2");
				if (Subject2.next()) {
					subject2 = Subject2.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum2 = new PdfPCell(
					new Paragraph("2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub2 = new PdfPCell(new Paragraph("" + subject2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum2);
			tableO.addCell(cellSub2);

			ResultSet MoT2;
			try {

				MoT2 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject2 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject2
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT2.next()) {
					mot2 = MoT2.getString(1);
					rank2 = MoT2.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT2;
			try {

				EoT2 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject2 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject2
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT2.next()) {
					eot2 = EoT2.getString(1);
					rankeot2 = EoT2.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered2;
			try {

				Subjectoffered2 = generateCellValue("select `" + subject2
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered2.next()) {

					yes2 = Subjectoffered2.getInt(1);

				} else {
					yes2 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes2 == 1) {

				/***********************************************
				 * Student Does offer Paper 2---the only supported paper so far
				 ************************************************/
				if (!(eot2 == null) && !(eot2.equals("-")) && !(eot2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot2 == null) && !(mot2.equals("-")) && !(mot2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot2 = Double.parseDouble(mot2);
						inteot2 = Double.parseDouble(eot2);
						subject2Avg = (intmot2 + inteot2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot2 = "-";
						inteot2 = Double.parseDouble(eot2);
						subject2Avg = (inteot2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot2 = "-";

					if (!(mot2 == null) && !(mot2.equals("-")) && !(mot2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot2 = Double.parseDouble(mot2);
						subject2Avg = (intmot2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot2 = "-";
						subject2Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot2 = "";
				eot2 = "";
				subject2Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot2p = new Paragraph(mot2, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot2p = new Paragraph(eot2, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank2p = new Paragraph(rank2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot2p = new Paragraph(rankeot2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot2 = new PdfPCell(mot2p);
			PdfPCell cellrank2 = new PdfPCell(rank2p);
			PdfPCell celleot2 = new PdfPCell(eot2p);
			PdfPCell cellrankeot2 = new PdfPCell(rankeot2p);

			tableO.addCell(cellmot2);
			tableO.addCell(cellrank2);

			tableO.addCell(celleot2);
			tableO.addCell(cellrankeot2);

			if (subject2Avg == -1) {
				cell2Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell2Avg = new PdfPCell(new Paragraph("" + subject2Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot2p = new Paragraph(mot2, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot2p = new Paragraph(eot2, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell2Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject2Avg >= 0) {

				if (mot2.equals("-")) {
					SQL2 = "select DISTINCT (CASE WHEN " + subject2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL2 = "select DISTINCT (CASE WHEN " + subject2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				try {

					Grade2 = generateCellValue(SQL2);
					if (Grade2.next()) {
						grade2 = Grade2.getString(1);

						paraGrade2 = new Paragraph(grade2,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade2 = new PdfPCell(new Paragraph("" + grade2,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade2 = "";
						paraGrade2 = new Paragraph(grade2,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade2 = new PdfPCell(new Paragraph("" + grade2,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject2Avg = -1;

				valueGrade2 = "";

				paraGrade2 = new Paragraph(valueGrade2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade2 = new PdfPCell(new Paragraph("" + grade2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

				System.out.println("Value of grade:" + grade2);
			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject2Avg > 0 && subject2Avg < 50) {
				comment2 = "Poor";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment2 = new PdfPCell(comment2p);
			} else if (subject2Avg > 49 && subject2Avg < 60) {
				comment2 = "Fair";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment2 = new PdfPCell(comment2p);
			} else if (subject2Avg > 59 && subject2Avg < 70) {
				comment2 = "Good";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment2 = new PdfPCell(comment2p);
			} else if (subject2Avg > 69 && subject2Avg < 80) {
				comment2 = "V. Good";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment2 = new PdfPCell(comment2p);
			} else if (subject2Avg > 79 && subject2Avg < 101) {
				comment2 = "Excellent";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment2 = new PdfPCell(comment2p);
			} else {
				comment2 = "";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment2 = new PdfPCell(comment2p);
			}

			System.out.println("Value Is:" + cellGrade2);
			// if(cellGrade2==null) {
			// cellGrade2="";
			// }
			tableO.addCell(paraGrade2);
			tableO.addCell(cellcomment2);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject2, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Third Subject and its marks
			 **************************************************************************/

			ResultSet Subject3;
			try {

				Subject3 = generateCellValue("SELECT subject_name from student_subjects where id=3");
				if (Subject3.next()) {
					subject3 = Subject3.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum3 = new PdfPCell(
					new Paragraph("3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub3 = new PdfPCell(new Paragraph("" + subject3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum3);
			tableO.addCell(cellSub3);

			ResultSet MoT3;
			try {

				MoT3 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject3 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject3
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT3.next()) {
					mot3 = MoT3.getString(1);
					rank3 = MoT3.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT3;
			try {

				EoT3 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject3 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject3
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT3.next()) {
					eot3 = EoT3.getString(1);
					rankeot3 = EoT3.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered3;
			try {

				Subjectoffered3 = generateCellValue("select `" + subject3
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered3.next()) {

					yes3 = Subjectoffered3.getInt(1);

				} else {
					yes3 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes3 == 1) {

				/***********************************************
				 * Student Does offer Paper 3---the only supported paper so far
				 ************************************************/
				if (!(eot3 == null) && !(eot3.equals("-")) && !(eot3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot3 == null) && !(mot3.equals("-")) && !(mot3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot3 = Double.parseDouble(mot3);
						inteot3 = Double.parseDouble(eot3);
						subject3Avg = (intmot3 + inteot3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot3 = "-";
						inteot3 = Double.parseDouble(eot3);
						subject3Avg = (inteot3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot3 = "-";

					if (!(mot3 == null) && !(mot3.equals("-")) && !(mot3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot3 = Double.parseDouble(mot3);
						subject3Avg = (intmot3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot3 = "-";
						subject3Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot3 = "";
				eot3 = "";
				subject3Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot3p = new Paragraph(mot3, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot3p = new Paragraph(eot3, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank3p = new Paragraph(rank3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot3p = new Paragraph(rankeot3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot3 = new PdfPCell(mot3p);
			PdfPCell cellrank3 = new PdfPCell(rank3p);
			PdfPCell celleot3 = new PdfPCell(eot3p);
			PdfPCell cellrankeot3 = new PdfPCell(rankeot3p);

			tableO.addCell(cellmot3);
			tableO.addCell(cellrank3);

			tableO.addCell(celleot3);
			tableO.addCell(cellrankeot3);

			if (subject3Avg == -1) {
				cell3Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell3Avg = new PdfPCell(new Paragraph("" + subject3Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot3p = new Paragraph(mot3, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot3p = new Paragraph(eot3, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell3Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject3Avg >= 0) {

				if (mot3.equals("-")) {
					SQL3 = "select DISTINCT (CASE WHEN " + subject3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL3 = "select DISTINCT (CASE WHEN " + subject3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade3;
				try {

					Grade3 = generateCellValue(SQL3);
					if (Grade3.next()) {
						grade3 = Grade3.getString(1);

						if (subject3Avg < 0 || cell3Avg == null || cell3Avg.equals("")) {
							grade3 = "";
						} else {
							grade3 = grade3;
						}

						paraGrade3 = new Paragraph(grade3,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade3 = new PdfPCell(new Paragraph("" + grade3,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade3 = "";
						paraGrade3 = new Paragraph(grade3,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade3 = new PdfPCell(new Paragraph("" + grade3,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject3Avg = -1;

				valueGrade3 = "";

				paraGrade3 = new Paragraph(valueGrade3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade3 = new PdfPCell(new Paragraph("" + grade3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject3Avg > 0 && subject3Avg < 50) {
				comment3 = "Poor";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment3 = new PdfPCell(comment3p);
			} else if (subject3Avg > 49 && subject3Avg < 60) {
				comment3 = "Fair";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment3 = new PdfPCell(comment3p);
			} else if (subject3Avg > 59 && subject3Avg < 70) {
				comment3 = "Good";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment3 = new PdfPCell(comment3p);
			} else if (subject3Avg > 69 && subject3Avg < 80) {
				comment3 = "V. Good";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment3 = new PdfPCell(comment3p);
			} else if (subject3Avg > 79 && subject3Avg < 101) {
				comment3 = "Excellent";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment3 = new PdfPCell(comment3p);
			} else {
				comment3 = "";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment3 = new PdfPCell(comment3p);
			}

			if (subject3Avg < 0 || cell3Avg == null || cell3Avg.equals("")) {
				grade3 = "";
			} else {
				grade3 = grade3;
			}

			tableO.addCell(paraGrade3);
			tableO.addCell(cellcomment3);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject3, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Forth Subject and its marks
			 **************************************************************************/

			ResultSet Subject4;
			try {

				Subject4 = generateCellValue("SELECT subject_name from student_subjects where id=4");
				if (Subject4.next()) {
					subject4 = Subject4.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum4 = new PdfPCell(
					new Paragraph("4", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub4 = new PdfPCell(new Paragraph("" + subject4,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum4);
			tableO.addCell(cellSub4);

			ResultSet MoT4;
			try {

				MoT4 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject4 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject4
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT4.next()) {
					mot4 = MoT4.getString(1);
					rank4 = MoT4.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT4;
			try {

				EoT4 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject4 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject4
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT4.next()) {
					eot4 = EoT4.getString(1);
					rankeot4 = EoT4.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered4;
			try {

				Subjectoffered4 = generateCellValue("select `" + subject4
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered4.next()) {

					yes4 = Subjectoffered4.getInt(1);

				} else {
					yes4 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes4 == 1) {

				/***********************************************
				 * Student Does offer Paper 4---the only supported paper so far
				 ************************************************/
				if (!(eot4 == null) && !(eot4.equals("-")) && !(eot4.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot4 == null) && !(mot4.equals("-")) && !(mot4.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot4 = Double.parseDouble(mot4);
						inteot4 = Double.parseDouble(eot4);
						subject4Avg = (intmot4 + inteot4) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot4 = "-";
						inteot4 = Double.parseDouble(eot4);
						subject4Avg = (inteot4) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot4 = "-";

					if (!(mot4 == null) && !(mot4.equals("-")) && !(mot4.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot4 = Double.parseDouble(mot4);
						subject4Avg = (intmot4) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot4 = "-";
						subject4Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot4 = "";
				eot4 = "";
				subject4Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot4p = new Paragraph(mot4, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot4p = new Paragraph(eot4, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank4p = new Paragraph(rank4,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot4p = new Paragraph(rankeot4,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot4 = new PdfPCell(mot4p);
			PdfPCell cellrank4 = new PdfPCell(rank4p);
			PdfPCell celleot4 = new PdfPCell(eot4p);
			PdfPCell cellrankeot4 = new PdfPCell(rankeot4p);

			tableO.addCell(cellmot4);
			tableO.addCell(cellrank4);

			tableO.addCell(celleot4);
			tableO.addCell(cellrankeot4);

			if (subject4Avg == -1) {
				cell4Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell4Avg = new PdfPCell(new Paragraph("" + subject4Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot4p = new Paragraph(mot4, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot4p = new Paragraph(eot4, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell4Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject4Avg >= 0) {

				if (mot4.equals("-")) {
					SQL4 = "select DISTINCT (CASE WHEN " + subject4Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL4 = "select DISTINCT (CASE WHEN " + subject4Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade4;
				try {

					Grade4 = generateCellValue(SQL4);
					if (Grade4.next()) {
						grade4 = Grade4.getString(1);

						if (subject4Avg < 0 || cell4Avg == null || cell4Avg.equals("")) {
							grade4 = "";
						} else {
							grade4 = grade4;
						}

						paraGrade4 = new Paragraph(grade4,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade4 = new PdfPCell(new Paragraph("" + grade4,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade4 = "";
						paraGrade4 = new Paragraph(grade4,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade4 = new PdfPCell(new Paragraph("" + grade4,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject4Avg = -1;
				valueGrade4 = "";

				paraGrade4 = new Paragraph(valueGrade4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade4 = new PdfPCell(new Paragraph("" + grade4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject4Avg > 0 && subject4Avg < 50) {
				comment4 = "Poor";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment4 = new PdfPCell(comment4p);
			} else if (subject4Avg > 49 && subject4Avg < 60) {
				comment4 = "Fair";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment4 = new PdfPCell(comment4p);
			} else if (subject4Avg > 59 && subject4Avg < 70) {
				comment4 = "Good";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment4 = new PdfPCell(comment4p);
			} else if (subject4Avg > 69 && subject4Avg < 80) {
				comment4 = "V. Good";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment4 = new PdfPCell(comment4p);
			} else if (subject4Avg > 79 && subject4Avg < 101) {
				comment4 = "Excellent";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment4 = new PdfPCell(comment4p);
			} else {
				comment4 = "";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment4 = new PdfPCell(comment4p);
			}

			tableO.addCell(paraGrade4);
			tableO.addCell(cellcomment4);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject4, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Fifth Subject and its marks
			 **************************************************************************/

			ResultSet Subject5;
			try {

				Subject5 = generateCellValue("SELECT subject_name from student_subjects where id=5");
				if (Subject5.next()) {
					subject5 = Subject5.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum5 = new PdfPCell(
					new Paragraph("5", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub5 = new PdfPCell(new Paragraph("" + subject5,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum5);
			tableO.addCell(cellSub5);

			ResultSet MoT5;
			try {

				MoT5 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject5 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject5
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT5.next()) {
					mot5 = MoT5.getString(1);
					rank5 = MoT5.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT5;
			try {

				EoT5 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject5 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject5
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT5.next()) {
					eot5 = EoT5.getString(1);
					rankeot5 = EoT5.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered5;
			try {

				Subjectoffered5 = generateCellValue("select `" + subject5
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered5.next()) {

					yes5 = Subjectoffered5.getInt(1);

				} else {
					yes5 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes5 == 1) {

				/***********************************************
				 * Student Does offer Paper 5---the only supported paper so far
				 ************************************************/
				if (!(eot5 == null) && !(eot5.equals("-")) && !(eot5.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot5 == null) && !(mot5.equals("-")) && !(mot5.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot5 = Double.parseDouble(mot5);
						inteot5 = Double.parseDouble(eot5);
						subject5Avg = (intmot5 + inteot5) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot5 = "-";
						inteot5 = Double.parseDouble(eot5);
						subject5Avg = (inteot5) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot5 = "-";

					if (!(mot5 == null) && !(mot5.equals("-")) && !(mot5.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot5 = Double.parseDouble(mot5);
						subject5Avg = (intmot5) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot5 = "-";
						subject5Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot5 = "";
				eot5 = "";
				subject5Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot5p = new Paragraph(mot5, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot5p = new Paragraph(eot5, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank5p = new Paragraph(rank5,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot5p = new Paragraph(rankeot5,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot5 = new PdfPCell(mot5p);
			PdfPCell cellrank5 = new PdfPCell(rank5p);
			PdfPCell celleot5 = new PdfPCell(eot5p);
			PdfPCell cellrankeot5 = new PdfPCell(rankeot5p);

			tableO.addCell(cellmot5);
			tableO.addCell(cellrank5);

			tableO.addCell(celleot5);
			tableO.addCell(cellrankeot5);

			if (subject5Avg == -1) {
				cell5Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell5Avg = new PdfPCell(new Paragraph("" + subject5Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot5p = new Paragraph(mot5, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot5p = new Paragraph(eot5, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell5Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject5Avg >= 0) {

				if (mot5.equals("-")) {
					SQL5 = "select DISTINCT (CASE WHEN " + subject5Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL5 = "select DISTINCT (CASE WHEN " + subject5Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade5;
				try {

					Grade5 = generateCellValue(SQL5);
					if (Grade5.next()) {
						grade5 = Grade5.getString(1);

						if (subject5Avg < 0 || cell5Avg == null || cell5Avg.equals("")) {
							grade5 = "";
						} else {
							grade5 = grade5;
						}

						paraGrade5 = new Paragraph(grade5,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade5 = new PdfPCell(new Paragraph("" + grade5,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade5 = "";
						paraGrade5 = new Paragraph(grade5,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade5 = new PdfPCell(new Paragraph("" + grade5,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject5Avg = -1;
				valueGrade5 = "";

				paraGrade5 = new Paragraph(valueGrade5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade5 = new PdfPCell(new Paragraph("" + grade5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject5Avg > 0 && subject5Avg < 50) {
				comment5 = "Poor";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment5 = new PdfPCell(comment5p);
			} else if (subject5Avg > 49 && subject5Avg < 60) {
				comment5 = "Fair";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment5 = new PdfPCell(comment5p);
			} else if (subject5Avg > 59 && subject5Avg < 70) {
				comment5 = "Good";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment5 = new PdfPCell(comment5p);
			} else if (subject5Avg > 69 && subject5Avg < 80) {
				comment5 = "V. Good";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment5 = new PdfPCell(comment5p);
			} else if (subject5Avg > 79 && subject5Avg < 101) {
				comment5 = "Excellent";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment5 = new PdfPCell(comment5p);
			} else {
				comment5 = "";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment5 = new PdfPCell(comment5p);
			}

			tableO.addCell(paraGrade5);
			tableO.addCell(cellcomment5);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject5, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Sixth Subject and its marks
			 **************************************************************************/

			ResultSet Subject6;
			try {

				Subject6 = generateCellValue("SELECT subject_name from student_subjects where id=6");
				if (Subject6.next()) {
					subject6 = Subject6.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum6 = new PdfPCell(
					new Paragraph("6", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub6 = new PdfPCell(new Paragraph("" + subject6,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum6);
			tableO.addCell(cellSub6);

			ResultSet MoT6;
			try {

				MoT6 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject6 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject6
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT6.next()) {
					mot6 = MoT6.getString(1);
					rank6 = MoT6.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT6;
			try {

				EoT6 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject6 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject6
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT6.next()) {
					eot6 = EoT6.getString(1);
					rankeot6 = EoT6.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered6;
			try {

				Subjectoffered6 = generateCellValue("select `" + subject6
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered6.next()) {

					yes6 = Subjectoffered6.getInt(1);

				} else {
					yes6 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes6 == 1) {

				/***********************************************
				 * Student Does offer Paper 6---the only supported paper so far
				 ************************************************/
				if (!(eot6 == null) && !(eot6.equals("-")) && !(eot6.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot6 == null) && !(mot6.equals("-")) && !(mot6.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot6 = Double.parseDouble(mot6);
						inteot6 = Double.parseDouble(eot6);
						subject6Avg = (intmot6 + inteot6) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot6 = "-";
						inteot6 = Double.parseDouble(eot6);
						subject6Avg = (inteot6) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot6 = "-";

					if (!(mot6 == null) && !(mot6.equals("-")) && !(mot6.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot6 = Double.parseDouble(mot6);
						subject6Avg = (intmot6) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot6 = "-";
						subject6Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot6 = "";
				eot6 = "";
				subject6Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot6p = new Paragraph(mot6, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot6p = new Paragraph(eot6, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank6p = new Paragraph(rank6,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot6p = new Paragraph(rankeot6,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot6 = new PdfPCell(mot6p);
			PdfPCell cellrank6 = new PdfPCell(rank6p);
			PdfPCell celleot6 = new PdfPCell(eot6p);
			PdfPCell cellrankeot6 = new PdfPCell(rankeot6p);

			tableO.addCell(cellmot6);
			tableO.addCell(cellrank6);

			tableO.addCell(celleot6);
			tableO.addCell(cellrankeot6);

			if (subject6Avg == -1) {
				cell6Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell6Avg = new PdfPCell(new Paragraph("" + subject6Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot6p = new Paragraph(mot6, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot6p = new Paragraph(eot6, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell6Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject6Avg >= 0) {

				if (mot6.equals("-")) {
					SQL6 = "select DISTINCT (CASE WHEN " + subject6Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL6 = "select DISTINCT (CASE WHEN " + subject6Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade6;
				try {

					Grade6 = generateCellValue(SQL6);
					if (Grade6.next()) {
						grade6 = Grade6.getString(1);

						if (subject6Avg < 0 || cell6Avg == null || cell6Avg.equals("")) {
							grade6 = "";
						} else {
							grade6 = grade6;
						}

						paraGrade6 = new Paragraph(grade6,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade6 = new PdfPCell(new Paragraph("" + grade6,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade6 = "";
						paraGrade6 = new Paragraph(grade6,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade6 = new PdfPCell(new Paragraph("" + grade6,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject6Avg = -1;

				valueGrade6 = "";

				paraGrade6 = new Paragraph(valueGrade6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade6 = new PdfPCell(new Paragraph("" + grade6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject6Avg > 0 && subject6Avg < 50) {
				comment6 = "Poor";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment6 = new PdfPCell(comment6p);
			} else if (subject6Avg > 49 && subject6Avg < 60) {
				comment6 = "Fair";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment6 = new PdfPCell(comment6p);
			} else if (subject6Avg > 59 && subject6Avg < 70) {
				comment6 = "Good";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment6 = new PdfPCell(comment6p);
			} else if (subject6Avg > 69 && subject6Avg < 80) {
				comment6 = "V. Good";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment6 = new PdfPCell(comment6p);
			} else if (subject6Avg > 79 && subject6Avg < 101) {
				comment6 = "Excellent";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment6 = new PdfPCell(comment6p);
			} else {
				comment6 = "";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment6 = new PdfPCell(comment6p);
			}

			tableO.addCell(paraGrade6);
			tableO.addCell(cellcomment6);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject6, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Seventh Subject and its marks
			 **************************************************************************/

			ResultSet Subject7;
			try {

				Subject7 = generateCellValue("SELECT subject_name from student_subjects where id=7");
				if (Subject7.next()) {
					subject7 = Subject7.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum7 = new PdfPCell(
					new Paragraph("7", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub7 = new PdfPCell(new Paragraph("" + subject7,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum7);
			tableO.addCell(cellSub7);

			ResultSet MoT7;
			try {

				MoT7 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject7 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject7
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT7.next()) {
					mot7 = MoT7.getString(1);
					rank7 = MoT7.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT7;
			try {

				EoT7 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject7 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject7
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT7.next()) {
					eot7 = EoT7.getString(1);
					rankeot7 = EoT7.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered7;
			try {

				Subjectoffered7 = generateCellValue("select `" + subject7
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered7.next()) {

					yes7 = Subjectoffered7.getInt(1);

				} else {
					yes7 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes7 == 1) {

				/***********************************************
				 * Student Does offer Paper 7---the only supported paper so far
				 ************************************************/
				if (!(eot7 == null) && !(eot7.equals("-")) && !(eot7.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot7 == null) && !(mot7.equals("-")) && !(mot7.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot7 = Double.parseDouble(mot7);
						inteot7 = Double.parseDouble(eot7);
						subject7Avg = (intmot7 + inteot7) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot7 = "-";
						inteot7 = Double.parseDouble(eot7);
						subject7Avg = (inteot7) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot7 = "-";

					if (!(mot7 == null) && !(mot7.equals("-")) && !(mot7.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot7 = Double.parseDouble(mot7);
						subject7Avg = (intmot7) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot7 = "-";
						subject7Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot7 = "";
				eot7 = "";
				subject7Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot7p = new Paragraph(mot7, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot7p = new Paragraph(eot7, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank7p = new Paragraph(rank7,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot7p = new Paragraph(rankeot7,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot7 = new PdfPCell(mot7p);
			PdfPCell cellrank7 = new PdfPCell(rank7p);
			PdfPCell celleot7 = new PdfPCell(eot7p);
			PdfPCell cellrankeot7 = new PdfPCell(rankeot7p);

			tableO.addCell(cellmot7);
			tableO.addCell(cellrank7);

			tableO.addCell(celleot7);
			tableO.addCell(cellrankeot7);

			if (subject7Avg == -1) {
				cell7Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell7Avg = new PdfPCell(new Paragraph("" + subject7Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot7p = new Paragraph(mot7, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot7p = new Paragraph(eot7, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell7Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject7Avg >= 0) {

				if (mot7.equals("-")) {
					SQL7 = "select DISTINCT (CASE WHEN " + subject7Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL7 = "select DISTINCT (CASE WHEN " + subject7Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade7;
				try {

					Grade7 = generateCellValue(SQL7);
					if (Grade7.next()) {
						grade7 = Grade7.getString(1);

						if (subject7Avg < 0 || cell7Avg == null || cell7Avg.equals("")) {
							grade7 = "";
						} else {
							grade7 = grade7;
						}

						paraGrade7 = new Paragraph(grade7,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade7 = new PdfPCell(new Paragraph("" + grade7,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade7 = "";
						paraGrade7 = new Paragraph(grade7,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade7 = new PdfPCell(new Paragraph("" + grade7,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject7Avg = -1;
				valueGrade7 = "";
				paraGrade7 = new Paragraph(valueGrade7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade7 = new PdfPCell(new Paragraph("" + grade7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject7Avg > 0 && subject7Avg < 50) {
				comment7 = "Poor";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment7 = new PdfPCell(comment7p);
			} else if (subject7Avg > 49 && subject7Avg < 60) {
				comment7 = "Fair";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment7 = new PdfPCell(comment7p);
			} else if (subject7Avg > 59 && subject7Avg < 70) {
				comment7 = "Good";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment7 = new PdfPCell(comment7p);
			} else if (subject7Avg > 69 && subject7Avg < 80) {
				comment7 = "V. Good";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment7 = new PdfPCell(comment7p);
			} else if (subject7Avg > 79 && subject7Avg < 101) {
				comment7 = "Excellent";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment7 = new PdfPCell(comment7p);
			} else {
				comment7 = "";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment7 = new PdfPCell(comment7p);
			}

			tableO.addCell(paraGrade7);
			tableO.addCell(cellcomment7);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject7, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Eighth Subject and its marks
			 **************************************************************************/

			ResultSet Subject8;
			try {

				Subject8 = generateCellValue("SELECT subject_name from student_subjects where id=8");
				if (Subject8.next()) {
					subject8 = Subject8.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum8 = new PdfPCell(
					new Paragraph("8", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub8 = new PdfPCell(new Paragraph("" + subject8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum8);
			tableO.addCell(cellSub8);

			ResultSet MoT8;
			try {

				MoT8 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject8 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject8
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT8.next()) {
					mot8 = MoT8.getString(1);
					rank8 = MoT8.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT8;
			try {

				EoT8 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject8 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject8
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT8.next()) {
					eot8 = EoT8.getString(1);
					rankeot8 = EoT8.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered8;
			try {

				Subjectoffered8 = generateCellValue("select `" + subject8
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered8.next()) {

					yes8 = Subjectoffered8.getInt(1);

				} else {
					yes8 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes8 == 1) {

				/***********************************************
				 * Student Does offer Paper 8---the only supported paper so far
				 ************************************************/
				if (!(eot8 == null) && !(eot8.equals("-")) && !(eot8.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8 == null) && !(mot8.equals("-")) && !(mot8.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8 = Double.parseDouble(mot8);
						inteot8 = Double.parseDouble(eot8);
						subject8Avg = (intmot8 + inteot8) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8 = "-";
						inteot8 = Double.parseDouble(eot8);
						subject8Avg = (inteot8) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8 = "-";

					if (!(mot8 == null) && !(mot8.equals("-")) && !(mot8.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8 = Double.parseDouble(mot8);
						subject8Avg = (intmot8) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8 = "-";
						subject8Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot8 = "";
				eot8 = "";
				subject8Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot8p = new Paragraph(mot8, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot8p = new Paragraph(eot8, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank8p = new Paragraph(rank8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot8p = new Paragraph(rankeot8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot8 = new PdfPCell(mot8p);
			PdfPCell cellrank8 = new PdfPCell(rank8p);
			PdfPCell celleot8 = new PdfPCell(eot8p);
			PdfPCell cellrankeot8 = new PdfPCell(rankeot8p);

			tableO.addCell(cellmot8);
			tableO.addCell(cellrank8);

			tableO.addCell(celleot8);
			tableO.addCell(cellrankeot8);

			if (subject8Avg == -1) {
				cell8Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell8Avg = new PdfPCell(new Paragraph("" + subject8Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot8p = new Paragraph(mot8, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot8p = new Paragraph(eot8, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell8Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject8Avg >= 0) {

				if (mot8.equals("-")) {
					SQL8 = "select DISTINCT (CASE WHEN " + subject8Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject8
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject8 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject8Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject8 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL8 = "select DISTINCT (CASE WHEN " + subject8Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject8
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject8 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject8Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject8 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade8;
				try {

					Grade8 = generateCellValue(SQL8);
					if (Grade8.next()) {
						grade8 = Grade8.getString(1);

						if (subject8Avg < 0 || cell8Avg == null || cell8Avg.equals("")) {
							grade8 = "";
						} else {
							grade8 = grade8;
						}

						paraGrade8 = new Paragraph(grade8,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade8 = new PdfPCell(new Paragraph("" + grade8,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade8 = "";
						paraGrade8 = new Paragraph(grade8,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade8 = new PdfPCell(new Paragraph("" + grade8,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject8Avg = -1;

				valueGrade8 = "";

				paraGrade8 = new Paragraph(valueGrade8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade8 = new PdfPCell(new Paragraph("" + grade8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject8Avg > 0 && subject8Avg < 50) {
				comment8 = "Poor";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment8 = new PdfPCell(comment8p);
			} else if (subject8Avg > 49 && subject8Avg < 60) {
				comment8 = "Fair";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment8 = new PdfPCell(comment8p);
			} else if (subject8Avg > 59 && subject8Avg < 70) {
				comment8 = "Good";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment8 = new PdfPCell(comment8p);
			} else if (subject8Avg > 69 && subject8Avg < 80) {
				comment8 = "V. Good";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment8 = new PdfPCell(comment8p);
			} else if (subject8Avg > 79 && subject8Avg < 101) {
				comment8 = "Excellent";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment8 = new PdfPCell(comment8p);
			} else {
				comment8 = "";
				comment8p = new Paragraph(comment8,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment8 = new PdfPCell(comment8p);
			}

			tableO.addCell(paraGrade8);
			tableO.addCell(cellcomment8);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject8, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Nineth Subject and its marks
			 **************************************************************************/

			ResultSet Subject9;
			try {

				Subject9 = generateCellValue("SELECT subject_name from student_subjects where id=9");
				if (Subject9.next()) {
					subject9 = Subject9.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum9 = new PdfPCell(
					new Paragraph("9", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub9 = new PdfPCell(new Paragraph("" + subject9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum9);
			tableO.addCell(cellSub9);

			ResultSet MoT9;
			try {

				MoT9 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject9 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject9
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT9.next()) {
					mot9 = MoT9.getString(1);
					rank9 = MoT9.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT9;
			try {

				EoT9 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject9 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject9
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT9.next()) {
					eot9 = EoT9.getString(1);
					rankeot9 = EoT9.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered9;
			try {

				Subjectoffered9 = generateCellValue("select `" + subject9
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered9.next()) {

					yes9 = Subjectoffered9.getInt(1);

				} else {
					yes9 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes9 == 1) {

				/***********************************************
				 * Student Does offer Paper 9---the only supported paper so far
				 ************************************************/
				if (!(eot9 == null) && !(eot9.equals("-")) && !(eot9.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9 == null) && !(mot9.equals("-")) && !(mot9.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9 = Double.parseDouble(mot9);
						inteot9 = Double.parseDouble(eot9);
						subject9Avg = (intmot9 + inteot9) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9 = "-";
						inteot9 = Double.parseDouble(eot9);
						subject9Avg = (inteot9) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9 = "-";

					if (!(mot9 == null) && !(mot9.equals("-")) && !(mot9.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9 = Double.parseDouble(mot9);
						subject9Avg = (intmot9) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9 = "-";
						subject9Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot9 = "";
				eot9 = "";
				subject9Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot9p = new Paragraph(mot9, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot9p = new Paragraph(eot9, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank9p = new Paragraph(rank9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot9p = new Paragraph(rankeot9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot9 = new PdfPCell(mot9p);
			PdfPCell cellrank9 = new PdfPCell(rank9p);
			PdfPCell celleot9 = new PdfPCell(eot9p);
			PdfPCell cellrankeot9 = new PdfPCell(rankeot9p);

			tableO.addCell(cellmot9);
			tableO.addCell(cellrank9);

			tableO.addCell(celleot9);
			tableO.addCell(cellrankeot9);

			if (subject9Avg == -1) {
				cell9Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell9Avg = new PdfPCell(new Paragraph("" + subject9Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot9p = new Paragraph(mot9, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot9p = new Paragraph(eot9, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell9Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject9Avg >= 0) {

				if (mot9.equals("-")) {
					SQL9 = "select DISTINCT (CASE WHEN " + subject9Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject9
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject9 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject9Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject9 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL9 = "select DISTINCT (CASE WHEN " + subject9Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject9
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject9 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject9Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject9 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade9;
				try {

					Grade9 = generateCellValue(SQL9);
					if (Grade9.next()) {
						grade9 = Grade9.getString(1);

						if (subject9Avg < 0 || cell9Avg == null || cell9Avg.equals("")) {
							grade9 = "";
						} else {
							grade9 = grade9;
						}
						paraGrade9 = new Paragraph(grade9,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade9 = new PdfPCell(new Paragraph("" + grade9,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade9 = "";
						paraGrade9 = new Paragraph(grade9,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade9 = new PdfPCell(new Paragraph("" + grade9,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject9Avg = -1;

				valueGrade9 = "";

				paraGrade9 = new Paragraph(valueGrade9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade9 = new PdfPCell(new Paragraph("" + grade9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject9Avg > 0 && subject9Avg < 50) {
				comment9 = "Poor";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment9 = new PdfPCell(comment9p);
			} else if (subject9Avg > 49 && subject9Avg < 60) {
				comment9 = "Fair";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment9 = new PdfPCell(comment9p);
			} else if (subject9Avg > 59 && subject9Avg < 70) {
				comment9 = "Good";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment9 = new PdfPCell(comment9p);
			} else if (subject9Avg > 69 && subject9Avg < 80) {
				comment9 = "V. Good";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment9 = new PdfPCell(comment9p);
			} else if (subject9Avg > 79 && subject9Avg < 101) {
				comment9 = "Excellent";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment9 = new PdfPCell(comment9p);
			} else {
				comment9 = "";
				comment9p = new Paragraph(comment9,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment9 = new PdfPCell(comment9p);
			}

			tableO.addCell(paraGrade9);
			tableO.addCell(cellcomment9);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject9, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Tenth Subject and its marks
			 **************************************************************************/

			ResultSet Subject10;
			try {

				Subject10 = generateCellValue("SELECT subject_name from student_subjects where id=10");
				if (Subject10.next()) {
					subject10 = Subject10.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum10 = new PdfPCell(
					new Paragraph("10", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub10 = new PdfPCell(new Paragraph("" + subject10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum10);
			tableO.addCell(cellSub10);

			ResultSet MoT10;
			try {

				MoT10 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject10 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject10
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT10.next()) {
					mot10 = MoT10.getString(1);
					rank10 = MoT10.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT10;
			try {

				EoT10 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject10 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject10
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT10.next()) {
					eot10 = EoT10.getString(1);
					rankeot10 = EoT10.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered10;
			try {

				Subjectoffered10 = generateCellValue("select `" + subject10
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered10.next()) {

					yes10 = Subjectoffered10.getInt(1);

				} else {
					yes10 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes10 == 1) {

				/***********************************************
				 * Student Does offer Paper 10---the only supported paper so far
				 ************************************************/
				if (!(eot10 == null) && !(eot10.equals("-")) && !(eot10.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10 == null) && !(mot10.equals("-")) && !(mot10.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10 = Double.parseDouble(mot10);
						inteot10 = Double.parseDouble(eot10);
						subject10Avg = (intmot10 + inteot10) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10 = "-";
						inteot10 = Double.parseDouble(eot10);
						subject10Avg = (inteot10) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10 = "-";

					if (!(mot10 == null) && !(mot10.equals("-")) && !(mot10.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10 = Double.parseDouble(mot10);
						subject10Avg = (intmot10) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10 = "-";
						subject10Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot10 = "";
				eot10 = "";
				subject10Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot10p = new Paragraph(mot10, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot10p = new Paragraph(eot10, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank10p = new Paragraph(rank10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot10p = new Paragraph(rankeot10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot10 = new PdfPCell(mot10p);
			PdfPCell cellrank10 = new PdfPCell(rank10p);
			PdfPCell celleot10 = new PdfPCell(eot10p);
			PdfPCell cellrankeot10 = new PdfPCell(rankeot10p);

			tableO.addCell(cellmot10);
			tableO.addCell(cellrank10);

			tableO.addCell(celleot10);
			tableO.addCell(cellrankeot10);

			if (subject10Avg == -1) {
				cell10Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell10Avg = new PdfPCell(new Paragraph("" + subject10Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot10p = new Paragraph(mot10, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot10p = new Paragraph(eot10, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell10Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject10Avg >= 0) {

				if (mot10.equals("-")) {
					SQL10 = "select DISTINCT (CASE WHEN " + subject10Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject10
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject10 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject10Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject10 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL10 = "select DISTINCT (CASE WHEN " + subject10Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject10
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject10 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject10Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject10 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade10;
				try {

					Grade10 = generateCellValue(SQL10);
					if (Grade10.next()) {
						grade10 = Grade10.getString(1);

						if (subject10Avg < 0 || cell10Avg == null || cell10Avg.equals("")) {
							grade10 = "";
						} else {
							grade10 = grade10;
						}

						paraGrade10 = new Paragraph(grade10,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade10 = new PdfPCell(new Paragraph("" + grade10,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade10 = "";
						paraGrade10 = new Paragraph(grade10,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade10 = new PdfPCell(new Paragraph("" + grade10,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject10Avg = -1;

				valueGrade10 = "";

				paraGrade10 = new Paragraph(valueGrade10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade10 = new PdfPCell(new Paragraph("" + grade10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject10Avg > 0 && subject10Avg < 50) {
				comment10 = "Poor";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment10 = new PdfPCell(comment10p);
			} else if (subject10Avg > 49 && subject10Avg < 60) {
				comment10 = "Fair";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment10 = new PdfPCell(comment10p);
			} else if (subject10Avg > 59 && subject10Avg < 70) {
				comment10 = "Good";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment10 = new PdfPCell(comment10p);
			} else if (subject10Avg > 69 && subject10Avg < 80) {
				comment10 = "V. Good";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment10 = new PdfPCell(comment10p);
			} else if (subject10Avg > 79 && subject10Avg < 101) {
				comment10 = "Excellent";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment10 = new PdfPCell(comment10p);
			} else {
				comment10 = "";
				comment10p = new Paragraph(comment10,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment10 = new PdfPCell(comment10p);
			}

			tableO.addCell(paraGrade10);
			tableO.addCell(cellcomment10);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject10, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Eleventh Subject and its marks
			 **************************************************************************/

			ResultSet Subject11;
			try {

				Subject11 = generateCellValue("SELECT subject_name from student_subjects where id=11");
				if (Subject11.next()) {
					subject11 = Subject11.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum11 = new PdfPCell(
					new Paragraph("11", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub11 = new PdfPCell(new Paragraph("" + subject11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum11);
			tableO.addCell(cellSub11);

			ResultSet MoT11;
			try {

				MoT11 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject11 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject11
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT11.next()) {
					mot11 = MoT11.getString(1);
					rank11 = MoT11.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT11;
			try {

				EoT11 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject11 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject11
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT11.next()) {
					eot11 = EoT11.getString(1);
					rankeot11 = EoT11.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered11;
			try {

				Subjectoffered11 = generateCellValue("select `" + subject11
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered11.next()) {

					yes11 = Subjectoffered11.getInt(1);

				} else {
					yes11 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes11 == 1) {

				/***********************************************
				 * Student Does offer Paper 11---the only supported paper so far
				 ************************************************/
				if (!(eot11 == null) && !(eot11.equals("-")) && !(eot11.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11 == null) && !(mot11.equals("-")) && !(mot11.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11 = Double.parseDouble(mot11);
						inteot11 = Double.parseDouble(eot11);
						subject11Avg = (intmot11 + inteot11) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11 = "-";
						inteot11 = Double.parseDouble(eot11);
						subject11Avg = (inteot11) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11 = "-";

					if (!(mot11 == null) && !(mot11.equals("-")) && !(mot11.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11 = Double.parseDouble(mot11);
						subject11Avg = (intmot11) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11 = "-";
						subject11Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot11 = "";
				eot11 = "";
				subject11Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot11p = new Paragraph(mot11, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot11p = new Paragraph(eot11, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank11p = new Paragraph(rank11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot11p = new Paragraph(rankeot11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot11 = new PdfPCell(mot11p);
			PdfPCell cellrank11 = new PdfPCell(rank11p);
			PdfPCell celleot11 = new PdfPCell(eot11p);
			PdfPCell cellrankeot11 = new PdfPCell(rankeot11p);

			tableO.addCell(cellmot11);
			tableO.addCell(cellrank11);

			tableO.addCell(celleot11);
			tableO.addCell(cellrankeot11);

			if (subject11Avg == -1) {
				cell11Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell11Avg = new PdfPCell(new Paragraph("" + subject11Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot11p = new Paragraph(mot11, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot11p = new Paragraph(eot11, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell11Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject11Avg >= 0) {

				if (mot11.equals("-")) {
					SQL11 = "select DISTINCT (CASE WHEN " + subject11Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject11
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject11 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject11Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject11 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL11 = "select DISTINCT (CASE WHEN " + subject11Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject11
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject11 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject11Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject11 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade11;
				try {

					Grade11 = generateCellValue(SQL11);
					if (Grade11.next()) {
						grade11 = Grade11.getString(1);

						if (subject11Avg < 0 || cell11Avg == null || cell11Avg.equals("")) {
							grade11 = "";
						} else {
							grade11 = grade11;
						}

						paraGrade11 = new Paragraph(grade11,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade11 = new PdfPCell(new Paragraph("" + grade11,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade11 = "";
						paraGrade11 = new Paragraph(grade11,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade11 = new PdfPCell(new Paragraph("" + grade11,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject11Avg = -1;

				valueGrade11 = "";

				paraGrade11 = new Paragraph(valueGrade11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade11 = new PdfPCell(new Paragraph("" + grade11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject11Avg > 0 && subject11Avg < 50) {
				comment11 = "Poor";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment11 = new PdfPCell(comment11p);
			} else if (subject11Avg > 49 && subject11Avg < 60) {
				comment11 = "Fair";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment11 = new PdfPCell(comment11p);
			} else if (subject11Avg > 59 && subject11Avg < 70) {
				comment11 = "Good";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment11 = new PdfPCell(comment11p);
			} else if (subject11Avg > 69 && subject11Avg < 80) {
				comment11 = "V. Good";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment11 = new PdfPCell(comment11p);
			} else if (subject11Avg > 79 && subject11Avg < 101) {
				comment11 = "Excellent";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment11 = new PdfPCell(comment11p);
			} else {
				comment11 = "";
				comment11p = new Paragraph(comment11,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment11 = new PdfPCell(comment11p);
			}

			tableO.addCell(paraGrade11);
			tableO.addCell(cellcomment11);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject11, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Twelveth Subject and its marks
			 **************************************************************************/

			ResultSet Subject12;
			try {

				Subject12 = generateCellValue("SELECT subject_name from student_subjects where id=12");
				if (Subject12.next()) {
					subject12 = Subject12.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum12 = new PdfPCell(
					new Paragraph("12", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub12 = new PdfPCell(new Paragraph("" + subject12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum12);
			tableO.addCell(cellSub12);

			ResultSet MoT12;
			try {

				MoT12 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject12 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject12
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT12.next()) {
					mot12 = MoT12.getString(1);
					rank12 = MoT12.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT12;
			try {

				EoT12 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject12 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject12
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT12.next()) {
					eot12 = EoT12.getString(1);
					rankeot12 = EoT12.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered12;
			try {

				Subjectoffered12 = generateCellValue("select `" + subject12
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered12.next()) {

					yes12 = Subjectoffered12.getInt(1);

				} else {
					yes12 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes12 == 1) {

				/***********************************************
				 * Student Does offer Paper 12---the only supported paper so far
				 ************************************************/
				if (!(eot12 == null) && !(eot12.equals("-")) && !(eot12.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12 == null) && !(mot12.equals("-")) && !(mot12.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12 = Double.parseDouble(mot12);
						inteot12 = Double.parseDouble(eot12);
						subject12Avg = (intmot12 + inteot12) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12 = "-";
						inteot12 = Double.parseDouble(eot12);
						subject12Avg = (inteot12) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12 = "-";

					if (!(mot12 == null) && !(mot12.equals("-")) && !(mot12.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12 = Double.parseDouble(mot12);
						subject12Avg = (intmot12) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12 = "-";
						subject12Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot12 = "";
				eot12 = "";
				subject12Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot12p = new Paragraph(mot12, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot12p = new Paragraph(eot12, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank12p = new Paragraph(rank12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot12p = new Paragraph(rankeot12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot12 = new PdfPCell(mot12p);
			PdfPCell cellrank12 = new PdfPCell(rank12p);
			PdfPCell celleot12 = new PdfPCell(eot12p);
			PdfPCell cellrankeot12 = new PdfPCell(rankeot12p);

			tableO.addCell(cellmot12);
			tableO.addCell(cellrank12);

			tableO.addCell(celleot12);
			tableO.addCell(cellrankeot12);

			if (subject12Avg == -1) {
				cell12Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell12Avg = new PdfPCell(new Paragraph("" + subject12Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot12p = new Paragraph(mot12, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot12p = new Paragraph(eot12, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell12Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject12Avg >= 0) {

				if (mot12.equals("-")) {
					SQL12 = "select DISTINCT (CASE WHEN " + subject12Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject12
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject12 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject12Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject12 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL12 = "select DISTINCT (CASE WHEN " + subject12Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject12
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject12 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject12Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject12 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade12;
				try {

					Grade12 = generateCellValue(SQL12);
					if (Grade12.next()) {
						grade12 = Grade12.getString(1);

						if (subject12Avg < 0 || cell12Avg == null || cell12Avg.equals("")) {
							grade12 = "";
						} else {
							grade12 = grade12;
						}

						paraGrade12 = new Paragraph(grade12,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade12 = new PdfPCell(new Paragraph("" + grade12,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade12 = "";
						paraGrade12 = new Paragraph(grade12,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade12 = new PdfPCell(new Paragraph("" + grade12,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject12Avg = -1;
				valueGrade12 = "";
				paraGrade12 = new Paragraph(valueGrade12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade12 = new PdfPCell(new Paragraph("" + grade12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject12Avg > 0 && subject12Avg < 50) {
				comment12 = "Poor";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment12 = new PdfPCell(comment12p);
			} else if (subject12Avg > 49 && subject12Avg < 60) {
				comment12 = "Fair";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment12 = new PdfPCell(comment12p);
			} else if (subject12Avg > 59 && subject12Avg < 70) {
				comment12 = "Good";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment12 = new PdfPCell(comment12p);
			} else if (subject12Avg > 69 && subject12Avg < 80) {
				comment12 = "V. Good";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment12 = new PdfPCell(comment12p);
			} else if (subject12Avg > 79 && subject12Avg < 101) {
				comment12 = "Excellent";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment12 = new PdfPCell(comment12p);
			} else {
				comment12 = "";
				comment12p = new Paragraph(comment12,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment12 = new PdfPCell(comment12p);
			}

			tableO.addCell(paraGrade12);
			tableO.addCell(cellcomment12);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject12, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Thirteenth Subject and its marks
			 **************************************************************************/

			ResultSet Subject13;
			try {

				Subject13 = generateCellValue("SELECT subject_name from student_subjects where id=13");
				if (Subject13.next()) {
					subject13 = Subject13.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum13 = new PdfPCell(
					new Paragraph("13", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub13 = new PdfPCell(new Paragraph("" + subject13,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum13);
			tableO.addCell(cellSub13);

			ResultSet MoT13;
			try {

				MoT13 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject13 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject13
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT13.next()) {
					mot13 = MoT13.getString(1);
					rank13 = MoT13.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT13;
			try {

				EoT13 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject13 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject13
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT13.next()) {
					eot13 = EoT13.getString(1);
					rankeot13 = EoT13.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered13;
			try {

				Subjectoffered13 = generateCellValue("select `" + subject13
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered13.next()) {

					yes13 = Subjectoffered13.getInt(1);

				} else {
					yes13 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes13 == 1) {

				/***********************************************
				 * Student Does offer Paper 13---the only supported paper so far
				 ************************************************/
				if (!(eot13 == null) && !(eot13.equals("-")) && !(eot13.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13 == null) && !(mot13.equals("-")) && !(mot13.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13 = Double.parseDouble(mot13);
						inteot13 = Double.parseDouble(eot13);
						subject13Avg = (intmot13 + inteot13) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13 = "-";
						inteot13 = Double.parseDouble(eot13);
						subject13Avg = (inteot13) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13 = "-";

					if (!(mot13 == null) && !(mot13.equals("-")) && !(mot13.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13 = Double.parseDouble(mot13);
						subject13Avg = (intmot13) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13 = "-";
						subject13Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot13 = "";
				eot13 = "";
				subject13Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot13p = new Paragraph(mot13, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot13p = new Paragraph(eot13, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank13p = new Paragraph(rank13,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot13p = new Paragraph(rankeot13,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot13 = new PdfPCell(mot13p);
			PdfPCell cellrank13 = new PdfPCell(rank13p);
			PdfPCell celleot13 = new PdfPCell(eot13p);
			PdfPCell cellrankeot13 = new PdfPCell(rankeot13p);

			tableO.addCell(cellmot13);
			tableO.addCell(cellrank13);

			tableO.addCell(celleot13);
			tableO.addCell(cellrankeot13);

			if (subject13Avg == -1) {
				cell13Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell13Avg = new PdfPCell(new Paragraph("" + subject13Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot13p = new Paragraph(mot13, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot13p = new Paragraph(eot13, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell13Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject13Avg >= 0) {

				if (mot13.equals("-")) {
					SQL13 = "select DISTINCT (CASE WHEN " + subject13Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject13
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject13 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject13Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject13 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL13 = "select DISTINCT (CASE WHEN " + subject13Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject13
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject13 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject13Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject13 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade13;
				try {

					Grade13 = generateCellValue(SQL13);
					if (Grade13.next()) {
						grade13 = Grade13.getString(1);

						if (subject13Avg < 0 || cell13Avg == null || cell13Avg.equals("")) {
							grade13 = "";
						} else {
							grade13 = grade13;
						}

						paraGrade13 = new Paragraph(grade13,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade13 = new PdfPCell(new Paragraph("" + grade13,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade13 = "";
						paraGrade13 = new Paragraph(grade13,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade13 = new PdfPCell(new Paragraph("" + grade13,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject13Avg = -1;

				valueGrade13 = "";

				paraGrade13 = new Paragraph(valueGrade13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade13 = new PdfPCell(new Paragraph("" + grade13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject13Avg > 0 && subject13Avg < 50) {
				comment13 = "Poor";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment13 = new PdfPCell(comment13p);
			} else if (subject13Avg > 49 && subject13Avg < 60) {
				comment13 = "Fair";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment13 = new PdfPCell(comment13p);
			} else if (subject13Avg > 59 && subject13Avg < 70) {
				comment13 = "Good";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment13 = new PdfPCell(comment13p);
			} else if (subject13Avg > 69 && subject13Avg < 80) {
				comment13 = "V. Good";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment13 = new PdfPCell(comment13p);
			} else if (subject13Avg > 79 && subject13Avg < 101) {
				comment13 = "Excellent";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment13 = new PdfPCell(comment13p);
			} else {
				comment13 = "";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment13 = new PdfPCell(comment13p);
			}

			tableO.addCell(paraGrade13);
			tableO.addCell(cellcomment13);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject13, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Forteen Subject and its marks
			 **************************************************************************/

			ResultSet Subject14;
			try {

				Subject14 = generateCellValue("SELECT subject_name from student_subjects where id=14");
				if (Subject14.next()) {
					subject14 = Subject14.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum14 = new PdfPCell(
					new Paragraph("14", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub14 = new PdfPCell(new Paragraph("" + subject14,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum14);
			tableO.addCell(cellSub14);

			ResultSet MoT14;
			try {

				MoT14 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject14 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject14
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT14.next()) {
					mot14 = MoT14.getString(1);
					rank14 = MoT14.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT14;
			try {

				EoT14 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject14 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject14
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT14.next()) {
					eot14 = EoT14.getString(1);
					rankeot14 = EoT14.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered14;
			try {

				Subjectoffered14 = generateCellValue("select `" + subject14
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered14.next()) {

					yes14 = Subjectoffered14.getInt(1);

				} else {
					yes14 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes14 == 1) {

				/***********************************************
				 * Student Does offer Paper 14---the only supported paper so far
				 ************************************************/
				if (!(eot14 == null) && !(eot14.equals("-")) && !(eot14.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14 == null) && !(mot14.equals("-")) && !(mot14.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14 = Double.parseDouble(mot14);
						inteot14 = Double.parseDouble(eot14);
						subject14Avg = (intmot14 + inteot14) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14 = "-";
						inteot14 = Double.parseDouble(eot14);
						subject14Avg = (inteot14) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14 = "-";

					if (!(mot14 == null) && !(mot14.equals("-")) && !(mot14.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14 = Double.parseDouble(mot14);
						subject14Avg = (intmot14) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14 = "-";
						subject14Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot14 = "";
				eot14 = "";
				subject14Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot14p = new Paragraph(mot14, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot14p = new Paragraph(eot14, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank14p = new Paragraph(rank14,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot14p = new Paragraph(rankeot14,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot14 = new PdfPCell(mot14p);
			PdfPCell cellrank14 = new PdfPCell(rank14p);
			PdfPCell celleot14 = new PdfPCell(eot14p);
			PdfPCell cellrankeot14 = new PdfPCell(rankeot14p);

			tableO.addCell(cellmot14);
			tableO.addCell(cellrank14);

			tableO.addCell(celleot14);
			tableO.addCell(cellrankeot14);

			if (subject14Avg == -1) {
				cell14Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell14Avg = new PdfPCell(new Paragraph("" + subject14Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot14p = new Paragraph(mot14, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot14p = new Paragraph(eot14, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell14Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject14Avg >= 0) {

				if (mot14.equals("-")) {
					SQL14 = "select DISTINCT (CASE WHEN " + subject14Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject14
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject14 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject14Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject14 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL14 = "select DISTINCT (CASE WHEN " + subject14Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject14
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject14 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject14Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject14 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade14;
				try {

					Grade14 = generateCellValue(SQL14);
					if (Grade14.next()) {
						grade14 = Grade14.getString(1);

						if (subject14Avg < 0 || cell14Avg == null || cell14Avg.equals("")) {
							grade14 = "";
						} else {
							grade14 = grade14;
						}

						paraGrade14 = new Paragraph(grade14,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade14 = new PdfPCell(new Paragraph("" + grade14,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade14 = "";
						paraGrade14 = new Paragraph(grade14,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade14 = new PdfPCell(new Paragraph("" + grade14,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject14Avg = -1;

				valueGrade14 = "";

				paraGrade14 = new Paragraph(valueGrade14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade14 = new PdfPCell(new Paragraph("" + grade14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject14Avg > 0 && subject14Avg < 50) {
				comment14 = "Poor";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment14 = new PdfPCell(comment14p);
			} else if (subject14Avg > 49 && subject14Avg < 60) {
				comment14 = "Fair";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment14 = new PdfPCell(comment14p);
			} else if (subject14Avg > 59 && subject14Avg < 70) {
				comment14 = "Good";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment14 = new PdfPCell(comment14p);
			} else if (subject14Avg > 69 && subject14Avg < 80) {
				comment14 = "V. Good";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment14 = new PdfPCell(comment14p);
			} else if (subject14Avg > 79 && subject14Avg < 101) {
				comment14 = "Excellent";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment14 = new PdfPCell(comment14p);
			} else {
				comment14 = "";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment14 = new PdfPCell(comment14p);
			}

			tableO.addCell(paraGrade14);
			tableO.addCell(cellcomment14);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject14, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Fifteen Subject and its marks
			 **************************************************************************/

			ResultSet Subject15;
			try {

				Subject15 = generateCellValue("SELECT subject_name from student_subjects where id=15");
				if (Subject15.next()) {
					subject15 = Subject15.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum15 = new PdfPCell(
					new Paragraph("15", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub15 = new PdfPCell(new Paragraph("" + subject15,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum15);
			tableO.addCell(cellSub15);

			ResultSet MoT15;
			try {

				MoT15 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject15 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject15
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT15.next()) {
					mot15 = MoT15.getString(1);
					rank15 = MoT15.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT15;
			try {

				EoT15 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject15 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject15
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT15.next()) {
					eot15 = EoT15.getString(1);
					rankeot15 = EoT15.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered15;
			try {

				Subjectoffered15 = generateCellValue("select `" + subject15
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered15.next()) {

					yes15 = Subjectoffered15.getInt(1);

				} else {
					yes15 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes15 == 1) {

				/***********************************************
				 * Student Does offer Paper 15---the only supported paper so far
				 ************************************************/
				if (!(eot15 == null) && !(eot15.equals("-")) && !(eot15.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15 == null) && !(mot15.equals("-")) && !(mot15.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15 = Double.parseDouble(mot15);
						inteot15 = Double.parseDouble(eot15);
						subject15Avg = (intmot15 + inteot15) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15 = "-";
						inteot15 = Double.parseDouble(eot15);
						subject15Avg = (inteot15) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15 = "-";

					if (!(mot15 == null) && !(mot15.equals("-")) && !(mot15.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15 = Double.parseDouble(mot15);
						subject15Avg = (intmot15) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15 = "-";
						subject15Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot15 = "";
				eot15 = "";
				subject15Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot15p = new Paragraph(mot15, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot15p = new Paragraph(eot15, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank15p = new Paragraph(rank15,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot15p = new Paragraph(rankeot15,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot15 = new PdfPCell(mot15p);
			PdfPCell cellrank15 = new PdfPCell(rank15p);
			PdfPCell celleot15 = new PdfPCell(eot15p);
			PdfPCell cellrankeot15 = new PdfPCell(rankeot15p);

			tableO.addCell(cellmot15);
			tableO.addCell(cellrank15);

			tableO.addCell(celleot15);
			tableO.addCell(cellrankeot15);

			if (subject15Avg == -1) {
				cell15Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell15Avg = new PdfPCell(new Paragraph("" + subject15Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot15p = new Paragraph(mot15, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot15p = new Paragraph(eot15, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell15Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject15Avg >= 0) {

				if (mot15.equals("-")) {
					SQL15 = "select DISTINCT (CASE WHEN " + subject15Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject15
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject15 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject15Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject15 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL15 = "select DISTINCT (CASE WHEN " + subject15Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject15
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject15 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject15Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject15 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade15;
				try {

					Grade15 = generateCellValue(SQL15);
					if (Grade15.next()) {
						grade15 = Grade15.getString(1);

						if (subject15Avg < 0 || cell15Avg == null || cell15Avg.equals("")) {
							grade15 = "";
						} else {
							grade15 = grade15;
						}

						paraGrade15 = new Paragraph(grade15,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade15 = new PdfPCell(new Paragraph("" + grade15,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade15 = "";
						paraGrade15 = new Paragraph(grade15,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade15 = new PdfPCell(new Paragraph("" + grade15,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject15Avg = -1;

				valueGrade15 = "";
				paraGrade15 = new Paragraph(valueGrade15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade15 = new PdfPCell(new Paragraph("" + grade15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject15Avg > 0 && subject15Avg < 50) {
				comment15 = "Poor";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment15 = new PdfPCell(comment15p);
			} else if (subject15Avg > 49 && subject15Avg < 60) {
				comment15 = "Fair";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment15 = new PdfPCell(comment15p);
			} else if (subject15Avg > 59 && subject15Avg < 70) {
				comment15 = "Good";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment15 = new PdfPCell(comment15p);
			} else if (subject15Avg > 69 && subject15Avg < 80) {
				comment15 = "V. Good";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment15 = new PdfPCell(comment15p);
			} else if (subject15Avg > 79 && subject15Avg < 101) {
				comment15 = "Excellent";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment15 = new PdfPCell(comment15p);
			} else {
				comment15 = "";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment15 = new PdfPCell(comment15p);
			}

			tableO.addCell(paraGrade15);
			tableO.addCell(cellcomment15);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject15, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Sixteenth Subject and its marks
			 **************************************************************************/

			ResultSet Subject16;
			try {

				Subject16 = generateCellValue("SELECT subject_name from student_subjects where id=16");
				if (Subject16.next()) {
					subject16 = Subject16.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum16 = new PdfPCell(
					new Paragraph("16", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub16 = new PdfPCell(new Paragraph("" + subject16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum16);
			tableO.addCell(cellSub16);

			ResultSet MoT16;
			try {

				MoT16 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject16 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject16
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT16.next()) {
					mot16 = MoT16.getString(1);
					rank16 = MoT16.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT16;
			try {

				EoT16 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject16 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject16
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT16.next()) {
					eot16 = EoT16.getString(1);
					rankeot16 = EoT16.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered16;
			try {

				Subjectoffered16 = generateCellValue("select `" + subject16
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered16.next()) {

					yes16 = Subjectoffered16.getInt(1);

				} else {
					yes16 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes16 == 1) {

				/***********************************************
				 * Student Does offer Paper 16---the only supported paper so far
				 ************************************************/
				if (!(eot16 == null) && !(eot16.equals("-")) && !(eot16.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16 == null) && !(mot16.equals("-")) && !(mot16.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16 = Double.parseDouble(mot16);
						inteot16 = Double.parseDouble(eot16);
						subject16Avg = (intmot16 + inteot16) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16 = "-";
						inteot16 = Double.parseDouble(eot16);
						subject16Avg = (inteot16) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16 = "-";

					if (!(mot16 == null) && !(mot16.equals("-")) && !(mot16.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16 = Double.parseDouble(mot16);
						subject16Avg = (intmot16) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16 = "-";
						subject16Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot16 = "";
				eot16 = "";
				subject16Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot16p = new Paragraph(mot16, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot16p = new Paragraph(eot16, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank16p = new Paragraph(rank16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot16p = new Paragraph(rankeot16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot16 = new PdfPCell(mot16p);
			PdfPCell cellrank16 = new PdfPCell(rank16p);
			PdfPCell celleot16 = new PdfPCell(eot16p);
			PdfPCell cellrankeot16 = new PdfPCell(rankeot16p);

			tableO.addCell(cellmot16);
			tableO.addCell(cellrank16);

			tableO.addCell(celleot16);
			tableO.addCell(cellrankeot16);

			if (subject16Avg == -1) {
				cell16Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell16Avg = new PdfPCell(new Paragraph("" + subject16Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot16p = new Paragraph(mot16, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot16p = new Paragraph(eot16, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell16Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject16Avg >= 0) {

				if (mot16.equals("-")) {
					SQL16 = "select DISTINCT (CASE WHEN " + subject16Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject16
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject16 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject16Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject16 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL16 = "select DISTINCT (CASE WHEN " + subject16Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject16
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject16 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject16Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject16 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade16;
				try {

					Grade16 = generateCellValue(SQL16);
					if (Grade16.next()) {
						grade16 = Grade16.getString(1);

						if (subject16Avg < 0 || cell16Avg == null || cell16Avg.equals("")) {
							grade16 = "";
						} else {
							grade16 = grade16;
						}

						paraGrade16 = new Paragraph(grade16,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade16 = new PdfPCell(new Paragraph("" + grade16,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade16 = "";
						paraGrade16 = new Paragraph(grade16,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade16 = new PdfPCell(new Paragraph("" + grade16,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject16Avg = -1;

				valueGrade16 = "";

				paraGrade16 = new Paragraph(valueGrade16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade16 = new PdfPCell(new Paragraph("" + grade16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject16Avg > 0 && subject16Avg < 50) {
				comment16 = "Poor";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment16 = new PdfPCell(comment16p);
			} else if (subject16Avg > 49 && subject16Avg < 60) {
				comment16 = "Fair";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment16 = new PdfPCell(comment16p);
			} else if (subject16Avg > 59 && subject16Avg < 70) {
				comment16 = "Good";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment16 = new PdfPCell(comment16p);
			} else if (subject16Avg > 69 && subject16Avg < 80) {
				comment16 = "V. Good";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment16 = new PdfPCell(comment16p);
			} else if (subject16Avg > 79 && subject16Avg < 101) {
				comment16 = "Excellent";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment16 = new PdfPCell(comment16p);
			} else {
				comment16 = "";
				comment16p = new Paragraph(comment16,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment16 = new PdfPCell(comment16p);
			}

			tableO.addCell(paraGrade16);
			tableO.addCell(cellcomment16);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject16, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Seventeenth Subject and its marks
			 **************************************************************************/

			ResultSet Subject17;
			try {

				Subject17 = generateCellValue("SELECT subject_name from student_subjects where id=17");
				if (Subject17.next()) {
					subject17 = Subject17.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum17 = new PdfPCell(
					new Paragraph("17", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub17 = new PdfPCell(new Paragraph("" + subject17,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum17);
			tableO.addCell(cellSub17);

			ResultSet MoT17;
			try {

				MoT17 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject17 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject17
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject17
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT17.next()) {
					mot17 = MoT17.getString(1);
					rank17 = MoT17.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT17;
			try {

				EoT17 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject17 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject17
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject17
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT17.next()) {
					eot17 = EoT17.getString(1);
					rankeot17 = EoT17.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered17;
			try {

				Subjectoffered17 = generateCellValue("select `" + subject17
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered17.next()) {

					yes17 = Subjectoffered17.getInt(1);

				} else {
					yes17 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes17 == 1) {

				/***********************************************
				 * Student Does offer Paper 17---the only supported paper so far
				 ************************************************/
				if (!(eot17 == null) && !(eot17.equals("-")) && !(eot17.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot17 == null) && !(mot17.equals("-")) && !(mot17.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot17 = Double.parseDouble(mot17);
						inteot17 = Double.parseDouble(eot17);
						subject17Avg = (intmot17 + inteot17) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot17 = "-";
						inteot17 = Double.parseDouble(eot17);
						subject17Avg = (inteot17) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot17 = "-";

					if (!(mot17 == null) && !(mot17.equals("-")) && !(mot17.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot17 = Double.parseDouble(mot17);
						subject17Avg = (intmot17) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot17 = "-";
						subject17Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot17 = "";
				eot17 = "";
				subject17Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot17p = new Paragraph(mot17, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot17p = new Paragraph(eot17, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank17p = new Paragraph(rank17,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot17p = new Paragraph(rankeot17,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot17 = new PdfPCell(mot17p);
			PdfPCell cellrank17 = new PdfPCell(rank17p);
			PdfPCell celleot17 = new PdfPCell(eot17p);
			PdfPCell cellrankeot17 = new PdfPCell(rankeot17p);

			tableO.addCell(cellmot17);
			tableO.addCell(cellrank17);

			tableO.addCell(celleot17);
			tableO.addCell(cellrankeot17);

			if (subject17Avg == -1) {
				cell17Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell17Avg = new PdfPCell(new Paragraph("" + subject17Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot17p = new Paragraph(mot17, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot17p = new Paragraph(eot17, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell17Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject17Avg >= 0) {

				if (mot17.equals("-")) {
					SQL17 = "select DISTINCT (CASE WHEN " + subject17Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject17
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject17 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject17Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject17 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL17 = "select DISTINCT (CASE WHEN " + subject17Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject17
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject17 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject17Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject17 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade17;
				try {

					Grade17 = generateCellValue(SQL17);
					if (Grade17.next()) {
						grade17 = Grade17.getString(1);

						if (subject17Avg < 0 || cell17Avg == null || cell17Avg.equals("")) {
							grade17 = "";
						} else {
							grade17 = grade17;
						}
						paraGrade17 = new Paragraph(grade17,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade17 = new PdfPCell(new Paragraph("" + grade17,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade17 = "";
						paraGrade17 = new Paragraph(grade17,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade17 = new PdfPCell(new Paragraph("" + grade17,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject17Avg = -1;

				valueGrade17 = "";

				paraGrade17 = new Paragraph(valueGrade17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade17 = new PdfPCell(new Paragraph("" + grade17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject17Avg > 0 && subject17Avg < 50) {
				comment17 = "Poor";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment17 = new PdfPCell(comment17p);
			} else if (subject17Avg > 49 && subject17Avg < 60) {
				comment17 = "Fair";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment17 = new PdfPCell(comment17p);
			} else if (subject17Avg > 59 && subject17Avg < 70) {
				comment17 = "Good";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment17 = new PdfPCell(comment17p);
			} else if (subject17Avg > 69 && subject17Avg < 80) {
				comment17 = "V. Good";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment17 = new PdfPCell(comment17p);
			} else if (subject17Avg > 79 && subject17Avg < 101) {
				comment17 = "Excellent";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment17 = new PdfPCell(comment17p);
			} else {
				comment17 = "";
				comment17p = new Paragraph(comment17,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment17 = new PdfPCell(comment17p);
			}

			tableO.addCell(paraGrade17);
			tableO.addCell(cellcomment17);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject17, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			/************************************************************************
			 * Eighteenth Subject and its marks
			 **************************************************************************/

			ResultSet Subject18;
			try {

				Subject18 = generateCellValue("SELECT subject_name from student_subjects where id=18");
				if (Subject18.next()) {
					subject18 = Subject18.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			cellNum18 = new PdfPCell(
					new Paragraph("18", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			cellSub18 = new PdfPCell(new Paragraph("" + subject18,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.addCell(cellNum18);
			tableO.addCell(cellSub18);

			ResultSet MoT18;
			try {

				MoT18 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject18 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject18
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject18
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (MoT18.next()) {
					mot18 = MoT18.getString(1);
					rank18 = MoT18.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT18;
			try {

				EoT18 = generateCellValue(
						"SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE a.`Marks Obtained`>b.`Marks Obtained` "
								+ "AND a.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND a.`Student Subject`='" + subject18 + "')"
								+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
								+ "AND b.`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' "
								+ "AND b.`Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "' AND b.`Student Subject`='" + subject18
								+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where "
								+ "`Test Name` LIKE '%"
								+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
								+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject18
								+ "' AND `Student Class`='"
								+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'");
				if (EoT18.next()) {
					eot18 = EoT18.getString(1);
					rankeot18 = EoT18.getString(2);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered18;
			try {

				Subjectoffered18 = generateCellValue("select `" + subject18
						+ "` from subjects_offered where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered18.next()) {

					yes18 = Subjectoffered18.getInt(1);

				} else {
					yes18 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes18 == 1) {

				/***********************************************
				 * Student Does offer Paper 18---the only supported paper so far
				 ************************************************/
				if (!(eot18 == null) && !(eot18.equals("-")) && !(eot18.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot18 == null) && !(mot18.equals("-")) && !(mot18.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot18 = Double.parseDouble(mot18);
						inteot18 = Double.parseDouble(eot18);
						subject18Avg = (intmot18 + inteot18) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot18 = "-";
						inteot18 = Double.parseDouble(eot18);
						subject18Avg = (inteot18) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot18 = "-";

					if (!(mot18 == null) && !(mot18.equals("-")) && !(mot18.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot18 = Double.parseDouble(mot18);
						subject18Avg = (intmot18) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot18 = "-";
						subject18Avg = -1;
					}
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot18 = "";
				eot18 = "";
				subject18Avg = -1;

			}
			/*****************************************************************************************************
			 * Determining the colors of ranks fonts
			 ******************************************************************************************************/
			mot18p = new Paragraph(mot18, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot18p = new Paragraph(eot18, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			Paragraph rank18p = new Paragraph(rank18,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			Paragraph rankeot18p = new Paragraph(rankeot18,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			PdfPCell cellmot18 = new PdfPCell(mot18p);
			PdfPCell cellrank18 = new PdfPCell(rank18p);
			PdfPCell celleot18 = new PdfPCell(eot18p);
			PdfPCell cellrankeot18 = new PdfPCell(rankeot18p);

			tableO.addCell(cellmot18);
			tableO.addCell(cellrank18);

			tableO.addCell(celleot18);
			tableO.addCell(cellrankeot18);

			if (subject18Avg == -1) {
				cell18Avg = new PdfPCell(
						new Paragraph("", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			} else {
				cell18Avg = new PdfPCell(new Paragraph("" + subject18Avg,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			}

			mot18p = new Paragraph(mot18, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			eot18p = new Paragraph(eot18, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));

			tableO.addCell(cell18Avg);

			/*
			 * Checking the grades and adding them to the table
			 * 
			 */

			if (subject18Avg >= 0) {

				if (mot18.equals("-")) {
					SQL18 = "select DISTINCT (CASE WHEN " + subject18Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject18
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject18 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject18Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject18 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL18 = "select DISTINCT (CASE WHEN " + subject18Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject18
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject18 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject18Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject18 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade18;
				try {

					Grade18 = generateCellValue(SQL18);
					if (Grade18.next()) {
						grade18 = Grade18.getString(1);

						if (subject18Avg < 0 || cell18Avg == null || cell18Avg.equals("")) {
							grade18 = "";
						} else {
							grade18 = grade18;
						}
						paraGrade18 = new Paragraph(grade18,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade18 = new PdfPCell(new Paragraph("" + grade18,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					} else {
						grade18 = "";
						paraGrade18 = new Paragraph(grade18,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
						cellGrade18 = new PdfPCell(new Paragraph("" + grade18,
								FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				subject18Avg = -1;

				valueGrade18 = "";

				paraGrade18 = new Paragraph(valueGrade18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellGrade18 = new PdfPCell(new Paragraph("" + grade18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			}

			/*
			 * Adding comments basing on the average marks
			 * 
			 */

			if (subject18Avg > 0 && subject18Avg < 50) {
				comment18 = "Poor";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				cellcomment18 = new PdfPCell(comment18p);
			} else if (subject18Avg > 49 && subject18Avg < 60) {
				comment18 = "Fair";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				cellcomment18 = new PdfPCell(comment18p);
			} else if (subject18Avg > 59 && subject18Avg < 70) {
				comment18 = "Good";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				cellcomment18 = new PdfPCell(comment18p);
			} else if (subject18Avg > 69 && subject18Avg < 80) {
				comment18 = "V. Good";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				cellcomment18 = new PdfPCell(comment18p);
			} else if (subject18Avg > 79 && subject18Avg < 101) {
				comment18 = "Excellent";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment18 = new PdfPCell(comment18p);
			} else {
				comment18 = "";
				comment18p = new Paragraph(comment18,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				cellcomment18 = new PdfPCell(comment18p);
			}

			tableO.addCell(paraGrade18);
			tableO.addCell(cellcomment18);

			endOfTermTest = comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem().toString();

			tableO.addCell(new Paragraph(teachersInitials(subject18, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			tableO.setWidthPercentage(100);
			document.add(tableO);

			document.add(new Paragraph(
					"****************************************************************************************************************"));

			/*****************************************************
			 * Adding the table to hold the three analysis down
			 *****************************************************/

			PdfPTable tableHolder = new PdfPTable(2);

			PdfPTable tableAnalysis = new PdfPTable(2);
			tableAnalysis.setWidths(new float[] { 5, 1 });

			Paragraph paraHeading = new Paragraph("Analysis of Results",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellHeadingGeneral = new PdfPCell(paraHeading);
			cellHeadingGeneral.setColspan(3);
			cellHeadingGeneral.setBackgroundColor(BaseColor.LIGHT_GRAY);
			cellHeadingGeneral.setBorder(0);
			cellHeadingGeneral.setPadding(4);
			cellHeadingGeneral.setHorizontalAlignment(Element.ALIGN_CENTER);
			tableHolder.addCell(cellHeadingGeneral);

			//// PdfPCell cellGrading = new PdfPCell(tableGrading);
			// cellGrading.setBorder(0);
			// cellGrading.setFixedHeight(120f);
			// tableHolder.addCell(cellGrading);
			tableHolder.setWidths(new float[] { 2, 1 });

			// PdfPCell cell = new PdfPCell(new Paragraph("70.5"));
			// cell.setBorder(0);

			// Add To Both Left and Right
			// Phrase p=new Phrase();
			// Chunk glue=new Chunk(new VerticalPositionMark());
			// p.add("Yeah Left");
			// p.add(glue);
			// p.add("Yeah Right");
			PdfPCell cell1a = new PdfPCell(new Paragraph("Student's Total Marks:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell1 = new PdfPCell(new Paragraph("Student's Average Mark:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell2 = new PdfPCell(new Paragraph("Agg of Best 8 Subjects:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell3 = new PdfPCell(new Paragraph("Student's Division:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell3b = new PdfPCell(new Paragraph("Student's Position In Class:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell4 = new PdfPCell(new Paragraph("Total Class Population:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell6 = new PdfPCell(new Paragraph("Best Student's Average:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));
			PdfPCell cell7 = new PdfPCell(new Paragraph("Worst Student's Average:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

			/*****************************************************
			 * Calculating Class Average
			 *****************************************************/

			ResultSet resultClassAverage;
			String resultClassAverageSQL = "SELECT AVG(`Marks Obtained`) FROM students_marks WHERE `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND (`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR `Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') GROUP BY `Student Class` LIMIT 1";
			try {
				resultClassAverage = generateCellValue(resultClassAverageSQL);
				while (resultClassAverage.next()) {
					classAverage = resultClassAverage.getDouble(1);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			double finalClassAve = Math.round(classAverage * 10d) / 10d;

			PdfPCell classAve = new PdfPCell(new Paragraph(finalClassAve + ""));

			ResultSet resultStudentTotal;

			if (comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					.equals(comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem())) {
				resultStudentTotalSQL = "SELECT ROUND(SUM(`Marks Obtained`),1) FROM students_marks WHERE `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND (`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' OR `Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%') AND `Class Number`='" + classNumber + "' GROUP BY `Class Number` LIMIT 1";
			} else {
				resultStudentTotalSQL = "SELECT ROUND((SUM(`Marks Obtained`))/2,1) FROM students_marks WHERE `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND (`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' OR `Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%') AND `Class Number`='" + classNumber + "' GROUP BY `Class Number` LIMIT 1";
			}
			try {
				resultStudentTotal = generateCellValue(resultStudentTotalSQL);
				while (resultStudentTotal.next()) {
					studentTotal = resultStudentTotal.getDouble(1);

					System.out.println(studentTotal);
				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			double finalStudentTot = Math.round(studentTotal * 10d) / 10d;

			PdfPCell studentTot = new PdfPCell(new Paragraph(finalStudentTot + "",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			ResultSet resultStudentAverage;
			String resultStudentAverageSQL = "SELECT AVG(`Marks Obtained`) FROM students_marks WHERE `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND (`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR `Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') AND `Class Number`='" + classNumber + "' GROUP BY `Class Number` LIMIT 1";
			try {
				resultStudentAverage = generateCellValue(resultStudentAverageSQL);
				while (resultStudentAverage.next()) {
					studentAverage = resultStudentAverage.getDouble(1);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			double finalStudentAve = Math.round(studentAverage * 10d) / 10d;

			PdfPCell studentAve = new PdfPCell(new Paragraph(finalStudentAve + "",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			if (!(grade1 == null) && !(grade1.equals("_")) && !(grade1.equals(""))) {
				gradeValue1 = grade1.replaceAll("[^0-9]", "");
				valueGrade1 = "" + gradeValue1;
			} else {
				grade1 = "10";
				gradeValue1 = grade1.replaceAll("[^0-9]", "");
				valueGrade1 = "";
			}

			if (!(grade2 == null) && !(grade2.equals("_")) && !(grade2.equals(""))) {
				gradeValue2 = grade2.replaceAll("[^0-9]", "");
				valueGrade2 = "" + gradeValue2;
			} else {
				grade2 = "10";
				gradeValue2 = grade2.replaceAll("[^0-9]", "");
				valueGrade2 = "";
			}
			if (!(grade3 == null) && !(grade3.equals("_")) && !(grade3.equals(""))) {
				gradeValue3 = grade3.replaceAll("[^0-9]", "");
				valueGrade3 = "" + gradeValue3;
			} else {
				grade3 = "10";
				gradeValue3 = grade3.replaceAll("[^0-9]", "");
				valueGrade3 = "";
			}

			if (!(grade4 == null) && !(grade4.equals("_")) && !(grade4.equals(""))) {
				gradeValue4 = grade4.replaceAll("[^0-9]", "");
				valueGrade4 = "" + gradeValue4;
			} else {
				grade4 = "10";
				gradeValue4 = grade4.replaceAll("[^0-9]", "");
				valueGrade4 = "";
			}

			if (!(grade5 == null) && !(grade5.equals("_")) && !(grade5.equals(""))) {
				gradeValue5 = grade5.replaceAll("[^0-9]", "");
				valueGrade5 = "" + gradeValue5;
			} else {
				grade5 = "10";
				gradeValue5 = grade5.replaceAll("[^0-9]", "");
				valueGrade5 = "";
			}

			if (!(grade6 == null) && !(grade6.equals("_")) && !(grade6.equals(""))) {
				gradeValue6 = grade6.replaceAll("[^0-9]", "");
				valueGrade6 = "" + gradeValue6;
			} else {
				grade6 = "10";
				gradeValue6 = grade6.replaceAll("[^0-9]", "");
				valueGrade6 = "";
			}

			if (!(grade7 == null) && !(grade7.equals("_")) && !(grade7.equals(""))) {
				gradeValue7 = grade7.replaceAll("[^0-9]", "");
				valueGrade7 = "" + gradeValue7;
			} else {
				grade7 = "10";
				gradeValue7 = grade7.replaceAll("[^0-9]", "");
				valueGrade7 = "";
			}

			if (!(grade8 == null) && !(grade8.equals("_")) && !(grade8.equals(""))) {
				gradeValue8 = grade8.replaceAll("[^0-9]", "");
				valueGrade8 = "" + gradeValue8;
			} else {
				grade8 = "10";
				gradeValue8 = grade8.replaceAll("[^0-9]", "");
				valueGrade8 = "";
			}

			if (!(grade9 == null) && !(grade9.equals("_")) && !(grade9.equals(""))) {
				gradeValue9 = grade9.replaceAll("[^0-9]", "");
				valueGrade9 = "" + gradeValue9;
			} else {
				grade9 = "10";
				gradeValue9 = grade9.replaceAll("[^0-9]", "");
				valueGrade9 = "";
			}

			if (!(grade10 == null) && !(grade10.equals("_")) && !(grade10.equals(""))) {
				gradeValue10 = grade10.replaceAll("[^0-9]", "");
				valueGrade10 = "" + gradeValue10;
			} else {
				grade10 = "10";
				gradeValue10 = grade10.replaceAll("[^0-9]", "");
				valueGrade10 = "";
			}

			if (!(grade11 == null) && !(grade11.equals("_")) && !(grade11.equals(""))) {
				gradeValue11 = grade11.replaceAll("[^0-9]", "");
				valueGrade11 = "" + gradeValue11;
			} else {
				grade11 = "10";
				gradeValue11 = grade11.replaceAll("[^0-9]", "");
				valueGrade11 = "";
			}

			if (!(grade12 == null) && !(grade12.equals("_")) && !(grade12.equals(""))) {
				gradeValue12 = grade12.replaceAll("[^0-9]", "");
				valueGrade12 = "" + gradeValue12;
			} else {
				grade12 = "10";
				gradeValue12 = grade12.replaceAll("[^0-9]", "");
				valueGrade12 = "";
			}

			if (!(grade13 == null) && !(grade13.equals("_")) && !(grade13.equals(""))) {
				gradeValue13 = grade13.replaceAll("[^0-9]", "");
				valueGrade13 = "" + gradeValue13;
			} else {
				grade13 = "10";
				gradeValue13 = grade13.replaceAll("[^0-9]", "");
				valueGrade13 = "";
			}

			if (!(grade14 == null) && !(grade14.equals("_")) && !(grade14.equals(""))) {
				gradeValue14 = grade14.replaceAll("[^0-9]", "");
				valueGrade14 = "" + gradeValue14;
			} else {
				grade14 = "10";
				gradeValue14 = grade14.replaceAll("[^0-9]", "");
				valueGrade14 = "";
			}

			if (!(grade15 == null) && !(grade15.equals("_")) && !(grade15.equals(""))) {
				gradeValue15 = grade15.replaceAll("[^0-9]", "");
				valueGrade15 = "" + gradeValue15;
			} else {
				grade15 = "10";
				gradeValue15 = grade15.replaceAll("[^0-9]", "");
				valueGrade15 = "";
			}

			if (!(grade16 == null) && !(grade16.equals("_")) && !(grade16.equals(""))) {
				gradeValue16 = grade16.replaceAll("[^0-9]", "");
				valueGrade16 = "" + gradeValue16;
			} else {
				grade16 = "10";
				gradeValue16 = grade16.replaceAll("[^0-9]", "");
				valueGrade16 = "";
			}

			if (!(grade17 == null) && !(grade17.equals("_")) && !(grade17.equals(""))) {
				gradeValue17 = grade17.replaceAll("[^0-9]", "");
				valueGrade17 = "" + gradeValue17;
			} else {
				grade17 = "10";
				gradeValue17 = grade17.replaceAll("[^0-9]", "");
				valueGrade17 = "";
			}

			if (!(grade18 == null) && !(grade18.equals("_")) && !(grade18.equals(""))) {
				gradeValue18 = grade18.replaceAll("[^0-9]", "");
				valueGrade18 = "" + gradeValue18;
			} else {
				grade18 = "10";
				gradeValue18 = grade18.replaceAll("[^0-9]", "");
				valueGrade18 = "";
			}

			int inGradeValue1 = Integer.parseInt(gradeValue1);
			int inGradeValue2 = Integer.parseInt(gradeValue2);
			int inGradeValue3 = Integer.parseInt(gradeValue3);
			int inGradeValue4 = Integer.parseInt(gradeValue4);
			int inGradeValue5 = Integer.parseInt(gradeValue5);
			int inGradeValue6 = Integer.parseInt(gradeValue6);
			int inGradeValue7 = Integer.parseInt(gradeValue7);
			int inGradeValue8 = Integer.parseInt(gradeValue8);
			int inGradeValue9 = Integer.parseInt(gradeValue9);
			int inGradeValue10 = Integer.parseInt(gradeValue10);
			int inGradeValue11 = Integer.parseInt(gradeValue11);
			int inGradeValue12 = Integer.parseInt(gradeValue12);
			int inGradeValue13 = Integer.parseInt(gradeValue13);
			int inGradeValue14 = Integer.parseInt(gradeValue14);
			int inGradeValue15 = Integer.parseInt(gradeValue15);
			int inGradeValue16 = Integer.parseInt(gradeValue16);
			int inGradeValue17 = Integer.parseInt(gradeValue17);
			int inGradeValue18 = Integer.parseInt(gradeValue18);

			lvList = new ListView<Integer>();
			items = FXCollections.observableArrayList();
			lvList.setItems(items);
			lvList.setMaxHeight(Control.USE_PREF_SIZE);
			lvList.setMaxWidth(150);

			lvList.getItems().add(inGradeValue1);
			lvList.getItems().add(inGradeValue2);
			lvList.getItems().add(inGradeValue3);
			lvList.getItems().add(inGradeValue4);
			lvList.getItems().add(inGradeValue5);
			lvList.getItems().add(inGradeValue6);
			lvList.getItems().add(inGradeValue7);
			lvList.getItems().add(inGradeValue8);
			lvList.getItems().add(inGradeValue9);
			lvList.getItems().add(inGradeValue10);
			lvList.getItems().add(inGradeValue11);
			lvList.getItems().add(inGradeValue12);
			lvList.getItems().add(inGradeValue13);
			lvList.getItems().add(inGradeValue14);
			lvList.getItems().add(inGradeValue15);
			lvList.getItems().add(inGradeValue16);
			lvList.getItems().add(inGradeValue17);
			lvList.getItems().add(inGradeValue18);

			Collections.sort(lvList.getItems(), new Comparator<Integer>() {

				@Override
				public int compare(Integer first_one, Integer the_other) {

					if (the_other >= first_one) {
						return -1;
					} else {
						return 1;
					}
				}

			});

			int D1 = lvList.getItems().get(1);
			int D2 = lvList.getItems().get(1);
			int D3 = lvList.getItems().get(2);
			int D4 = lvList.getItems().get(3);
			int D5 = lvList.getItems().get(4);
			int D6 = lvList.getItems().get(5);
			int D7 = lvList.getItems().get(6);
			int D8 = lvList.getItems().get(7);
			int totalAgg = D1 + D2 + D3 + D4 + D5 + D6 + D7 + D8;

			PdfPCell cellAggBest8 = new PdfPCell(new Paragraph(totalAgg + "",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			ResultSet resultBestStudent;
			String sqlBestStudent = "SELECT AVG(`Marks Obtained`) AS Average FROM students_marks WHERE `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND (`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR `Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') GROUP BY `Class Number` ORDER BY Average DESC LIMIT 1";
			try {
				resultBestStudent = generateCellValue(sqlBestStudent);
				while (resultBestStudent.next()) {
					bestStudent = resultBestStudent.getDouble(1);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			double BestStudent = Math.round(bestStudent * 10d) / 10d;

			PdfPCell cellBestStudent = new PdfPCell(new Paragraph(BestStudent + "",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			ResultSet resultWorstStudent;
			String sqlWorstStudent = "SELECT AVG(`Marks Obtained`) As Average FROM students_marks WHERE `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' AND (`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR `Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') GROUP BY `Class Number` ORDER BY Average ASC LIMIT 1";
			try {
				resultWorstStudent = generateCellValue(sqlWorstStudent);
				while (resultWorstStudent.next()) {
					worstStudent = resultWorstStudent.getDouble(1);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			double WorstStudent = Math.round(worstStudent * 10d) / 10d;

			PdfPCell cellWorstStudent = new PdfPCell(new Paragraph(WorstStudent + "",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			ResultSet population;
			String populationSQL = "SELECT COUNT(*) FROM (SELECT COUNT(*) FROM `"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "` WHERE `discipline_status` is null AND year='" + Calyear + "' GROUP BY `payment_code`) t";
			try {
				population = generateCellValue(populationSQL);
				while (population.next()) {
					populationValue = population.getString(1);

				}
			} catch (Exception e) {
				// TODO: handle exception
			}

			PdfPCell populationCell = new PdfPCell(new Paragraph(populationValue,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			String positionSQL = "SELECT `Marks Obtained`,(SELECT 1+(SELECT COUNT(*) FROM students_marks a WHERE SUM(a.`Marks Obtained`)>SUM(b.`Marks Obtained`) "
					+ "AND (a.`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR a.`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%'))"
					+ " AS rank FROM students_marks b WHERE b.`Class Number`='" + classNumber + "' "
					+ "AND (b.`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR b.`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') AND b.`Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "' ORDER BY rank LIMIT 1) AS 'Student Rank' from students_marks where " + "(`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' OR `Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%') AND `Class Number`='" + classNumber + "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "'";

			// totalMarks=new
			// Paragraph(studentTot,FontFactory.getFont(FontFactory.TIMES_ROMAN, 10,
			// Font.BOLD, new BaseColor(0,126, 156)));
			division = new Paragraph("",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			positionStream = new Paragraph("",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			if (totalAgg < 33) {
				if (inGradeValue1 == 9 || inGradeValue8 == 9) {
					divisionValueN = "II";
				} else {
					divisionValueN = "I";
				}

			} else if (totalAgg < 49 && totalAgg > 32) {
				if (inGradeValue1 == 9 || inGradeValue8 == 9) {
					divisionValueN = "III";
				} else {
					divisionValueN = "II";
				}
			} else if (totalAgg < 57 && totalAgg > 48) {
				if (inGradeValue1 == 9 || inGradeValue8 == 9) {
					divisionValueN = "IV";
				} else {
					divisionValueN = "III";
				}
			} else if (totalAgg < 65 && totalAgg > 56) {
				if (inGradeValue1 == 9 || inGradeValue8 == 9) {
					divisionValueN = "U";
				} else {
					divisionValueN = "IV";
				}
			} else if (totalAgg < 73 && totalAgg > 64) {
				if (inGradeValue1 == 9 || inGradeValue8 == 9) {
					divisionValueN = "U";
				} else {
					divisionValueN = "U";
				}
			}

			divisionValue = new Paragraph(divisionValueN,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));

			String sqlPosition = "select rank from (select `Class Number`, total,CASE WHEN @l=total THEN @r ELSE @r:=@row + 1 END as rank,"
					+ " @l:=total, @row:=@row+1 FROM (SELECT `Class Number`, sum(`Marks Obtained`) as total FROM students_marks WHERE "
					+ "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "%' OR "
					+ "`Test Name` LIKE '%" + comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' " + "GROUP BY `Class Number` ORDER BY total DESC) totals,"
					+ "(SELECT @r:=0, @row:=0,@l:=NULL) rank) realrank where `Class Number`='" + classNumber + "'";
			System.out.println(sqlPosition);
			ResultSet studentPosition;
			try {

				studentPosition = generateCellValue(sqlPosition);

				if (studentPosition.next()) {

					int valueRank = Integer.parseInt(studentPosition.getString(1));

					StudentNumber = studentPosition.getString(1) + TestValues(valueRank);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			PdfPCell positionValue = new PdfPCell(new Paragraph(StudentNumber,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			tableAnalysis.addCell(cell1a);
			tableAnalysis.addCell(studentTot);
			tableAnalysis.addCell(cell1);
			tableAnalysis.addCell(studentAve);
			tableAnalysis.addCell(cell2);
			tableAnalysis.addCell(cellAggBest8);
			tableAnalysis.addCell(cell3);
			tableAnalysis.addCell(divisionValue);
			tableAnalysis.addCell(cell3b);
			tableAnalysis.addCell(positionValue);
			tableAnalysis.addCell(cell4);
			tableAnalysis.addCell(populationCell);
			tableAnalysis.addCell(cell6);
			tableAnalysis.addCell(cellBestStudent);
			tableAnalysis.addCell(cell7);
			tableAnalysis.addCell(cellWorstStudent);

			cell1a.setFixedHeight(10f);
			cell1.setFixedHeight(4f);
			studentAve.setFixedHeight(4f);

			PdfPCell cellAnalysis = new PdfPCell(tableAnalysis);
			cellAnalysis.setFixedHeight(120f);
			tableHolder.addCell(cellAnalysis);

			/**************************************************
			 * Adding Class PieChart to the report card
			 **************************************************/

			com.itextpdf.text.Image imagePie = com.itextpdf.text.Image.getInstance(labelPath.getText() + "Chart.png");
			// imageStudent.scaleToFit(101, 90);
			imagePie.setAlignment(Element.ALIGN_CENTER);

			PdfPCell cellPieChart = new PdfPCell(imagePie, true);
			cellPieChart.setBorder(0);
			cellPieChart.setFixedHeight(70f);
			tableHolder.addCell(cellPieChart);
			tableHolder.setWidthPercentage(100);

			document.add(tableHolder);

			MARKS = new Paragraph("MARKS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			distinction1 = new Paragraph("80-100",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			distinction2 = new Paragraph("75-79",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit3 = new Paragraph("65-74",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit4 = new Paragraph("60-64",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit5 = new Paragraph("55-59",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit6 = new Paragraph("50-54",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			pass7 = new Paragraph("45-49",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			pass8 = new Paragraph("40-44",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			failed9 = new Paragraph("00-39",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			GRADE = new Paragraph("GRADE",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));

			distinction1V = new Paragraph("D1",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			distinction2V = new Paragraph("D2",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit3V = new Paragraph("C3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit4V = new Paragraph("C4",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit5V = new Paragraph("C5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			credit6V = new Paragraph("C6",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			pass7V = new Paragraph("P7",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			pass8V = new Paragraph("P8",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			failed9V = new Paragraph("F9",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));

			PdfPTable tableGrading = new PdfPTable(10);
			tableGrading.addCell(MARKS);
			tableGrading.addCell(failed9);
			tableGrading.addCell(pass8);
			tableGrading.addCell(pass7);
			tableGrading.addCell(credit6);
			tableGrading.addCell(credit5);
			tableGrading.addCell(credit4);
			tableGrading.addCell(credit3);
			tableGrading.addCell(distinction2);
			tableGrading.addCell(distinction1);
			tableGrading.addCell(GRADE);
			tableGrading.addCell(failed9V);
			tableGrading.addCell(pass8V);
			tableGrading.addCell(pass7V);
			tableGrading.addCell(credit6V);
			tableGrading.addCell(credit5V);
			tableGrading.addCell(credit4V);
			tableGrading.addCell(credit3V);
			tableGrading.addCell(distinction2V);
			tableGrading.addCell(distinction1V);

			tableGrading.setWidthPercentage(100);

			document.add(new Paragraph("",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 4, Font.BOLD, new BaseColor(0, 126, 156))));
			document.add(Chunk.NEWLINE);
			document.add(tableGrading);

			Paragraph paragraphUnderlineDown = new Paragraph(
					"****************************************************************************************************************");
			paragraphUnderlineDown.setAlignment(Element.ALIGN_CENTER);
			// document.add(paragraphUnderlineDown);

			/***************************************************
			 * Creating footer and header of the report
			 ***************************************************/

			PdfContentByte over = writer.getDirectContent();
			Phrase footer = new Phrase(schoolName + ", TERMLY STUDENTS REPORT",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new BaseColor(0, 126, 156)));
			headerSchoolName = new Paragraph(schoolName,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 20, Font.BOLD, new BaseColor(0, 126, 156)));

			// tableHeader.writeSelectedRows(0, -1, document.left(), document.top() + 16,
			// over);

			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, headerSchoolName,
					(document.right() - document.left()) / 2 + document.leftMargin(), document.top(), 0);

			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, footer,
					(document.right() - document.left()) / 2 + document.leftMargin(), document.bottom(), 0);

			/***************************************************
			 * Signatures, Stamp and Comments/Remarks
			 ***************************************************/
			Paragraph classTeacher = new Paragraph(
					"Class Teacher's Remarks:................................................................................Sgnature..............................................");
			Paragraph headTeacher = new Paragraph(
					"Head Teacher's Remarks:................................................................................Signature.............................................");

			document.add(classTeacher);
			document.add(headTeacher);

			document.add(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));

			document.add(new Paragraph(
					"Next Term Begins On:.....................................................And Ends On:...........................................................................................",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			document.add(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));

			document.add(new Paragraph("School Stamp ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			/***************************************************
			 * Adding border to the report
			 ***************************************************/
			Rectangle rect = new Rectangle(577, 825, 8, 15);
			rect.enableBorderSide(1);
			rect.enableBorderSide(2);
			rect.enableBorderSide(4);
			rect.enableBorderSide(8);
			rect.setBorderColor(new BaseColor(0, 126, 156));
			rect.setBorderWidth(2);
			document.add(rect);

			// Rectangle rect1 = new Rectangle(570, 820, 10, 17);
			// rect1.enableBorderSide(1);
			// rect1.enableBorderSide(2);
			// rect1.enableBorderSide(4);
			// rect1.enableBorderSide(8);
			// rect1.setBorderColor(new BaseColor(0,126, 156));
			// rect1.setBorderWidth(1);
			// document.add(rect1);

			/***************************************************
			 * Alerting us for successful creation of the report
			 ***************************************************/

			// JOptionPane.showMessageDialog(null, "Report generated successfully");

			/**************************************************
			 * Close the report reading through---you're done
			 **************************************************/

			document.close();
			/***************************************************
			 * Text & Image Watermark with transparent background
			 ***************************************************/

			// File file = new File(destinationFolder);
			// file.getParentFile().mkdirs();
			// try {
			// new AutoGeneratingAndPrintingReportCards().manipulatePdf(SRC,
			// destinationFolder);
			// } catch (IOException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (DocumentException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void generateReportForAlevel(String classNumber, String destinationFolder) {

		/****************************************************************
		 * Create a pdf to replace the original one
		 ****************************************************************/

		// com.itextpdf.text.Document documentTemporary = new
		// com.itextpdf.text.Document(PageSize.A4.rotate());
		// try {
		// outputTemp = new FileOutputStream("ReportA.pdf");
		//
		// PdfWriter writerTemp = PdfWriter.getInstance(documentTemporary, outputTemp);
		//
		// /**************************************************
		// * Opening the .pdf document holding report info
		// **************************************************/
		//
		// documentTemporary.open();
		//
		// documentTemporary.add(new Paragraph("Temporary File"));
		//
		// documentTemporary.close();
		//
		// } catch (Exception e) {
		// // TODO: handle exception
		// }

		/****************************************************************
		 * Download Student Image and Store for later puting on results
		 ****************************************************************/
		Calendar cal = Calendar.getInstance();
		String four = "" + cal.getTime();

		answer = four.substring(four.length() - 4);
		downloadStudentImage("select students_info.photo from students_info,student_ledger "
				+ "where student_ledger.class_number='" + classNumber + "' AND student_ledger.year='" + answer
				+ "' and students_info.payment_code=student_ledger.payment_code group by students_info.payment_code");

		downloadSchoolBadge("select school_logo from school_details LIMIT 1");

		/**************************************************
		 * Creating a pdf document for holding report info
		 **************************************************/

		// com.itextpdf.text.Document document = new
		// com.itextpdf.text.Document(PageSize.A4.rotate());
		com.itextpdf.text.Document document = new com.itextpdf.text.Document();

		try {
			String outfile = labelPath.getText();
			outputA = new FileOutputStream(destinationFolder);

			PdfWriter writer = PdfWriter.getInstance(document, outputA);

			/**************************************************
			 * Opening the .pdf document holding report info
			 **************************************************/

			document.open();

			/**************************************************
			 * Adding School badge to the report card
			 **************************************************/

			com.itextpdf.text.Image image = com.itextpdf.text.Image.getInstance(outfile + "SchoolBadge.png");
			// image.scaleToFit(101, 90);
			image.setAlignment(Element.ALIGN_CENTER);

			/**************************************************
			 * Adding Student Picture to the report card
			 **************************************************/

			com.itextpdf.text.Image imageStudent = com.itextpdf.text.Image.getInstance(outfile + "Student.png");
			// imageStudent.scaleToFit(101, 90);
			imageStudent.setAlignment(Element.ALIGN_CENTER);

			ResultSet schoolStuffs;
			try {

				schoolStuffs = generateCellValue(
						"SELECT school_name,school_email,school_phone,school_address from school_details");
				if (schoolStuffs.next()) {
					schoolName = schoolStuffs.getString(1);
					schoolAddress = schoolStuffs.getString(4);
					schoolPhone = schoolStuffs.getString(3);
					schoolEmail = schoolStuffs.getString(2);

				} else {
					JOptionPane.showMessageDialog(null, "No School Details Found");
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			Paragraph heading = new Paragraph(schoolName,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new BaseColor(0, 126, 156)));
			heading.setAlignment(Element.ALIGN_CENTER);

			/**************************************************
			 * Creating document sub heading for report
			 **************************************************/

			Paragraph headingPOBOX = new Paragraph(schoolAddress,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingPOBOX.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingTel = new Paragraph(schoolPhone,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingTel.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingEmail = new Paragraph(schoolEmail,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			headingEmail.setAlignment(Element.ALIGN_CENTER);

			Paragraph headingMoto = new Paragraph("HARD WORK AND DETERMINATION PAYS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 9, Font.BOLD, new BaseColor(0, 126, 156)));
			headingMoto.setAlignment(Element.ALIGN_CENTER);

			PdfPCell cellHead = new PdfPCell();

			cellHead.addElement(headingPOBOX);
			cellHead.addElement(headingEmail);
			cellHead.addElement(headingTel);
			cellHead.addElement(headingMoto);

			PdfPTable tableHeader = new PdfPTable(3);

			PdfPCell cellLogo = new PdfPCell(image, true);
			PdfPCell cellStudentPic = new PdfPCell(imageStudent, true);

			cellLogo.setBorder(0);
			cellLogo.setFixedHeight(55f);
			cellHead.setBorder(0);
			cellHead.setFixedHeight(55f);
			cellStudentPic.setBorder(0);
			cellStudentPic.setFixedHeight(55f);

			tableHeader.addCell(cellLogo);
			tableHeader.addCell(cellHead);
			tableHeader.addCell(cellStudentPic);
			tableHeader.setWidthPercentage(100);
			// tableHeader.setTotalWidth(document.right() - document.left() + 20);
			tableHeader.setWidths(new float[] { 1, 4, 1 });

			document.add(tableHeader);

			/**************************************************
			 * Underlining the heading manually
			 **************************************************/

			Paragraph paragraphUnderline = new Paragraph("O-LEVEL TERMLY REPORT CARD",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(44, 67, 144)));
			paragraphUnderline.setAlignment(Element.ALIGN_CENTER);
			document.add(new Paragraph(""));
			document.add(Chunk.NEWLINE);

			paragraphUnderline.setAlignment(Element.ALIGN_CENTER);
			PdfPCell cell = new PdfPCell();
			cell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);
			cell.setBorderColor(new BaseColor(44, 67, 144));
			cell.setBorderWidth(1f);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell.addElement(paragraphUnderline);
			cell.addElement(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 2, Font.BOLD, BaseColor.WHITE)));
			cell.setFixedHeight(18f);

			tableReportHeader = new PdfPTable(1);
			tableReportHeader.setWidthPercentage(99);
			tableReportHeader.addCell(cell);

			LineSeparator sep = new LineSeparator();
			sep.setOffset(2);
			sep.setAlignment(Element.ALIGN_CENTER);
			sep.setLineColor(new BaseColor(0, 126, 156));
			sep.setPercentage(99);
			document.add(sep);

			document.add(tableReportHeader);
			LineSeparator sep1 = new LineSeparator();
			sep1.setOffset(2);
			sep1.setAlignment(Element.ALIGN_CENTER);
			sep1.setLineColor(new BaseColor(0, 126, 156));
			sep1.setPercentage(99);
			document.add(sep1);

			document.add(new Paragraph(""));

			PdfPTable tableMaMalo = new PdfPTable(4);
			tableMaMalo.setWidths(new float[] { 1, 2, 2, 1 });

			try {

				Calendar calendar = Calendar.getInstance();

				String fourdigits = "" + calendar.getTime();

				year = fourdigits.substring(fourdigits.length() - 4);

				studentName = generateCellValue(
						"SELECT student_name,class_number,student_class,term from student_ledger where class_number='"
								+ classNumber + "' and year='" + year + "' AND term='"
								+ comboTerm.getSelectionModel().getSelectedItem() + "' LIMIT 1");
				if (studentName.next()) {

					studentNameHeader = studentName.getString(1);
					studentClass = studentName.getString(3);
					studentClassNumber = studentName.getString(2);
					studentTerm = studentName.getString(4);

				} else {
					studentNameHeader = "No Student Found";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			Calendar calendar = new GregorianCalendar();
			int Calyear = calendar.get(Calendar.YEAR);

			Paragraph pName = new Paragraph("Student Name:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellName = new PdfPCell(pName);
			cellName.setBorder(0);
			tableMaMalo.addCell(cellName);

			Paragraph pNameValue = new Paragraph(studentNameHeader,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellNameValue = new PdfPCell(pNameValue);
			cellNameValue.setBorder(0);
			tableMaMalo.addCell(cellNameValue);

			Paragraph pClassNumber = new Paragraph("Admission Number:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellClassNumber = new PdfPCell(pClassNumber);
			cellClassNumber.setBorder(0);
			tableMaMalo.addCell(cellClassNumber);

			Paragraph pClassNumberValue = new Paragraph(studentClassNumber,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellClassNumberValue = new PdfPCell(pClassNumberValue);
			cellClassNumberValue.setBorder(0);
			tableMaMalo.addCell(cellClassNumberValue);

			Paragraph pClass = new Paragraph("Student Class:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellClass = new PdfPCell(pClass);
			cellClass.setBorder(0);
			tableMaMalo.addCell(cellClass);

			Paragraph pClassValue = new Paragraph(studentClass,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellClassValue = new PdfPCell(pClassValue);
			cellClassValue.setBorder(0);
			tableMaMalo.addCell(cellClassValue);

			Paragraph pYearTerm = new Paragraph("Term,Year:",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK));
			PdfPCell cellYearTerm = new PdfPCell(pYearTerm);
			cellYearTerm.setBorder(0);
			tableMaMalo.addCell(cellYearTerm);

			Paragraph pYearValue = new Paragraph(studentTerm + "," + Calyear,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156)));
			PdfPCell cellYearValue = new PdfPCell(pYearValue);
			cellYearValue.setBorder(0);
			tableMaMalo.addCell(cellYearValue);

			tableMaMalo.setWidthPercentage(100);

			document.add(new Paragraph(""));

			document.add(tableMaMalo);

			document.add(new Paragraph(""));

			/******************************************************
			 * Adding Background image
			 ******************************************************/
			com.itextpdf.text.Image imageBackground = com.itextpdf.text.Image
					.getInstance(labelPath.getText() + "SchoolBadge.png");
			imageBackground.scaleToFit(document.getPageSize().getWidth(), document.getPageSize().getHeight());
			imageBackground.setAlignment(com.itextpdf.text.Image.UNDERLYING);
			imageBackground.setAbsolutePosition(0, 0);
			// document.add(imageBackground);

			/**************************************************
			 * Creating Table for the report card
			 **************************************************/

			table = new PdfPTable(17);
			table.setWidths(new float[] { 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2 });

			/********************************************************************
			 * Set General Heading...Column Span number should cover all columns
			 ********************************************************************/

			try {

				String fourdigits = "" + calendar.getTime();

				year = fourdigits.substring(fourdigits.length() - 4);

				studentName = generateCellValue("SELECT student_name from student_ledger where class_number='"
						+ classNumber + "' and year='" + year + "' LIMIT 1");
				if (studentName.next()) {

					studentNameHeader = studentName.getString(1);

				} else {
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			String lastLetter = studentNameHeader.substring(studentNameHeader.length() - 1);
			if (lastLetter.equals("s") || lastLetter.equals("S")) {
				paraheading = new Paragraph(
						studentNameHeader + "' " + comboTerm.getSelectionModel().getSelectedItem() + " Results, "
								+ Calyear,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.WHITE));
			} else {
				paraheading = new Paragraph(
						studentNameHeader + "'s " + comboTerm.getSelectionModel().getSelectedItem() + " Results, "
								+ Calyear,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 12, Font.BOLD, BaseColor.WHITE));
			}

			PdfPCell headerGeneral = new PdfPCell(paraheading);
			headerGeneral.setPadding(4);
			headerGeneral.setColspan(17);
			headerGeneral.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral.setBackgroundColor(new BaseColor(23, 176, 196));

			Paragraph paraheading1 = new Paragraph("SUBJECTS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE));
			PdfPCell headerGeneral1 = new PdfPCell(paraheading1);
			headerGeneral1.setPadding(3);
			headerGeneral1.setColspan(2);
			headerGeneral1.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral1.setBackgroundColor(new BaseColor(0, 126, 156));

			Paragraph paraheading2 = new Paragraph("MOT MARKS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE));
			PdfPCell headerGeneral2 = new PdfPCell(paraheading2);
			headerGeneral2.setPadding(5);
			headerGeneral2.setColspan(3);
			headerGeneral2.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral2.setBackgroundColor(new BaseColor(0, 126, 156));

			Paragraph paraheading3 = new Paragraph("EOT MARKS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE));
			PdfPCell headerGeneral3 = new PdfPCell(paraheading3);
			headerGeneral3.setPadding(5);
			headerGeneral3.setColspan(3);
			headerGeneral3.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral3.setBackgroundColor(new BaseColor(0, 126, 156));

			Paragraph paraheading4 = new Paragraph("FINAL SCORES",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE));
			PdfPCell headerGeneral4 = new PdfPCell(paraheading4);
			headerGeneral4.setPadding(5);
			headerGeneral4.setColspan(6);
			headerGeneral4.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral4.setBackgroundColor(new BaseColor(0, 126, 156));

			Paragraph paraheading5 = new Paragraph("POINTS & REMARKS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE));
			PdfPCell headerGeneral5 = new PdfPCell(paraheading5);
			headerGeneral5.setPadding(5);
			headerGeneral5.setColspan(3);
			headerGeneral5.setHorizontalAlignment(Element.ALIGN_CENTER);
			headerGeneral5.setBackgroundColor(new BaseColor(0, 126, 156));

			/**************************************************
			 * Creating header of each column...column span=1
			 **************************************************/

			PdfPCell header1 = new PdfPCell(
					new Paragraph("S/N", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header1.setColspan(1);
			header1.setHorizontalAlignment(Element.ALIGN_CENTER);
			header1.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header2 = new PdfPCell(new Paragraph("SUBJECT",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header2.setColspan(1);
			header2.setHorizontalAlignment(Element.ALIGN_CENTER);
			header2.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header3 = new PdfPCell(
					new Paragraph("P1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header3.setColspan(1);
			header3.setHorizontalAlignment(Element.ALIGN_CENTER);
			header3.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header4 = new PdfPCell(
					new Paragraph("P2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header4.setColspan(1);
			header4.setHorizontalAlignment(Element.ALIGN_CENTER);
			header4.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header5 = new PdfPCell(
					new Paragraph("P3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header5.setColspan(1);
			header5.setHorizontalAlignment(Element.ALIGN_CENTER);
			header5.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header6 = new PdfPCell(
					new Paragraph("P1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header6.setColspan(1);
			header6.setHorizontalAlignment(Element.ALIGN_CENTER);
			header6.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header7 = new PdfPCell(
					new Paragraph("P2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header7.setColspan(1);
			header7.setHorizontalAlignment(Element.ALIGN_CENTER);
			header7.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header8 = new PdfPCell(
					new Paragraph("P3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header8.setColspan(1);
			header8.setHorizontalAlignment(Element.ALIGN_CENTER);
			header8.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header9 = new PdfPCell(
					new Paragraph("Av1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header9.setColspan(1);
			header9.setHorizontalAlignment(Element.ALIGN_CENTER);
			header9.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header10 = new PdfPCell(
					new Paragraph("Gr1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header10.setColspan(1);
			header10.setHorizontalAlignment(Element.ALIGN_CENTER);
			header10.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header11 = new PdfPCell(
					new Paragraph("Av2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header11.setColspan(1);
			header11.setHorizontalAlignment(Element.ALIGN_CENTER);
			header11.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header12 = new PdfPCell(
					new Paragraph("Gr2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header12.setColspan(1);
			header12.setHorizontalAlignment(Element.ALIGN_CENTER);
			header12.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header13 = new PdfPCell(
					new Paragraph("Av3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header13.setColspan(1);
			header13.setHorizontalAlignment(Element.ALIGN_CENTER);
			header13.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header14 = new PdfPCell(
					new Paragraph("Gr3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header14.setColspan(1);
			header14.setHorizontalAlignment(Element.ALIGN_CENTER);
			header14.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header15 = new PdfPCell(new Paragraph("Point",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header15.setColspan(1);
			header15.setHorizontalAlignment(Element.ALIGN_CENTER);
			header15.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header16 = new PdfPCell(new Paragraph("Remarks",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header16.setColspan(1);
			header16.setHorizontalAlignment(Element.ALIGN_CENTER);
			header16.setBackgroundColor(BaseColor.ORANGE);

			PdfPCell header17 = new PdfPCell(new Paragraph("IN'Ls",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.WHITE)));
			header17.setColspan(1);
			header17.setHorizontalAlignment(Element.ALIGN_CENTER);
			header17.setBackgroundColor(BaseColor.ORANGE);

			/*****************************************************
			 * Adding the cells to the table and table to the doc
			 *****************************************************/
			table.setWidthPercentage(100);
			table.addCell(headerGeneral);
			table.addCell(headerGeneral1);
			table.addCell(headerGeneral2);
			table.addCell(headerGeneral3);
			table.addCell(headerGeneral4);
			table.addCell(headerGeneral5);
			table.addCell(header1);
			table.addCell(header2);
			table.addCell(header3);
			table.addCell(header4);
			table.addCell(header5);
			table.addCell(header6);
			table.addCell(header7);
			table.addCell(header8);
			table.addCell(header9);
			table.addCell(header10);
			table.addCell(header11);
			table.addCell(header12);
			table.addCell(header13);
			table.addCell(header14);
			table.addCell(header15);
			table.addCell(header16);
			table.addCell(header17);

			/************************************************************************
			 * First Subject and its marks
			 **************************************************************************/

			ResultSet Subject1;
			try {

				Subject1 = generateCellValue("SELECT subject_name from student_subjectsa where id=1");
				if (Subject1.next()) {
					subject1 = Subject1.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			PdfPCell cellNum1 = new PdfPCell(
					new Paragraph("1", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum1 = new PdfPCell(new Paragraph(subject1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum1);
			table.addCell(subNum1);
			ResultSet MoT1_1;
			try {

				MoT1_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT1_1.next()) {
					mot1_1 = MoT1_1.getString(1);

				} else {
					mot1_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT1_2;
			try {

				MoT1_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT1_2.next()) {
					mot1_2 = MoT1_2.getString(1);

				} else {
					mot1_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT1_3;
			try {

				MoT1_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT1_3.next()) {
					mot1_3 = MoT1_3.getString(1);

				} else {
					mot1_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT1_1;
			try {

				EoT1_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT1_1.next()) {
					eot1_1 = EoT1_1.getString(1);

				} else {
					eot1_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT1_2;
			try {

				EoT1_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT1_2.next()) {
					eot1_2 = EoT1_2.getString(1);

				} else {
					eot1_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT1_3;
			try {

				EoT1_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject1
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT1_3.next()) {
					eot1_3 = EoT1_3.getString(1);

				} else {
					eot1_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered1;
			try {

				Subjectoffered1 = generateCellValue("select `" + subject1
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered1.next()) {

					yes1 = Subjectoffered1.getInt(1);

				} else {
					yes1 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes1 == 1) {

				if (fieldPapers1.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot1_1 == null) && !(eot1_1.equals("-")) && !(eot1_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (intmot1_1 + inteot1_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_1 = "-";
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (inteot1_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_1 = "-";

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							subject1_1Avg = (intmot1_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_1 = "-";
							subject1_1Avg = -1;
						}
					}

					mot1_2 = "";
					eot1_2 = "";
					mot1_3 = "";
					eot1_3 = "";
					subject1_2Avg = -1;
					subject1_3Avg = -1;

				} else if (fieldPapers1.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot1_1 == null) && !(eot1_1.equals("-")) && !(eot1_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (intmot1_1 + inteot1_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_1 = "-";
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (inteot1_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_1 = "-";

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							subject1_1Avg = (intmot1_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_1 = "-";
							subject1_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot1_2 == null) && !(eot1_2.equals("-")) && !(eot1_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_2 == null) && !(mot1_2.equals("-")) && !(mot1_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_2 = Double.parseDouble(mot1_2);
							inteot1_2 = Double.parseDouble(eot1_2);
							subject1_2Avg = (intmot1_2 + inteot1_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_2 = "-";
							inteot1_2 = Double.parseDouble(eot1_2);
							subject1_2Avg = (inteot1_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_2 = "-";

						if (!(mot1_2 == null) && !(mot1_2.equals("-")) && !(mot1_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_2 = Double.parseDouble(mot1_2);
							subject1_2Avg = (intmot1_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_2 = "-";
							subject1_2Avg = -1;
						}
					}

					mot1_3 = "";
					eot1_3 = "";
					subject1_3Avg = -1;

				} else if (fieldPapers1.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot1_1 == null) && !(eot1_1.equals("-")) && !(eot1_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (intmot1_1 + inteot1_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_1 = "-";
							inteot1_1 = Double.parseDouble(eot1_1);
							subject1_1Avg = (inteot1_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_1 = "-";

						if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_1 = Double.parseDouble(mot1_1);
							subject1_1Avg = (intmot1_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_1 = "-";
							subject1_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot1_2 == null) && !(eot1_2.equals("-")) && !(eot1_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_2 == null) && !(mot1_2.equals("-")) && !(mot1_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_2 = Double.parseDouble(mot1_2);
							inteot1_2 = Double.parseDouble(eot1_2);
							subject1_2Avg = (intmot1_2 + inteot1_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_2 = "-";
							inteot1_2 = Double.parseDouble(eot1_2);
							subject1_2Avg = (inteot1_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_2 = "-";

						if (!(mot1_2 == null) && !(mot1_2.equals("-")) && !(mot1_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_2 = Double.parseDouble(mot1_2);
							subject1_2Avg = (intmot1_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_2 = "-";
							subject1_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot1_3 == null) && !(eot1_3.equals("-")) && !(eot1_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot1_3 == null) && !(mot1_3.equals("-")) && !(mot1_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot1_3 = Double.parseDouble(mot1_3);
							inteot1_3 = Double.parseDouble(eot1_3);
							subject1_3Avg = (intmot1_3 + inteot1_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot1_3 = "-";
							inteot1_3 = Double.parseDouble(eot1_3);
							subject1_3Avg = (inteot1_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot1_3 = "-";

						if (!(mot1_3 == null) && !(mot1_3.equals("-")) && !(mot1_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot1_3 = Double.parseDouble(mot1_3);
							subject1_3Avg = (intmot1_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot1_3 = "-";
							subject1_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot1_1 = "";
				eot1_1 = "";
				subject1_1Avg = -1;
				mot1_2 = "";
				eot1_2 = "";
				subject1_2Avg = -1;
				mot1_3 = "";
				eot1_3 = "";
				subject1_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot1_1 == null) && !(mot1_1.equals("-")) && !(mot1_1.equals(""))) {
				double colormot1_1 = Double.parseDouble(mot1_1);
				if (colormot1_1 <= 50) {
					mot1_1p = new Paragraph(mot1_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot1_1p = new Paragraph(mot1_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot1_1p = new Paragraph(mot1_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot1_2 == null) && !(mot1_2.equals("-")) && !(mot1_2.equals(""))) {
				double colormot1_2 = Double.parseDouble(mot1_2);
				if (colormot1_2 <= 50) {
					mot1_2p = new Paragraph(mot1_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot1_2p = new Paragraph(mot1_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot1_2p = new Paragraph(mot1_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot1_3 == null) && !(mot1_3.equals("-")) && !(mot1_3.equals(""))) {
				double colormot1_3 = Double.parseDouble(mot1_3);
				if (colormot1_3 <= 50) {
					mot1_3p = new Paragraph(mot1_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot1_3p = new Paragraph(mot1_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot1_3p = new Paragraph(mot1_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot1_1 == null) && !(eot1_1.equals("-")) && !(eot1_1.equals(""))) {
				double coloreot1_1 = Double.parseDouble(eot1_1);
				if (coloreot1_1 <= 50) {
					eot1_1p = new Paragraph(eot1_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot1_1p = new Paragraph(eot1_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot1_1p = new Paragraph(eot1_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot1_2 == null) && !(eot1_2.equals("-")) && !(eot1_2.equals(""))) {
				double coloreot1_2 = Double.parseDouble(eot1_2);
				if (coloreot1_2 <= 50) {
					eot1_2p = new Paragraph(eot1_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot1_2p = new Paragraph(eot1_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot1_2p = new Paragraph(eot1_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot1_3 == null) && !(eot1_3.equals("-")) && !(eot1_3.equals(""))) {
				double coloreot1_3 = Double.parseDouble(eot1_3);
				if (coloreot1_3 <= 50) {
					eot1_3p = new Paragraph(eot1_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot1_3p = new Paragraph(eot1_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot1_3p = new Paragraph(eot1_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot1_1 = new PdfPCell(mot1_1p);
			PdfPCell cellmot1_2 = new PdfPCell(mot1_2p);
			PdfPCell cellmot1_3 = new PdfPCell(mot1_3p);
			PdfPCell celleot1_1 = new PdfPCell(eot1_1p);
			PdfPCell celleot1_2 = new PdfPCell(eot1_2p);
			PdfPCell celleot1_3 = new PdfPCell(eot1_3p);

			table.addCell(cellmot1_1);
			table.addCell(cellmot1_2);
			table.addCell(cellmot1_3);

			table.addCell(celleot1_1);
			table.addCell(celleot1_2);
			table.addCell(celleot1_3);

			if (subject1_1Avg == -1) {
				cell1_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell1_1Avg = new PdfPCell(new Paragraph("" + subject1_1Avg));
			}

			if (subject1_2Avg == -1) {
				cell1_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell1_2Avg = new PdfPCell(new Paragraph("" + subject1_2Avg));
			}

			if (subject1_3Avg == -1) {
				cell1_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell1_3Avg = new PdfPCell(new Paragraph("" + subject1_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject1_1Avg > 0) {

				if (mot1_1.equals("-")) {
					SQL1_1 = "select DISTINCT (CASE WHEN " + subject1_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL1_1 = "select DISTINCT (CASE WHEN " + subject1_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade1_1;
				try {

					Grade1_1 = generateCellValue(SQL1_1);
					if (Grade1_1.next()) {
						grade1_1 = Grade1_1.getString(1);

					} else {
						grade1_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject1_1Avg = -1;
			}

			if (subject1_1Avg <= 0 || cell1_1Avg == null || cell1_1Avg.equals("")) {
				grade1_1 = "";
			} else {
				grade1_1 = grade1_1;
			}
			table.addCell(cell1_1Avg);
			table.addCell(grade1_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject1_2Avg > 0) {

				if (mot1_2.equals("-")) {

					SQL1_2 = "select DISTINCT (CASE WHEN " + subject1_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade1_2;
					try {

						Grade1_2 = generateCellValue(SQL1_2);
						if (Grade1_2.next()) {
							grade1_2 = Grade1_2.getString(1);

						} else {
							grade1_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL1_2 = "select DISTINCT (CASE WHEN " + subject1_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade1_2;
					try {

						Grade1_2 = generateCellValue(SQL1_2);
						if (Grade1_2.next()) {
							grade1_2 = Grade1_2.getString(1);

						} else {
							grade1_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject1_2Avg = -1;
			}

			if (subject1_2Avg <= 0 || cell1_2Avg == null || cell1_2Avg.equals("")) {
				grade1_2 = "";
			}
			table.addCell(cell1_2Avg);
			table.addCell(grade1_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject1_3Avg > 0) {

				if (mot1_3.equals("-")) {
					SQL1_3 = "select DISTINCT (CASE WHEN " + subject1_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade1_3;
					try {

						Grade1_3 = generateCellValue(SQL1_3);
						if (Grade1_3.next()) {
							grade1_3 = Grade1_3.getString(1);

						} else {
							grade1_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL1_3 = "select DISTINCT (CASE WHEN " + subject1_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject1
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject1 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject1_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject1 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade1_3;
					try {

						Grade1_3 = generateCellValue(SQL1_3);
						if (Grade1_3.next()) {
							grade1_3 = Grade1_3.getString(1);

						} else {
							grade1_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject1_3Avg = -1;
			}

			if (subject1_3Avg <= 0 || cell1_3Avg == null || cell1_3Avg.equals("")) {
				grade1_3 = "";
			}
			table.addCell(cell1_3Avg);
			table.addCell(grade1_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade1_1 == null) && !(grade1_1.equals(""))) {
				gradeValue1_1 = grade1_1.replaceAll("[^0-9]", "");
			} else {
				grade1_1 = "0";
				gradeValue1_1 = grade1_1.replaceAll("[^0-9]", "");
			}

			if (!(grade1_2 == null) && !(grade1_2.equals(""))) {
				gradeValue1_2 = grade1_2.replaceAll("[^0-9]", "");
			} else {
				grade1_2 = "0";
				gradeValue1_2 = grade1_2.replaceAll("[^0-9]", "");
			}

			if (!(grade1_3 == null) && !(grade1_3.equals(""))) {
				gradeValue1_3 = grade1_3.replaceAll("[^0-9]", "");
			} else {
				grade1_3 = "0";
				gradeValue1_3 = grade1_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue1_1.equals("")) {
				valuepaper1_1 = Double.parseDouble(gradeValue1_1);
			}

			if (!gradeValue1_2.equals("")) {
				valuepaper1_2 = Double.parseDouble(gradeValue1_2);
			}
			if (!gradeValue1_3.equals("")) {
				valuepaper1_3 = Double.parseDouble(gradeValue1_3);
			}

			if (fieldPapers1.getText().equals("1")) {
				averageValue = (valuepaper1_1);
			} else if (fieldPapers1.getText().equals("2")) {
				averageValue = (valuepaper1_1 + valuepaper1_2) / 2;
			} else if (fieldPapers1.getText().equals("3")) {
				averageValue = (valuepaper1_1 + valuepaper1_2 + valuepaper1_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "A";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "B";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "C";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "D";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA1c = new PdfPCell(gradeA1p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "E";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "O";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper1_1 == 9 || valuepaper1_2 == 9 || valuepaper1_3 == 9) {
					gradeA1 = "O";
				} else {
					gradeA1 = "F";
				}
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			if (averageValue <= 0) {

				gradeA1 = "";
				gradeA1p = new Paragraph(gradeA1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA1c = new PdfPCell(gradeA1p);
			}

			table.addCell(gradeA1c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA1.equals("A")) {
				pointA1 = 6;
				comment1 = "Excellent";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("B")) {
				pointA1 = 5;
				comment1 = "V.Good";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("C")) {
				pointA1 = 4;
				comment1 = "Good";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("D")) {
				pointA1 = 3;
				comment1 = "F.Good";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("E")) {
				pointA1 = 2;
				comment1 = "Fair";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("O")) {
				pointA1 = 1;
				comment1 = "Poor";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment1c = new PdfPCell(comment1p);
			} else if (gradeA1.equals("F")) {
				pointA1 = 0;
				comment1 = "V.Poor";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment1c = new PdfPCell(comment1p);
			} else {
				pointA1 = 0;
				comment1 = "";
				comment1p = new Paragraph(comment1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment1c = new PdfPCell(comment1p);
			}
			table.addCell(comment1c);

			table.addCell(new Paragraph(teachersInitials(subject1, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 2
			 ************************************************/

			ResultSet Subject2;
			try {

				Subject2 = generateCellValue("SELECT subject_name from student_subjectsa where id=2");
				if (Subject2.next()) {
					subject2 = Subject2.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum2 = new PdfPCell(
					new Paragraph("2", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum2 = new PdfPCell(new Paragraph(subject2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum2);
			table.addCell(subNum2);
			ResultSet MoT2_1;
			try {

				MoT2_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT2_1.next()) {
					mot2_1 = MoT2_1.getString(1);

				} else {
					mot2_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT2_2;
			try {

				MoT2_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT2_2.next()) {
					mot2_2 = MoT2_2.getString(1);

				} else {
					mot2_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT2_3;
			try {

				MoT2_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT2_3.next()) {
					mot2_3 = MoT2_3.getString(1);

				} else {
					mot2_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT2_1;
			try {

				EoT2_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT2_1.next()) {
					eot2_1 = EoT2_1.getString(1);

				} else {
					eot2_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT2_2;
			try {

				EoT2_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT2_2.next()) {
					eot2_2 = EoT2_2.getString(1);

				} else {
					eot2_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT2_3;
			try {

				EoT2_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject2
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT2_3.next()) {
					eot2_3 = EoT2_3.getString(1);

				} else {
					eot2_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered2;
			try {

				Subjectoffered2 = generateCellValue("select `" + subject2
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered2.next()) {

					yes2 = Subjectoffered2.getInt(1);

				} else {
					yes2 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			if (yes2 == 1) {

				if (fieldPapers2.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot2_1 == null) && !(eot2_1.equals("-")) && !(eot2_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (intmot2_1 + inteot2_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_1 = "-";
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (inteot2_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_1 = "-";

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							subject2_1Avg = (intmot2_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_1 = "-";
							subject2_1Avg = -1;
						}
					}

					mot2_2 = "";
					eot2_2 = "";
					mot2_3 = "";
					eot2_3 = "";
					subject2_2Avg = -1;
					subject2_3Avg = -1;

				} else if (fieldPapers2.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot2_1 == null) && !(eot2_1.equals("-")) && !(eot2_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (intmot2_1 + inteot2_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_1 = "-";
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (inteot2_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_1 = "-";

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							subject2_1Avg = (intmot2_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_1 = "-";
							subject2_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot2_2 == null) && !(eot2_2.equals("-")) && !(eot2_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_2 == null) && !(mot2_2.equals("-")) && !(mot2_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_2 = Double.parseDouble(mot2_2);
							inteot2_2 = Double.parseDouble(eot2_2);
							subject2_2Avg = (intmot2_2 + inteot2_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_2 = "-";
							inteot2_2 = Double.parseDouble(eot2_2);
							subject2_2Avg = (inteot2_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_2 = "-";

						if (!(mot2_2 == null) && !(mot2_2.equals("-")) && !(mot2_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_2 = Double.parseDouble(mot2_2);
							subject2_2Avg = (intmot2_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_2 = "-";
							subject2_2Avg = -1;
						}
					}

					mot2_3 = "";
					eot2_3 = "";
					subject2_3Avg = -1;

				} else if (fieldPapers2.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot2_1 == null) && !(eot2_1.equals("-")) && !(eot2_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (intmot2_1 + inteot2_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_1 = "-";
							inteot2_1 = Double.parseDouble(eot2_1);
							subject2_1Avg = (inteot2_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_1 = "-";

						if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_1 = Double.parseDouble(mot2_1);
							subject2_1Avg = (intmot2_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_1 = "-";
							subject2_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot2_2 == null) && !(eot2_2.equals("-")) && !(eot2_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_2 == null) && !(mot2_2.equals("-")) && !(mot2_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_2 = Double.parseDouble(mot2_2);
							inteot2_2 = Double.parseDouble(eot2_2);
							subject2_2Avg = (intmot2_2 + inteot2_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_2 = "-";
							inteot2_2 = Double.parseDouble(eot2_2);
							subject2_2Avg = (inteot2_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_2 = "-";

						if (!(mot2_2 == null) && !(mot2_2.equals("-")) && !(mot2_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_2 = Double.parseDouble(mot2_2);
							subject2_2Avg = (intmot2_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_2 = "-";
							subject2_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot2_3 == null) && !(eot2_3.equals("-")) && !(eot2_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot2_3 == null) && !(mot2_3.equals("-")) && !(mot2_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot2_3 = Double.parseDouble(mot2_3);
							inteot2_3 = Double.parseDouble(eot2_3);
							subject2_3Avg = (intmot2_3 + inteot2_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot2_3 = "-";
							inteot2_3 = Double.parseDouble(eot2_3);
							subject2_3Avg = (inteot2_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot2_3 = "-";

						if (!(mot2_3 == null) && !(mot2_3.equals("-")) && !(mot2_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot2_3 = Double.parseDouble(mot2_3);
							subject2_3Avg = (intmot2_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot2_3 = "-";
							subject2_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot2_1 = "";
				eot2_1 = "";
				subject2_1Avg = -1;
				mot2_2 = "";
				eot2_2 = "";
				subject2_2Avg = -1;
				mot2_3 = "";
				eot2_3 = "";
				subject2_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot2_1 == null) && !(mot2_1.equals("-")) && !(mot2_1.equals(""))) {
				double colormot2_1 = Double.parseDouble(mot2_1);
				if (colormot2_1 <= 50) {
					mot2_1p = new Paragraph(mot2_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot2_1p = new Paragraph(mot2_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot2_1p = new Paragraph(mot2_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot2_2 == null) && !(mot2_2.equals("-")) && !(mot2_2.equals(""))) {
				double colormot2_2 = Double.parseDouble(mot2_2);
				if (colormot2_2 <= 50) {
					mot2_2p = new Paragraph(mot2_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot2_2p = new Paragraph(mot2_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot2_2p = new Paragraph(mot2_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot2_3 == null) && !(mot2_3.equals("-")) && !(mot2_3.equals(""))) {
				double colormot2_3 = Double.parseDouble(mot2_3);
				if (colormot2_3 <= 50) {
					mot2_3p = new Paragraph(mot2_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot2_3p = new Paragraph(mot2_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot2_3p = new Paragraph(mot2_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot2_1 == null) && !(eot2_1.equals("-")) && !(eot2_1.equals(""))) {
				double coloreot2_1 = Double.parseDouble(eot2_1);
				if (coloreot2_1 <= 50) {
					eot2_1p = new Paragraph(eot2_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot2_1p = new Paragraph(eot2_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot2_1p = new Paragraph(eot2_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot2_2 == null) && !(eot2_2.equals("-")) && !(eot2_2.equals(""))) {
				double coloreot2_2 = Double.parseDouble(eot2_2);
				if (coloreot2_2 <= 50) {
					eot2_2p = new Paragraph(eot2_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot2_2p = new Paragraph(eot2_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot2_2p = new Paragraph(eot2_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot2_3 == null) && !(eot2_3.equals("-")) && !(eot2_3.equals(""))) {
				double coloreot2_3 = Double.parseDouble(eot2_3);
				if (coloreot2_3 <= 50) {
					eot2_3p = new Paragraph(eot2_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot2_3p = new Paragraph(eot2_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot2_3p = new Paragraph(eot2_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot2_1 = new PdfPCell(mot2_1p);
			PdfPCell cellmot2_2 = new PdfPCell(mot2_2p);
			PdfPCell cellmot2_3 = new PdfPCell(mot2_3p);
			PdfPCell celleot2_1 = new PdfPCell(eot2_1p);
			PdfPCell celleot2_2 = new PdfPCell(eot2_2p);
			PdfPCell celleot2_3 = new PdfPCell(eot2_3p);

			table.addCell(cellmot2_1);
			table.addCell(cellmot2_2);
			table.addCell(cellmot2_3);

			table.addCell(celleot2_1);
			table.addCell(celleot2_2);
			table.addCell(celleot2_3);

			if (subject2_1Avg == -1) {
				cell2_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell2_1Avg = new PdfPCell(new Paragraph("" + subject2_1Avg));
			}

			if (subject2_2Avg == -1) {
				cell2_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell2_2Avg = new PdfPCell(new Paragraph("" + subject2_2Avg));
			}

			if (subject2_3Avg == -1) {
				cell2_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell2_3Avg = new PdfPCell(new Paragraph("" + subject2_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject2_1Avg > 0) {

				if (mot2_1.equals("-")) {
					SQL2_1 = "select DISTINCT (CASE WHEN " + subject2_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL2_1 = "select DISTINCT (CASE WHEN " + subject2_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade2_1;
				try {

					Grade2_1 = generateCellValue(SQL2_1);
					if (Grade2_1.next()) {
						grade2_1 = Grade2_1.getString(1);

					} else {
						grade2_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject2_1Avg = -1;
			}

			if (subject2_1Avg <= 0 || cell2_1Avg == null || cell2_1Avg.equals("")) {
				grade2_1 = "";
			} else {
				grade2_1 = grade2_1;
			}
			table.addCell(cell2_1Avg);
			table.addCell(grade2_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject2_2Avg > 0) {

				if (mot2_2.equals("-")) {

					SQL2_2 = "select DISTINCT (CASE WHEN " + subject2_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade2_2;
					try {

						Grade2_2 = generateCellValue(SQL2_2);
						if (Grade2_2.next()) {
							grade2_2 = Grade2_2.getString(1);

						} else {
							grade2_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL2_2 = "select DISTINCT (CASE WHEN " + subject2_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade2_2;
					try {

						Grade2_2 = generateCellValue(SQL2_2);
						if (Grade2_2.next()) {
							grade2_2 = Grade2_2.getString(1);

						} else {
							grade2_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject2_2Avg = -1;
			}

			if (subject2_2Avg <= 0 || cell2_2Avg == null || cell2_2Avg.equals("")) {
				grade2_2 = "";
			}
			table.addCell(cell2_2Avg);
			table.addCell(grade2_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject2_3Avg > 0) {

				if (mot2_3.equals("-")) {
					SQL2_3 = "select DISTINCT (CASE WHEN " + subject2_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade2_3;
					try {

						Grade2_3 = generateCellValue(SQL2_3);
						if (Grade2_3.next()) {
							grade2_3 = Grade2_3.getString(1);

						} else {
							grade2_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL2_3 = "select DISTINCT (CASE WHEN " + subject2_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject2
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject2 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject2_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject2 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade2_3;
					try {

						Grade2_3 = generateCellValue(SQL2_3);
						if (Grade2_3.next()) {
							grade2_3 = Grade2_3.getString(1);

						} else {
							grade2_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject2_3Avg = -1;
			}

			if (subject2_3Avg <= 0 || cell2_3Avg == null || cell2_3Avg.equals("")) {
				grade2_3 = "";
			}
			table.addCell(cell2_3Avg);
			table.addCell(grade2_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade2_1 == null) && !(grade2_1.equals(""))) {
				gradeValue2_1 = grade2_1.replaceAll("[^0-9]", "");
			} else {
				grade2_1 = "0";
				gradeValue2_1 = grade2_1.replaceAll("[^0-9]", "");
			}

			if (!(grade2_2 == null) && !(grade2_2.equals(""))) {
				gradeValue2_2 = grade2_2.replaceAll("[^0-9]", "");
			} else {
				grade2_2 = "0";
				gradeValue2_2 = grade2_2.replaceAll("[^0-9]", "");
			}

			if (!(grade2_3 == null) && !(grade2_3.equals(""))) {
				gradeValue2_3 = grade2_3.replaceAll("[^0-9]", "");
			} else {
				grade2_3 = "0";
				gradeValue2_3 = grade2_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue2_1.equals("")) {
				valuepaper2_1 = Double.parseDouble(gradeValue2_1);
			}

			if (!gradeValue2_2.equals("")) {
				valuepaper2_2 = Double.parseDouble(gradeValue2_2);
			}
			if (!gradeValue2_3.equals("")) {
				valuepaper2_3 = Double.parseDouble(gradeValue2_3);
			}

			if (fieldPapers2.getText().equals("1")) {
				averageValue = (valuepaper2_1);
			} else if (fieldPapers2.getText().equals("2")) {
				averageValue = (valuepaper2_1 + valuepaper2_2) / 2;
			} else if (fieldPapers2.getText().equals("3")) {
				averageValue = (valuepaper2_1 + valuepaper2_2 + valuepaper2_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "A";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "B";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "C";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "D";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA2c = new PdfPCell(gradeA2p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "E";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "O";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper2_1 == 9 || valuepaper2_2 == 9 || valuepaper2_3 == 9) {
					gradeA2 = "O";
				} else {
					gradeA2 = "F";
				}
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			if (averageValue <= 0) {
				gradeA2 = "";
				gradeA2p = new Paragraph(gradeA2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA2c = new PdfPCell(gradeA2p);
			}

			table.addCell(gradeA2c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA2.equals("A")) {
				pointA2 = 6;
				comment2 = "Excellent";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("B")) {
				pointA2 = 5;
				comment2 = "V.Good";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("C")) {
				pointA2 = 4;
				comment2 = "Good";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("D")) {
				pointA2 = 3;
				comment2 = "F.Good";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("E")) {
				pointA2 = 2;
				comment2 = "Fair";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("O")) {
				pointA2 = 1;
				comment2 = "Poor";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment2c = new PdfPCell(comment2p);
			} else if (gradeA2.equals("F")) {
				pointA2 = 0;
				comment2 = "V.Poor";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment2c = new PdfPCell(comment2p);
			} else {
				pointA2 = 0;
				comment2 = "";
				comment2p = new Paragraph(comment2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment2c = new PdfPCell(comment2p);
			}
			table.addCell(comment2c);

			table.addCell(new Paragraph(teachersInitials(subject2, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 3
			 ************************************************/

			ResultSet Subject3;
			try {

				Subject3 = generateCellValue("SELECT subject_name from student_subjectsa where id=3");
				if (Subject3.next()) {
					subject3 = Subject3.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum3 = new PdfPCell(
					new Paragraph("3", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum3 = new PdfPCell(new Paragraph(subject3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum3);
			table.addCell(subNum3);
			ResultSet MoT3_1;
			try {

				MoT3_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT3_1.next()) {
					mot3_1 = MoT3_1.getString(1);

				} else {
					mot3_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT3_2;
			try {

				MoT3_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT3_2.next()) {
					mot3_2 = MoT3_2.getString(1);

				} else {
					mot3_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT3_3;
			try {

				MoT3_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT3_3.next()) {
					mot3_3 = MoT3_3.getString(1);

				} else {
					mot3_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT3_1;
			try {

				EoT3_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT3_1.next()) {
					eot3_1 = EoT3_1.getString(1);

				} else {
					eot3_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT3_2;
			try {

				EoT3_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT3_2.next()) {
					eot3_2 = EoT3_2.getString(1);

				} else {
					eot3_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT3_3;
			try {

				EoT3_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject3
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT3_3.next()) {
					eot3_3 = EoT3_3.getString(1);

				} else {
					eot3_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered3;
			try {

				Subjectoffered3 = generateCellValue("select `" + subject3
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered3.next()) {

					yes3 = Subjectoffered3.getInt(1);

				} else {
					yes3 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes3 == 1) {

				if (fieldPapers3.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot3_1 == null) && !(eot3_1.equals("-")) && !(eot3_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (intmot3_1 + inteot3_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_1 = "-";
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (inteot3_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_1 = "-";

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							subject3_1Avg = (intmot3_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_1 = "-";
							subject3_1Avg = -1;
						}
					}

					mot3_2 = "";
					eot3_2 = "";
					mot3_3 = "";
					eot3_3 = "";
					subject3_2Avg = -1;
					subject3_3Avg = -1;

				} else if (fieldPapers3.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot3_1 == null) && !(eot3_1.equals("-")) && !(eot3_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (intmot3_1 + inteot3_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_1 = "-";
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (inteot3_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_1 = "-";

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							subject3_1Avg = (intmot3_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_1 = "-";
							subject3_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot3_2 == null) && !(eot3_2.equals("-")) && !(eot3_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_2 == null) && !(mot3_2.equals("-")) && !(mot3_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_2 = Double.parseDouble(mot3_2);
							inteot3_2 = Double.parseDouble(eot3_2);
							subject3_2Avg = (intmot3_2 + inteot3_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_2 = "-";
							inteot3_2 = Double.parseDouble(eot3_2);
							subject3_2Avg = (inteot3_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_2 = "-";

						if (!(mot3_2 == null) && !(mot3_2.equals("-")) && !(mot3_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_2 = Double.parseDouble(mot3_2);
							subject3_2Avg = (intmot3_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_2 = "-";
							subject3_2Avg = -1;
						}
					}

					mot3_3 = "";
					eot3_3 = "";
					subject3_3Avg = -1;

				} else if (fieldPapers3.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot3_1 == null) && !(eot3_1.equals("-")) && !(eot3_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (intmot3_1 + inteot3_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_1 = "-";
							inteot3_1 = Double.parseDouble(eot3_1);
							subject3_1Avg = (inteot3_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_1 = "-";

						if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_1 = Double.parseDouble(mot3_1);
							subject3_1Avg = (intmot3_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_1 = "-";
							subject3_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot3_2 == null) && !(eot3_2.equals("-")) && !(eot3_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_2 == null) && !(mot3_2.equals("-")) && !(mot3_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_2 = Double.parseDouble(mot3_2);
							inteot3_2 = Double.parseDouble(eot3_2);
							subject3_2Avg = (intmot3_2 + inteot3_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_2 = "-";
							inteot3_2 = Double.parseDouble(eot3_2);
							subject3_2Avg = (inteot3_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_2 = "-";

						if (!(mot3_2 == null) && !(mot3_2.equals("-")) && !(mot3_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_2 = Double.parseDouble(mot3_2);
							subject3_2Avg = (intmot3_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_2 = "-";
							subject3_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot3_3 == null) && !(eot3_3.equals("-")) && !(eot3_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot3_3 == null) && !(mot3_3.equals("-")) && !(mot3_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot3_3 = Double.parseDouble(mot3_3);
							inteot3_3 = Double.parseDouble(eot3_3);
							subject3_3Avg = (intmot3_3 + inteot3_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot3_3 = "-";
							inteot3_3 = Double.parseDouble(eot3_3);
							subject3_3Avg = (inteot3_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot3_3 = "-";

						if (!(mot3_3 == null) && !(mot3_3.equals("-")) && !(mot3_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot3_3 = Double.parseDouble(mot3_3);
							subject3_3Avg = (intmot3_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot3_3 = "-";
							subject3_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot3_1 = "";
				eot3_1 = "";
				subject3_1Avg = -1;
				mot3_2 = "";
				eot3_2 = "";
				subject3_2Avg = -1;
				mot3_3 = "";
				eot3_3 = "";
				subject3_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot3_1 == null) && !(mot3_1.equals("-")) && !(mot3_1.equals(""))) {
				double colormot3_1 = Double.parseDouble(mot3_1);
				if (colormot3_1 <= 50) {
					mot3_1p = new Paragraph(mot3_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot3_1p = new Paragraph(mot3_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot3_1p = new Paragraph(mot3_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot3_2 == null) && !(mot3_2.equals("-")) && !(mot3_2.equals(""))) {
				double colormot3_2 = Double.parseDouble(mot3_2);
				if (colormot3_2 <= 50) {
					mot3_2p = new Paragraph(mot3_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot3_2p = new Paragraph(mot3_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot3_2p = new Paragraph(mot3_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot3_3 == null) && !(mot3_3.equals("-")) && !(mot3_3.equals(""))) {
				double colormot3_3 = Double.parseDouble(mot3_3);
				if (colormot3_3 <= 50) {
					mot3_3p = new Paragraph(mot3_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot3_3p = new Paragraph(mot3_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot3_3p = new Paragraph(mot3_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot3_1 == null) && !(eot3_1.equals("-")) && !(eot3_1.equals(""))) {
				double coloreot3_1 = Double.parseDouble(eot3_1);
				if (coloreot3_1 <= 50) {
					eot3_1p = new Paragraph(eot3_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot3_1p = new Paragraph(eot3_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot3_1p = new Paragraph(eot3_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot3_2 == null) && !(eot3_2.equals("-")) && !(eot3_2.equals(""))) {
				double coloreot3_2 = Double.parseDouble(eot3_2);
				if (coloreot3_2 <= 50) {
					eot3_2p = new Paragraph(eot3_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot3_2p = new Paragraph(eot3_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot3_2p = new Paragraph(eot3_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot3_3 == null) && !(eot3_3.equals("-")) && !(eot3_3.equals(""))) {
				double coloreot3_3 = Double.parseDouble(eot3_3);
				if (coloreot3_3 <= 50) {
					eot3_3p = new Paragraph(eot3_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot3_3p = new Paragraph(eot3_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot3_3p = new Paragraph(eot3_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot3_1 = new PdfPCell(mot3_1p);
			PdfPCell cellmot3_2 = new PdfPCell(mot3_2p);
			PdfPCell cellmot3_3 = new PdfPCell(mot3_3p);
			PdfPCell celleot3_1 = new PdfPCell(eot3_1p);
			PdfPCell celleot3_2 = new PdfPCell(eot3_2p);
			PdfPCell celleot3_3 = new PdfPCell(eot3_3p);

			table.addCell(cellmot3_1);
			table.addCell(cellmot3_2);
			table.addCell(cellmot3_3);

			table.addCell(celleot3_1);
			table.addCell(celleot3_2);
			table.addCell(celleot3_3);

			if (subject3_1Avg == -1) {
				cell3_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell3_1Avg = new PdfPCell(new Paragraph("" + subject3_1Avg));
			}

			if (subject3_2Avg == -1) {
				cell3_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell3_2Avg = new PdfPCell(new Paragraph("" + subject3_2Avg));
			}

			if (subject3_3Avg == -1) {
				cell3_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell3_3Avg = new PdfPCell(new Paragraph("" + subject3_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject3_1Avg > 0) {

				if (mot3_1.equals("-")) {
					SQL3_1 = "select DISTINCT (CASE WHEN " + subject3_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL3_1 = "select DISTINCT (CASE WHEN " + subject3_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade3_1;
				try {

					Grade3_1 = generateCellValue(SQL3_1);
					if (Grade3_1.next()) {
						grade3_1 = Grade3_1.getString(1);

					} else {
						grade3_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject3_1Avg = -1;
			}

			if (subject3_1Avg <= 0 || cell3_1Avg == null || cell3_1Avg.equals("")) {
				grade3_1 = "";
			} else {
				grade3_1 = grade3_1;
			}
			table.addCell(cell3_1Avg);
			table.addCell(grade3_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject3_2Avg > 0) {

				if (mot3_2.equals("-")) {

					SQL3_2 = "select DISTINCT (CASE WHEN " + subject3_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade3_2;
					try {

						Grade3_2 = generateCellValue(SQL3_2);
						if (Grade3_2.next()) {
							grade3_2 = Grade3_2.getString(1);

						} else {
							grade3_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL3_2 = "select DISTINCT (CASE WHEN " + subject3_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade3_2;
					try {

						Grade3_2 = generateCellValue(SQL3_2);
						if (Grade3_2.next()) {
							grade3_2 = Grade3_2.getString(1);

						} else {
							grade3_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject3_2Avg = -1;
			}

			if (subject3_2Avg <= 0 || cell3_2Avg == null || cell3_2Avg.equals("")) {
				grade3_2 = "";
			}
			table.addCell(cell3_2Avg);
			table.addCell(grade3_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject3_3Avg > 0) {

				if (mot3_3.equals("-")) {
					SQL3_3 = "select DISTINCT (CASE WHEN " + subject3_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade3_3;
					try {

						Grade3_3 = generateCellValue(SQL3_3);
						if (Grade3_3.next()) {
							grade3_3 = Grade3_3.getString(1);

						} else {
							grade3_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL3_3 = "select DISTINCT (CASE WHEN " + subject3_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject3
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject3 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject3_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject3 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade3_3;
					try {

						Grade3_3 = generateCellValue(SQL3_3);
						if (Grade3_3.next()) {
							grade3_3 = Grade3_3.getString(1);

						} else {
							grade3_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject3_3Avg = -1;
			}

			if (subject3_3Avg <= 0 || cell3_3Avg == null || cell3_3Avg.equals("")) {
				grade3_3 = "";
			}
			table.addCell(cell3_3Avg);
			table.addCell(grade3_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade3_1 == null) && !(grade3_1.equals(""))) {
				gradeValue3_1 = grade3_1.replaceAll("[^0-9]", "");
			} else {
				grade3_1 = "0";
				gradeValue3_1 = grade3_1.replaceAll("[^0-9]", "");
			}

			if (!(grade3_2 == null) && !(grade3_2.equals(""))) {
				gradeValue3_2 = grade3_2.replaceAll("[^0-9]", "");
			} else {
				grade3_2 = "0";
				gradeValue3_2 = grade3_2.replaceAll("[^0-9]", "");
			}

			if (!(grade3_3 == null) && !(grade3_3.equals(""))) {
				gradeValue3_3 = grade3_3.replaceAll("[^0-9]", "");
			} else {
				grade3_3 = "0";
				gradeValue3_3 = grade3_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue3_1.equals("")) {
				valuepaper3_1 = Double.parseDouble(gradeValue3_1);
			}

			if (!gradeValue3_2.equals("")) {
				valuepaper3_2 = Double.parseDouble(gradeValue3_2);
			}
			if (!gradeValue3_3.equals("")) {
				valuepaper3_3 = Double.parseDouble(gradeValue3_3);
			}

			if (fieldPapers3.getText().equals("1")) {
				averageValue = (valuepaper3_1);
			} else if (fieldPapers3.getText().equals("2")) {
				averageValue = (valuepaper3_1 + valuepaper3_2) / 2;
			} else if (fieldPapers3.getText().equals("3")) {
				averageValue = (valuepaper3_1 + valuepaper3_2 + valuepaper3_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "A";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "B";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "C";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "D";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA3c = new PdfPCell(gradeA3p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "E";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "O";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper3_1 == 9 || valuepaper3_2 == 9 || valuepaper3_3 == 9) {
					gradeA3 = "O";
				} else {
					gradeA3 = "F";
				}
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			if (averageValue <= 0) {
				gradeA3 = "";
				gradeA3p = new Paragraph(gradeA3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA3c = new PdfPCell(gradeA3p);
			}

			table.addCell(gradeA3c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA3.equals("A")) {
				pointA3 = 6;
				comment3 = "Excellent";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("B")) {
				pointA3 = 5;
				comment3 = "V.Good";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("C")) {
				pointA3 = 4;
				comment3 = "Good";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("D")) {
				pointA3 = 3;
				comment3 = "F.Good";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("E")) {
				pointA3 = 2;
				comment3 = "Fair";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("O")) {
				pointA3 = 1;
				comment3 = "Poor";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment3c = new PdfPCell(comment3p);
			} else if (gradeA3.equals("F")) {
				pointA3 = 0;
				comment3 = "V.Poor";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment3c = new PdfPCell(comment3p);
			} else {
				pointA3 = 0;
				comment3 = "";
				comment3p = new Paragraph(comment3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment3c = new PdfPCell(comment3p);
			}
			table.addCell(comment3c);

			table.addCell(new Paragraph(teachersInitials(subject3, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 4
			 ************************************************/

			ResultSet Subject4;
			try {

				Subject4 = generateCellValue("SELECT subject_name from student_subjectsa where id=4");
				if (Subject4.next()) {
					subject4 = Subject4.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum4 = new PdfPCell(
					new Paragraph("4", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum4 = new PdfPCell(new Paragraph(subject4,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum4);
			table.addCell(subNum4);
			ResultSet MoT4_1;
			try {

				MoT4_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT4_1.next()) {
					mot4_1 = MoT4_1.getString(1);

				} else {
					mot4_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT4_2;
			try {

				MoT4_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT4_2.next()) {
					mot4_2 = MoT4_2.getString(1);

				} else {
					mot4_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT4_3;
			try {

				MoT4_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT4_3.next()) {
					mot4_3 = MoT4_3.getString(1);

				} else {
					mot4_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT4_1;
			try {

				EoT4_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT4_1.next()) {
					eot4_1 = EoT4_1.getString(1);

				} else {
					eot4_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT4_2;
			try {

				EoT4_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT4_2.next()) {
					eot4_2 = EoT4_2.getString(1);

				} else {
					eot4_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT4_3;
			try {

				EoT4_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject4
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT4_3.next()) {
					eot4_3 = EoT4_3.getString(1);

				} else {
					eot4_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered4;
			try {

				Subjectoffered4 = generateCellValue("select `" + subject4
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered4.next()) {

					yes4 = Subjectoffered4.getInt(1);

				} else {
					yes4 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes4 == 1) {

				if (fieldPapers4.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot4_1 == null) && !(eot4_1.equals("-")) && !(eot4_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (intmot4_1 + inteot4_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_1 = "-";
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (inteot4_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_1 = "-";

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							subject4_1Avg = (intmot4_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_1 = "-";
							subject4_1Avg = -1;
						}
					}

					mot4_2 = "";
					eot4_2 = "";
					mot4_3 = "";
					eot4_3 = "";
					subject4_2Avg = -1;
					subject4_3Avg = -1;

				} else if (fieldPapers4.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot4_1 == null) && !(eot4_1.equals("-")) && !(eot4_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (intmot4_1 + inteot4_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_1 = "-";
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (inteot4_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_1 = "-";

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							subject4_1Avg = (intmot4_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_1 = "-";
							subject4_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot4_2 == null) && !(eot4_2.equals("-")) && !(eot4_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_2 == null) && !(mot4_2.equals("-")) && !(mot4_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_2 = Double.parseDouble(mot4_2);
							inteot4_2 = Double.parseDouble(eot4_2);
							subject4_2Avg = (intmot4_2 + inteot4_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_2 = "-";
							inteot4_2 = Double.parseDouble(eot4_2);
							subject4_2Avg = (inteot4_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_2 = "-";

						if (!(mot4_2 == null) && !(mot4_2.equals("-")) && !(mot4_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_2 = Double.parseDouble(mot4_2);
							subject4_2Avg = (intmot4_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_2 = "-";
							subject4_2Avg = -1;
						}
					}

					mot4_3 = "";
					eot4_3 = "";
					subject4_3Avg = -1;

				} else if (fieldPapers4.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot4_1 == null) && !(eot4_1.equals("-")) && !(eot4_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (intmot4_1 + inteot4_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_1 = "-";
							inteot4_1 = Double.parseDouble(eot4_1);
							subject4_1Avg = (inteot4_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_1 = "-";

						if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_1 = Double.parseDouble(mot4_1);
							subject4_1Avg = (intmot4_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_1 = "-";
							subject4_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot4_2 == null) && !(eot4_2.equals("-")) && !(eot4_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_2 == null) && !(mot4_2.equals("-")) && !(mot4_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_2 = Double.parseDouble(mot4_2);
							inteot4_2 = Double.parseDouble(eot4_2);
							subject4_2Avg = (intmot4_2 + inteot4_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_2 = "-";
							inteot4_2 = Double.parseDouble(eot4_2);
							subject4_2Avg = (inteot4_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_2 = "-";

						if (!(mot4_2 == null) && !(mot4_2.equals("-")) && !(mot4_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_2 = Double.parseDouble(mot4_2);
							subject4_2Avg = (intmot4_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_2 = "-";
							subject4_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot4_3 == null) && !(eot4_3.equals("-")) && !(eot4_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot4_3 == null) && !(mot4_3.equals("-")) && !(mot4_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot4_3 = Double.parseDouble(mot4_3);
							inteot4_3 = Double.parseDouble(eot4_3);
							subject4_3Avg = (intmot4_3 + inteot4_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot4_3 = "-";
							inteot4_3 = Double.parseDouble(eot4_3);
							subject4_3Avg = (inteot4_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot4_3 = "-";

						if (!(mot4_3 == null) && !(mot4_3.equals("-")) && !(mot4_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot4_3 = Double.parseDouble(mot4_3);
							subject4_3Avg = (intmot4_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot4_3 = "-";
							subject4_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot4_1 = "";
				eot4_1 = "";
				subject4_1Avg = -1;
				mot4_2 = "";
				eot4_2 = "";
				subject4_2Avg = -1;
				mot4_3 = "";
				eot4_3 = "";
				subject4_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot4_1 == null) && !(mot4_1.equals("-")) && !(mot4_1.equals(""))) {
				double colormot4_1 = Double.parseDouble(mot4_1);
				if (colormot4_1 <= 50) {
					mot4_1p = new Paragraph(mot4_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot4_1p = new Paragraph(mot4_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot4_1p = new Paragraph(mot4_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot4_2 == null) && !(mot4_2.equals("-")) && !(mot4_2.equals(""))) {
				double colormot4_2 = Double.parseDouble(mot4_2);
				if (colormot4_2 <= 50) {
					mot4_2p = new Paragraph(mot4_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot4_2p = new Paragraph(mot4_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot4_2p = new Paragraph(mot4_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot4_3 == null) && !(mot4_3.equals("-")) && !(mot4_3.equals(""))) {
				double colormot4_3 = Double.parseDouble(mot4_3);
				if (colormot4_3 <= 50) {
					mot4_3p = new Paragraph(mot4_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot4_3p = new Paragraph(mot4_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot4_3p = new Paragraph(mot4_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot4_1 == null) && !(eot4_1.equals("-")) && !(eot4_1.equals(""))) {
				double coloreot4_1 = Double.parseDouble(eot4_1);
				if (coloreot4_1 <= 50) {
					eot4_1p = new Paragraph(eot4_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot4_1p = new Paragraph(eot4_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot4_1p = new Paragraph(eot4_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot4_2 == null) && !(eot4_2.equals("-")) && !(eot4_2.equals(""))) {
				double coloreot4_2 = Double.parseDouble(eot4_2);
				if (coloreot4_2 <= 50) {
					eot4_2p = new Paragraph(eot4_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot4_2p = new Paragraph(eot4_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot4_2p = new Paragraph(eot4_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot4_3 == null) && !(eot4_3.equals("-")) && !(eot4_3.equals(""))) {
				double coloreot4_3 = Double.parseDouble(eot4_3);
				if (coloreot4_3 <= 50) {
					eot4_3p = new Paragraph(eot4_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot4_3p = new Paragraph(eot4_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot4_3p = new Paragraph(eot4_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot4_1 = new PdfPCell(mot4_1p);
			PdfPCell cellmot4_2 = new PdfPCell(mot4_2p);
			PdfPCell cellmot4_3 = new PdfPCell(mot4_3p);
			PdfPCell celleot4_1 = new PdfPCell(eot4_1p);
			PdfPCell celleot4_2 = new PdfPCell(eot4_2p);
			PdfPCell celleot4_3 = new PdfPCell(eot4_3p);

			table.addCell(cellmot4_1);
			table.addCell(cellmot4_2);
			table.addCell(cellmot4_3);

			table.addCell(celleot4_1);
			table.addCell(celleot4_2);
			table.addCell(celleot4_3);

			if (subject4_1Avg == -1) {
				cell4_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell4_1Avg = new PdfPCell(new Paragraph("" + subject4_1Avg));
			}

			if (subject4_2Avg == -1) {
				cell4_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell4_2Avg = new PdfPCell(new Paragraph("" + subject4_2Avg));
			}

			if (subject4_3Avg == -1) {
				cell4_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell4_3Avg = new PdfPCell(new Paragraph("" + subject4_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject4_1Avg > 0) {

				if (mot4_1.equals("-")) {
					SQL4_1 = "select DISTINCT (CASE WHEN " + subject4_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL4_1 = "select DISTINCT (CASE WHEN " + subject4_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade4_1;
				try {

					Grade4_1 = generateCellValue(SQL4_1);
					if (Grade4_1.next()) {
						grade4_1 = Grade4_1.getString(1);

					} else {
						grade4_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject4_1Avg = -1;
			}

			if (subject4_1Avg <= 0 || cell4_1Avg == null || cell4_1Avg.equals("")) {
				grade4_1 = "";
			} else {
				grade4_1 = grade4_1;
			}
			table.addCell(cell4_1Avg);
			table.addCell(grade4_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject4_2Avg > 0) {

				if (mot4_2.equals("-")) {

					SQL4_2 = "select DISTINCT (CASE WHEN " + subject4_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade4_2;
					try {

						Grade4_2 = generateCellValue(SQL4_2);
						if (Grade4_2.next()) {
							grade4_2 = Grade4_2.getString(1);

						} else {
							grade4_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL4_2 = "select DISTINCT (CASE WHEN " + subject4_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade4_2;
					try {

						Grade4_2 = generateCellValue(SQL4_2);
						if (Grade4_2.next()) {
							grade4_2 = Grade4_2.getString(1);

						} else {
							grade4_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject4_2Avg = -1;
			}

			if (subject4_2Avg <= 0 || cell4_2Avg == null || cell4_2Avg.equals("")) {
				grade4_2 = "";
			}
			table.addCell(cell4_2Avg);
			table.addCell(grade4_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject4_3Avg > 0) {

				if (mot4_3.equals("-")) {
					SQL4_3 = "select DISTINCT (CASE WHEN " + subject4_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade4_3;
					try {

						Grade4_3 = generateCellValue(SQL4_3);
						if (Grade4_3.next()) {
							grade4_3 = Grade4_3.getString(1);

						} else {
							grade4_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL4_3 = "select DISTINCT (CASE WHEN " + subject4_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject4
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject4 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject4_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject4 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade4_3;
					try {

						Grade4_3 = generateCellValue(SQL4_3);
						if (Grade4_3.next()) {
							grade4_3 = Grade4_3.getString(1);

						} else {
							grade4_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject4_3Avg = -1;
			}

			if (subject4_3Avg <= 0 || cell4_3Avg == null || cell4_3Avg.equals("")) {
				grade4_3 = "";
			}
			table.addCell(cell4_3Avg);
			table.addCell(grade4_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade4_1 == null) && !(grade4_1.equals(""))) {
				gradeValue4_1 = grade4_1.replaceAll("[^0-9]", "");
			} else {
				grade4_1 = "0";
				gradeValue4_1 = grade4_1.replaceAll("[^0-9]", "");
			}

			if (!(grade4_2 == null) && !(grade4_2.equals(""))) {
				gradeValue4_2 = grade4_2.replaceAll("[^0-9]", "");
			} else {
				grade4_2 = "0";
				gradeValue4_2 = grade4_2.replaceAll("[^0-9]", "");
			}

			if (!(grade4_3 == null) && !(grade4_3.equals(""))) {
				gradeValue4_3 = grade4_3.replaceAll("[^0-9]", "");
			} else {
				grade4_3 = "0";
				gradeValue4_3 = grade4_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue4_1.equals("")) {
				valuepaper4_1 = Double.parseDouble(gradeValue4_1);
			}

			if (!gradeValue4_2.equals("")) {
				valuepaper4_2 = Double.parseDouble(gradeValue4_2);
			}
			if (!gradeValue4_3.equals("")) {
				valuepaper4_3 = Double.parseDouble(gradeValue4_3);
			}

			if (fieldPapers4.getText().equals("1")) {
				averageValue = (valuepaper4_1);
			} else if (fieldPapers4.getText().equals("2")) {
				averageValue = (valuepaper4_1 + valuepaper4_2) / 2;
			} else if (fieldPapers4.getText().equals("3")) {
				averageValue = (valuepaper4_1 + valuepaper4_2 + valuepaper4_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "A";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "B";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "C";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "D";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA4c = new PdfPCell(gradeA4p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "E";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "O";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper4_1 == 9 || valuepaper4_2 == 9 || valuepaper4_3 == 9) {
					gradeA4 = "O";
				} else {
					gradeA4 = "F";
				}
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			if (averageValue <= 0) {
				gradeA4 = "";
				gradeA4p = new Paragraph(gradeA4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA4c = new PdfPCell(gradeA4p);
			}

			table.addCell(gradeA4c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA4.equals("A")) {
				pointA4 = 6;
				comment4 = "Excellent";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("B")) {
				pointA4 = 5;
				comment4 = "V.Good";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("C")) {
				pointA4 = 4;
				comment4 = "Good";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("D")) {
				pointA4 = 3;
				comment4 = "F.Good";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("E")) {
				pointA4 = 2;
				comment4 = "Fair";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("O")) {
				pointA4 = 1;
				comment4 = "Poor";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment4c = new PdfPCell(comment4p);
			} else if (gradeA4.equals("F")) {
				pointA4 = 0;
				comment4 = "V.Poor";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment4c = new PdfPCell(comment4p);
			} else {
				pointA4 = 0;
				comment4 = "";
				comment4p = new Paragraph(comment4,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment4c = new PdfPCell(comment4p);
			}
			table.addCell(comment4c);

			table.addCell(new Paragraph(teachersInitials(subject4, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 5
			 ************************************************/

			ResultSet Subject5;
			try {

				Subject5 = generateCellValue("SELECT subject_name from student_subjectsa where id=5");
				if (Subject5.next()) {
					subject5 = Subject5.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum5 = new PdfPCell(
					new Paragraph("5", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum5 = new PdfPCell(new Paragraph(subject5,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum5);
			table.addCell(subNum5);
			ResultSet MoT5_1;
			try {

				MoT5_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT5_1.next()) {
					mot5_1 = MoT5_1.getString(1);

				} else {
					mot5_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT5_2;
			try {

				MoT5_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT5_2.next()) {
					mot5_2 = MoT5_2.getString(1);

				} else {
					mot5_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT5_3;
			try {

				MoT5_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT5_3.next()) {
					mot5_3 = MoT5_3.getString(1);

				} else {
					mot5_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT5_1;
			try {

				EoT5_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT5_1.next()) {
					eot5_1 = EoT5_1.getString(1);

				} else {
					eot5_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT5_2;
			try {

				EoT5_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT5_2.next()) {
					eot5_2 = EoT5_2.getString(1);

				} else {
					eot5_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT5_3;
			try {

				EoT5_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject5
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT5_3.next()) {
					eot5_3 = EoT5_3.getString(1);

				} else {
					eot5_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered5;
			try {

				Subjectoffered5 = generateCellValue("select `" + subject5
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered5.next()) {

					yes5 = Subjectoffered5.getInt(1);

				} else {
					yes5 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			if (yes5 == 1) {

				if (fieldPapers5.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot5_1 == null) && !(eot5_1.equals("-")) && !(eot5_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (intmot5_1 + inteot5_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_1 = "-";
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (inteot5_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_1 = "-";

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							subject5_1Avg = (intmot5_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_1 = "-";
							subject5_1Avg = -1;
						}
					}

					mot5_2 = "";
					eot5_2 = "";
					mot5_3 = "";
					eot5_3 = "";
					subject5_2Avg = -1;
					subject5_3Avg = -1;

				} else if (fieldPapers5.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot5_1 == null) && !(eot5_1.equals("-")) && !(eot5_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (intmot5_1 + inteot5_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_1 = "-";
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (inteot5_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_1 = "-";

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							subject5_1Avg = (intmot5_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_1 = "-";
							subject5_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot5_2 == null) && !(eot5_2.equals("-")) && !(eot5_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_2 == null) && !(mot5_2.equals("-")) && !(mot5_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_2 = Double.parseDouble(mot5_2);
							inteot5_2 = Double.parseDouble(eot5_2);
							subject5_2Avg = (intmot5_2 + inteot5_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_2 = "-";
							inteot5_2 = Double.parseDouble(eot5_2);
							subject5_2Avg = (inteot5_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_2 = "-";

						if (!(mot5_2 == null) && !(mot5_2.equals("-")) && !(mot5_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_2 = Double.parseDouble(mot5_2);
							subject5_2Avg = (intmot5_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_2 = "-";
							subject5_2Avg = -1;
						}
					}

					mot5_3 = "";
					eot5_3 = "";
					subject5_3Avg = -1;

				} else if (fieldPapers5.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot5_1 == null) && !(eot5_1.equals("-")) && !(eot5_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (intmot5_1 + inteot5_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_1 = "-";
							inteot5_1 = Double.parseDouble(eot5_1);
							subject5_1Avg = (inteot5_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_1 = "-";

						if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_1 = Double.parseDouble(mot5_1);
							subject5_1Avg = (intmot5_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_1 = "-";
							subject5_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot5_2 == null) && !(eot5_2.equals("-")) && !(eot5_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_2 == null) && !(mot5_2.equals("-")) && !(mot5_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_2 = Double.parseDouble(mot5_2);
							inteot5_2 = Double.parseDouble(eot5_2);
							subject5_2Avg = (intmot5_2 + inteot5_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_2 = "-";
							inteot5_2 = Double.parseDouble(eot5_2);
							subject5_2Avg = (inteot5_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_2 = "-";

						if (!(mot5_2 == null) && !(mot5_2.equals("-")) && !(mot5_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_2 = Double.parseDouble(mot5_2);
							subject5_2Avg = (intmot5_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_2 = "-";
							subject5_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot5_3 == null) && !(eot5_3.equals("-")) && !(eot5_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot5_3 == null) && !(mot5_3.equals("-")) && !(mot5_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot5_3 = Double.parseDouble(mot5_3);
							inteot5_3 = Double.parseDouble(eot5_3);
							subject5_3Avg = (intmot5_3 + inteot5_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot5_3 = "-";
							inteot5_3 = Double.parseDouble(eot5_3);
							subject5_3Avg = (inteot5_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot5_3 = "-";

						if (!(mot5_3 == null) && !(mot5_3.equals("-")) && !(mot5_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot5_3 = Double.parseDouble(mot5_3);
							subject5_3Avg = (intmot5_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot5_3 = "-";
							subject5_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot5_1 = "";
				eot5_1 = "";
				subject5_1Avg = -1;
				mot5_2 = "";
				eot5_2 = "";
				subject5_2Avg = -1;
				mot5_3 = "";
				eot5_3 = "";
				subject5_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot5_1 == null) && !(mot5_1.equals("-")) && !(mot5_1.equals(""))) {
				double colormot5_1 = Double.parseDouble(mot5_1);
				if (colormot5_1 <= 50) {
					mot5_1p = new Paragraph(mot5_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot5_1p = new Paragraph(mot5_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot5_1p = new Paragraph(mot5_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot5_2 == null) && !(mot5_2.equals("-")) && !(mot5_2.equals(""))) {
				double colormot5_2 = Double.parseDouble(mot5_2);
				if (colormot5_2 <= 50) {
					mot5_2p = new Paragraph(mot5_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot5_2p = new Paragraph(mot5_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot5_2p = new Paragraph(mot5_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot5_3 == null) && !(mot5_3.equals("-")) && !(mot5_3.equals(""))) {
				double colormot5_3 = Double.parseDouble(mot5_3);
				if (colormot5_3 <= 50) {
					mot5_3p = new Paragraph(mot5_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot5_3p = new Paragraph(mot5_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot5_3p = new Paragraph(mot5_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot5_1 == null) && !(eot5_1.equals("-")) && !(eot5_1.equals(""))) {
				double coloreot5_1 = Double.parseDouble(eot5_1);
				if (coloreot5_1 <= 50) {
					eot5_1p = new Paragraph(eot5_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot5_1p = new Paragraph(eot5_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot5_1p = new Paragraph(eot5_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot5_2 == null) && !(eot5_2.equals("-")) && !(eot5_2.equals(""))) {
				double coloreot5_2 = Double.parseDouble(eot5_2);
				if (coloreot5_2 <= 50) {
					eot5_2p = new Paragraph(eot5_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot5_2p = new Paragraph(eot5_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot5_2p = new Paragraph(eot5_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot5_3 == null) && !(eot5_3.equals("-")) && !(eot5_3.equals(""))) {
				double coloreot5_3 = Double.parseDouble(eot5_3);
				if (coloreot5_3 <= 50) {
					eot5_3p = new Paragraph(eot5_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot5_3p = new Paragraph(eot5_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot5_3p = new Paragraph(eot5_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot5_1 = new PdfPCell(mot5_1p);
			PdfPCell cellmot5_2 = new PdfPCell(mot5_2p);
			PdfPCell cellmot5_3 = new PdfPCell(mot5_3p);
			PdfPCell celleot5_1 = new PdfPCell(eot5_1p);
			PdfPCell celleot5_2 = new PdfPCell(eot5_2p);
			PdfPCell celleot5_3 = new PdfPCell(eot5_3p);

			table.addCell(cellmot5_1);
			table.addCell(cellmot5_2);
			table.addCell(cellmot5_3);

			table.addCell(celleot5_1);
			table.addCell(celleot5_2);
			table.addCell(celleot5_3);

			if (subject5_1Avg == -1) {
				cell5_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell5_1Avg = new PdfPCell(new Paragraph("" + subject5_1Avg));
			}

			if (subject5_2Avg == -1) {
				cell5_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell5_2Avg = new PdfPCell(new Paragraph("" + subject5_2Avg));
			}

			if (subject5_3Avg == -1) {
				cell5_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell5_3Avg = new PdfPCell(new Paragraph("" + subject5_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject5_1Avg > 0) {

				if (mot5_1.equals("-")) {
					SQL5_1 = "select DISTINCT (CASE WHEN " + subject5_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL5_1 = "select DISTINCT (CASE WHEN " + subject5_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade5_1;
				try {

					Grade5_1 = generateCellValue(SQL5_1);
					if (Grade5_1.next()) {
						grade5_1 = Grade5_1.getString(1);

					} else {
						grade5_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject5_1Avg = -1;
			}

			if (subject5_1Avg <= 0 || cell5_1Avg == null || cell5_1Avg.equals("")) {
				grade5_1 = "";
			} else {
				grade5_1 = grade5_1;
			}
			table.addCell(cell5_1Avg);
			table.addCell(grade5_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject5_2Avg > 0) {

				if (mot5_2.equals("-")) {

					SQL5_2 = "select DISTINCT (CASE WHEN " + subject5_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade5_2;
					try {

						Grade5_2 = generateCellValue(SQL5_2);
						if (Grade5_2.next()) {
							grade5_2 = Grade5_2.getString(1);

						} else {
							grade5_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL5_2 = "select DISTINCT (CASE WHEN " + subject5_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade5_2;
					try {

						Grade5_2 = generateCellValue(SQL5_2);
						if (Grade5_2.next()) {
							grade5_2 = Grade5_2.getString(1);

						} else {
							grade5_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject5_2Avg = -1;
			}

			if (subject5_2Avg <= 0 || cell5_2Avg == null || cell5_2Avg.equals("")) {
				grade5_2 = "";
			}
			table.addCell(cell5_2Avg);
			table.addCell(grade5_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject5_3Avg > 0) {

				if (mot5_3.equals("-")) {
					SQL5_3 = "select DISTINCT (CASE WHEN " + subject5_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade5_3;
					try {

						Grade5_3 = generateCellValue(SQL5_3);
						if (Grade5_3.next()) {
							grade5_3 = Grade5_3.getString(1);

						} else {
							grade5_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL5_3 = "select DISTINCT (CASE WHEN " + subject5_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject5
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject5 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject5_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject5 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade5_3;
					try {

						Grade5_3 = generateCellValue(SQL5_3);
						if (Grade5_3.next()) {
							grade5_3 = Grade5_3.getString(1);

						} else {
							grade5_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject5_3Avg = -1;
			}

			if (subject5_3Avg <= 0 || cell5_3Avg == null || cell5_3Avg.equals("")) {
				grade5_3 = "";
			}
			table.addCell(cell5_3Avg);
			table.addCell(grade5_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade5_1 == null) && !(grade5_1.equals(""))) {
				gradeValue5_1 = grade5_1.replaceAll("[^0-9]", "");
			} else {
				grade5_1 = "0";
				gradeValue5_1 = grade5_1.replaceAll("[^0-9]", "");
			}

			if (!(grade5_2 == null) && !(grade5_2.equals(""))) {
				gradeValue5_2 = grade5_2.replaceAll("[^0-9]", "");
			} else {
				grade5_2 = "0";
				gradeValue5_2 = grade5_2.replaceAll("[^0-9]", "");
			}

			if (!(grade5_3 == null) && !(grade5_3.equals(""))) {
				gradeValue5_3 = grade5_3.replaceAll("[^0-9]", "");
			} else {
				grade5_3 = "0";
				gradeValue5_3 = grade5_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue5_1.equals("")) {
				valuepaper5_1 = Double.parseDouble(gradeValue5_1);
			}

			if (!gradeValue5_2.equals("")) {
				valuepaper5_2 = Double.parseDouble(gradeValue5_2);
			}
			if (!gradeValue5_3.equals("")) {
				valuepaper5_3 = Double.parseDouble(gradeValue5_3);
			}

			if (fieldPapers5.getText().equals("1")) {
				averageValue = (valuepaper5_1);
			} else if (fieldPapers5.getText().equals("2")) {
				averageValue = (valuepaper5_1 + valuepaper5_2) / 2;
			} else if (fieldPapers5.getText().equals("3")) {
				averageValue = (valuepaper5_1 + valuepaper5_2 + valuepaper5_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "A";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "B";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "C";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "D";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA5c = new PdfPCell(gradeA5p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "E";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "O";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper5_1 == 9 || valuepaper5_2 == 9 || valuepaper5_3 == 9) {
					gradeA5 = "O";
				} else {
					gradeA5 = "F";
				}
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA5c = new PdfPCell(gradeA5p);
			}
			if (averageValue <= 0) {

				gradeA5 = "";
				gradeA5p = new Paragraph(gradeA5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA5c = new PdfPCell(gradeA5p);
			}

			table.addCell(gradeA5c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA5.equals("A")) {
				pointA5 = 6;
				comment5 = "Excellent";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("B")) {
				pointA5 = 5;
				comment5 = "V.Good";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("C")) {
				pointA5 = 4;
				comment5 = "Good";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("D")) {
				pointA5 = 3;
				comment5 = "F.Good";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("E")) {
				pointA5 = 2;
				comment5 = "Fair";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("O")) {
				pointA5 = 1;
				comment5 = "Poor";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment5c = new PdfPCell(comment5p);
			} else if (gradeA5.equals("F")) {
				pointA5 = 0;
				comment5 = "V.Poor";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment5c = new PdfPCell(comment5p);
			} else {
				pointA5 = 0;
				comment5 = "";
				comment5p = new Paragraph(comment5,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment5c = new PdfPCell(comment5p);
			}
			table.addCell(comment5c);

			table.addCell(new Paragraph(teachersInitials(subject5, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 6
			 ************************************************/

			ResultSet Subject6;
			try {

				Subject6 = generateCellValue("SELECT subject_name from student_subjectsa where id=6");
				if (Subject6.next()) {
					subject6 = Subject6.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum6 = new PdfPCell(
					new Paragraph("6", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum6 = new PdfPCell(new Paragraph(subject6,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum6);
			table.addCell(subNum6);
			ResultSet MoT6_1;
			try {

				MoT6_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT6_1.next()) {
					mot6_1 = MoT6_1.getString(1);

				} else {
					mot6_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT6_2;
			try {

				MoT6_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT6_2.next()) {
					mot6_2 = MoT6_2.getString(1);

				} else {
					mot6_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT6_3;
			try {

				MoT6_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT6_3.next()) {
					mot6_3 = MoT6_3.getString(1);

				} else {
					mot6_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT6_1;
			try {

				EoT6_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT6_1.next()) {
					eot6_1 = EoT6_1.getString(1);

				} else {
					eot6_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT6_2;
			try {

				EoT6_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT6_2.next()) {
					eot6_2 = EoT6_2.getString(1);

				} else {
					eot6_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT6_3;
			try {

				EoT6_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject6
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT6_3.next()) {
					eot6_3 = EoT6_3.getString(1);

				} else {
					eot6_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered6;
			try {

				Subjectoffered6 = generateCellValue("select `" + subject6
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered6.next()) {

					yes6 = Subjectoffered6.getInt(1);

				} else {
					yes6 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes6 == 1) {

				if (fieldPapers6.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot6_1 == null) && !(eot6_1.equals("-")) && !(eot6_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (intmot6_1 + inteot6_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_1 = "-";
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (inteot6_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_1 = "-";

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							subject6_1Avg = (intmot6_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_1 = "-";
							subject6_1Avg = -1;
						}
					}

					mot6_2 = "";
					eot6_2 = "";
					mot6_3 = "";
					eot6_3 = "";
					subject6_2Avg = -1;
					subject6_3Avg = -1;

				} else if (fieldPapers6.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot6_1 == null) && !(eot6_1.equals("-")) && !(eot6_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (intmot6_1 + inteot6_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_1 = "-";
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (inteot6_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_1 = "-";

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							subject6_1Avg = (intmot6_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_1 = "-";
							subject6_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot6_2 == null) && !(eot6_2.equals("-")) && !(eot6_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_2 == null) && !(mot6_2.equals("-")) && !(mot6_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_2 = Double.parseDouble(mot6_2);
							inteot6_2 = Double.parseDouble(eot6_2);
							subject6_2Avg = (intmot6_2 + inteot6_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_2 = "-";
							inteot6_2 = Double.parseDouble(eot6_2);
							subject6_2Avg = (inteot6_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_2 = "-";

						if (!(mot6_2 == null) && !(mot6_2.equals("-")) && !(mot6_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_2 = Double.parseDouble(mot6_2);
							subject6_2Avg = (intmot6_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_2 = "-";
							subject6_2Avg = -1;
						}
					}

					mot6_3 = "";
					eot6_3 = "";
					subject6_3Avg = -1;

				} else if (fieldPapers6.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot6_1 == null) && !(eot6_1.equals("-")) && !(eot6_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (intmot6_1 + inteot6_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_1 = "-";
							inteot6_1 = Double.parseDouble(eot6_1);
							subject6_1Avg = (inteot6_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_1 = "-";

						if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_1 = Double.parseDouble(mot6_1);
							subject6_1Avg = (intmot6_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_1 = "-";
							subject6_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot6_2 == null) && !(eot6_2.equals("-")) && !(eot6_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_2 == null) && !(mot6_2.equals("-")) && !(mot6_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_2 = Double.parseDouble(mot6_2);
							inteot6_2 = Double.parseDouble(eot6_2);
							subject6_2Avg = (intmot6_2 + inteot6_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_2 = "-";
							inteot6_2 = Double.parseDouble(eot6_2);
							subject6_2Avg = (inteot6_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_2 = "-";

						if (!(mot6_2 == null) && !(mot6_2.equals("-")) && !(mot6_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_2 = Double.parseDouble(mot6_2);
							subject6_2Avg = (intmot6_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_2 = "-";
							subject6_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot6_3 == null) && !(eot6_3.equals("-")) && !(eot6_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot6_3 == null) && !(mot6_3.equals("-")) && !(mot6_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot6_3 = Double.parseDouble(mot6_3);
							inteot6_3 = Double.parseDouble(eot6_3);
							subject6_3Avg = (intmot6_3 + inteot6_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot6_3 = "-";
							inteot6_3 = Double.parseDouble(eot6_3);
							subject6_3Avg = (inteot6_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot6_3 = "-";

						if (!(mot6_3 == null) && !(mot6_3.equals("-")) && !(mot6_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot6_3 = Double.parseDouble(mot6_3);
							subject6_3Avg = (intmot6_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot6_3 = "-";
							subject6_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot6_1 = "";
				eot6_1 = "";
				subject6_1Avg = -1;
				mot6_2 = "";
				eot6_2 = "";
				subject6_2Avg = -1;
				mot6_3 = "";
				eot6_3 = "";
				subject6_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot6_1 == null) && !(mot6_1.equals("-")) && !(mot6_1.equals(""))) {
				double colormot6_1 = Double.parseDouble(mot6_1);
				if (colormot6_1 <= 50) {
					mot6_1p = new Paragraph(mot6_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot6_1p = new Paragraph(mot6_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot6_1p = new Paragraph(mot6_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot6_2 == null) && !(mot6_2.equals("-")) && !(mot6_2.equals(""))) {
				double colormot6_2 = Double.parseDouble(mot6_2);
				if (colormot6_2 <= 50) {
					mot6_2p = new Paragraph(mot6_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot6_2p = new Paragraph(mot6_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot6_2p = new Paragraph(mot6_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot6_3 == null) && !(mot6_3.equals("-")) && !(mot6_3.equals(""))) {
				double colormot6_3 = Double.parseDouble(mot6_3);
				if (colormot6_3 <= 50) {
					mot6_3p = new Paragraph(mot6_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot6_3p = new Paragraph(mot6_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot6_3p = new Paragraph(mot6_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot6_1 == null) && !(eot6_1.equals("-")) && !(eot6_1.equals(""))) {
				double coloreot6_1 = Double.parseDouble(eot6_1);
				if (coloreot6_1 <= 50) {
					eot6_1p = new Paragraph(eot6_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot6_1p = new Paragraph(eot6_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot6_1p = new Paragraph(eot6_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot6_2 == null) && !(eot6_2.equals("-")) && !(eot6_2.equals(""))) {
				double coloreot6_2 = Double.parseDouble(eot6_2);
				if (coloreot6_2 <= 50) {
					eot6_2p = new Paragraph(eot6_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot6_2p = new Paragraph(eot6_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot6_2p = new Paragraph(eot6_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot6_3 == null) && !(eot6_3.equals("-")) && !(eot6_3.equals(""))) {
				double coloreot6_3 = Double.parseDouble(eot6_3);
				if (coloreot6_3 <= 50) {
					eot6_3p = new Paragraph(eot6_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot6_3p = new Paragraph(eot6_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot6_3p = new Paragraph(eot6_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot6_1 = new PdfPCell(mot6_1p);
			PdfPCell cellmot6_2 = new PdfPCell(mot6_2p);
			PdfPCell cellmot6_3 = new PdfPCell(mot6_3p);
			PdfPCell celleot6_1 = new PdfPCell(eot6_1p);
			PdfPCell celleot6_2 = new PdfPCell(eot6_2p);
			PdfPCell celleot6_3 = new PdfPCell(eot6_3p);

			table.addCell(cellmot6_1);
			table.addCell(cellmot6_2);
			table.addCell(cellmot6_3);

			table.addCell(celleot6_1);
			table.addCell(celleot6_2);
			table.addCell(celleot6_3);

			if (subject6_1Avg == -1) {
				cell6_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell6_1Avg = new PdfPCell(new Paragraph("" + subject6_1Avg));
			}

			if (subject6_2Avg == -1) {
				cell6_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell6_2Avg = new PdfPCell(new Paragraph("" + subject6_2Avg));
			}

			if (subject6_3Avg == -1) {
				cell6_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell6_3Avg = new PdfPCell(new Paragraph("" + subject6_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject6_1Avg > 0) {

				if (mot6_1.equals("-")) {
					SQL6_1 = "select DISTINCT (CASE WHEN " + subject6_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL6_1 = "select DISTINCT (CASE WHEN " + subject6_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade6_1;
				try {

					Grade6_1 = generateCellValue(SQL6_1);
					if (Grade6_1.next()) {
						grade6_1 = Grade6_1.getString(1);

					} else {
						grade6_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject6_1Avg = -1;
			}

			if (subject6_1Avg <= 0 || cell6_1Avg == null || cell6_1Avg.equals("")) {
				grade6_1 = "";
			} else {
				grade6_1 = grade6_1;
			}
			table.addCell(cell6_1Avg);
			table.addCell(grade6_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject6_2Avg > 0) {

				if (mot6_2.equals("-")) {

					SQL6_2 = "select DISTINCT (CASE WHEN " + subject6_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade6_2;
					try {

						Grade6_2 = generateCellValue(SQL6_2);
						if (Grade6_2.next()) {
							grade6_2 = Grade6_2.getString(1);

						} else {
							grade6_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL6_2 = "select DISTINCT (CASE WHEN " + subject6_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade6_2;
					try {

						Grade6_2 = generateCellValue(SQL6_2);
						if (Grade6_2.next()) {
							grade6_2 = Grade6_2.getString(1);

						} else {
							grade6_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject6_2Avg = -1;
			}

			if (subject6_2Avg <= 0 || cell6_2Avg == null || cell6_2Avg.equals("")) {
				grade6_2 = "";
			}
			table.addCell(cell6_2Avg);
			table.addCell(grade6_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject6_3Avg > 0) {

				if (mot6_3.equals("-")) {
					SQL6_3 = "select DISTINCT (CASE WHEN " + subject6_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade6_3;
					try {

						Grade6_3 = generateCellValue(SQL6_3);
						if (Grade6_3.next()) {
							grade6_3 = Grade6_3.getString(1);

						} else {
							grade6_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL6_3 = "select DISTINCT (CASE WHEN " + subject6_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject6
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject6 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject6_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject6 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade6_3;
					try {

						Grade6_3 = generateCellValue(SQL6_3);
						if (Grade6_3.next()) {
							grade6_3 = Grade6_3.getString(1);

						} else {
							grade6_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject6_3Avg = -1;
			}

			if (subject6_3Avg <= 0 || cell6_3Avg == null || cell6_3Avg.equals("")) {
				grade6_3 = "";
			}
			table.addCell(cell6_3Avg);
			table.addCell(grade6_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade6_1 == null) && !(grade6_1.equals(""))) {
				gradeValue6_1 = grade6_1.replaceAll("[^0-9]", "");
			} else {
				grade6_1 = "0";
				gradeValue6_1 = grade6_1.replaceAll("[^0-9]", "");
			}

			if (!(grade6_2 == null) && !(grade6_2.equals(""))) {
				gradeValue6_2 = grade6_2.replaceAll("[^0-9]", "");
			} else {
				grade6_2 = "0";
				gradeValue6_2 = grade6_2.replaceAll("[^0-9]", "");
			}

			if (!(grade6_3 == null) && !(grade6_3.equals(""))) {
				gradeValue6_3 = grade6_3.replaceAll("[^0-9]", "");
			} else {
				grade6_3 = "0";
				gradeValue6_3 = grade6_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue6_1.equals("")) {
				valuepaper6_1 = Double.parseDouble(gradeValue6_1);
			}

			if (!gradeValue6_2.equals("")) {
				valuepaper6_2 = Double.parseDouble(gradeValue6_2);
			}
			if (!gradeValue6_3.equals("")) {
				valuepaper6_3 = Double.parseDouble(gradeValue6_3);
			}

			if (fieldPapers6.getText().equals("1")) {
				averageValue = (valuepaper6_1);
			} else if (fieldPapers6.getText().equals("2")) {
				averageValue = (valuepaper6_1 + valuepaper6_2) / 2;
			} else if (fieldPapers6.getText().equals("3")) {
				averageValue = (valuepaper6_1 + valuepaper6_2 + valuepaper6_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "A";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "B";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "C";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "D";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA6c = new PdfPCell(gradeA6p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "E";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "O";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper6_1 == 9 || valuepaper6_2 == 9 || valuepaper6_3 == 9) {
					gradeA6 = "O";
				} else {
					gradeA6 = "F";
				}
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			if (averageValue <= 0) {

				gradeA6 = "";
				gradeA6p = new Paragraph(gradeA6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA6c = new PdfPCell(gradeA6p);
			}

			table.addCell(gradeA6c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA6.equals("A")) {
				pointA6 = 6;
				comment6 = "Excellent";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("B")) {
				pointA6 = 5;
				comment6 = "V.Good";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("C")) {
				pointA6 = 4;
				comment6 = "Good";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("D")) {
				pointA6 = 3;
				comment6 = "F.Good";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("E")) {
				pointA6 = 2;
				comment6 = "Fair";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("O")) {
				pointA6 = 1;
				comment6 = "Poor";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment6c = new PdfPCell(comment6p);
			} else if (gradeA6.equals("F")) {
				pointA6 = 0;
				comment6 = "V.Poor";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment6c = new PdfPCell(comment6p);
			} else {
				pointA6 = 0;
				comment6 = "";
				comment6p = new Paragraph(comment6,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment6c = new PdfPCell(comment6p);
			}

			table.addCell(comment6c);

			table.addCell(new Paragraph(teachersInitials(subject6, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			/***********************************************
			 * Subject Number 7
			 ************************************************/

			ResultSet Subject7;
			try {

				Subject7 = generateCellValue("SELECT subject_name from student_subjectsa where id=7");
				if (Subject7.next()) {
					subject7 = Subject7.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			PdfPCell cellNum7 = new PdfPCell(
					new Paragraph("7", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
			PdfPCell subNum7 = new PdfPCell(new Paragraph(subject7,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			table.addCell(cellNum7);
			table.addCell(subNum7);
			ResultSet MoT7_1;
			try {

				MoT7_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (MoT7_1.next()) {
					mot7_1 = MoT7_1.getString(1);

				} else {
					mot7_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT7_2;
			try {

				MoT7_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (MoT7_2.next()) {
					mot7_2 = MoT7_2.getString(1);

				} else {
					mot7_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet MoT7_3;
			try {

				MoT7_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (MoT7_3.next()) {
					mot7_3 = MoT7_3.getString(1);

				} else {
					mot7_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT7_1;
			try {

				EoT7_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=1");
				if (EoT7_1.next()) {
					eot7_1 = EoT7_1.getString(1);

				} else {
					eot7_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT7_2;
			try {

				EoT7_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=2");
				if (EoT7_2.next()) {
					eot7_2 = EoT7_2.getString(1);

				} else {
					eot7_2 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet EoT7_3;
			try {

				EoT7_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject7
						+ "' AND `Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND `Paper`=3");
				if (EoT7_3.next()) {
					eot7_3 = EoT7_3.getString(1);

				} else {
					eot7_3 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			ResultSet Subjectoffered7;
			try {

				Subjectoffered7 = generateCellValue("select `" + subject7
						+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
				if (Subjectoffered7.next()) {

					yes7 = Subjectoffered7.getInt(1);

				} else {
					yes7 = -1;
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			if (yes7 == 1) {

				if (fieldPapers7.getText().equals("1")) {

					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot7_1 == null) && !(eot7_1.equals("-")) && !(eot7_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (intmot7_1 + inteot7_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_1 = "-";
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (inteot7_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_1 = "-";

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							subject7_1Avg = (intmot7_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_1 = "-";
							subject7_1Avg = -1;
						}
					}

					mot7_2 = "";
					eot7_2 = "";
					mot7_3 = "";
					eot7_3 = "";
					subject7_2Avg = -1;
					subject7_3Avg = -1;

				} else if (fieldPapers7.getText().equals("2")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot7_1 == null) && !(eot7_1.equals("-")) && !(eot7_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (intmot7_1 + inteot7_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_1 = "-";
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (inteot7_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_1 = "-";

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							subject7_1Avg = (intmot7_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_1 = "-";
							subject7_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot7_2 == null) && !(eot7_2.equals("-")) && !(eot7_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_2 == null) && !(mot7_2.equals("-")) && !(mot7_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_2 = Double.parseDouble(mot7_2);
							inteot7_2 = Double.parseDouble(eot7_2);
							subject7_2Avg = (intmot7_2 + inteot7_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_2 = "-";
							inteot7_2 = Double.parseDouble(eot7_2);
							subject7_2Avg = (inteot7_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_2 = "-";

						if (!(mot7_2 == null) && !(mot7_2.equals("-")) && !(mot7_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_2 = Double.parseDouble(mot7_2);
							subject7_2Avg = (intmot7_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_2 = "-";
							subject7_2Avg = -1;
						}
					}

					mot7_3 = "";
					eot7_3 = "";
					subject7_3Avg = -1;

				} else if (fieldPapers7.getText().equals("3")) {
					/***********************************************
					 * Student Does offer the subject Paper 1
					 ************************************************/
					if (!(eot7_1 == null) && !(eot7_1.equals("-")) && !(eot7_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (intmot7_1 + inteot7_1) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_1 = "-";
							inteot7_1 = Double.parseDouble(eot7_1);
							subject7_1Avg = (inteot7_1) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_1 = "-";

						if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_1 = Double.parseDouble(mot7_1);
							subject7_1Avg = (intmot7_1) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_1 = "-";
							subject7_1Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject Paper 2
					 ************************************************/
					if (!(eot7_2 == null) && !(eot7_2.equals("-")) && !(eot7_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_2 == null) && !(mot7_2.equals("-")) && !(mot7_2.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_2 = Double.parseDouble(mot7_2);
							inteot7_2 = Double.parseDouble(eot7_2);
							subject7_2Avg = (intmot7_2 + inteot7_2) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_2 = "-";
							inteot7_2 = Double.parseDouble(eot7_2);
							subject7_2Avg = (inteot7_2) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_2 = "-";

						if (!(mot7_2 == null) && !(mot7_2.equals("-")) && !(mot7_2.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_2 = Double.parseDouble(mot7_2);
							subject7_2Avg = (intmot7_2) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_2 = "-";
							subject7_2Avg = -1;
						}
					}

					/***********************************************
					 * Student Does offer the subject paper 3
					 ************************************************/
					if (!(eot7_3 == null) && !(eot7_3.equals("-")) && !(eot7_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT
						 ************************************************/

						if (!(mot7_3 == null) && !(mot7_3.equals("-")) && !(mot7_3.equals(""))) {

							/***********************************************
							 * Student Did not miss EOT and MoT
							 ************************************************/

							intmot7_3 = Double.parseDouble(mot7_3);
							inteot7_3 = Double.parseDouble(eot7_3);
							subject7_3Avg = (intmot7_3 + inteot7_3) / 2;
						} else {

							/***********************************************
							 * Student Did not miss EOT but missed EoT
							 ************************************************/

							mot7_3 = "-";
							inteot7_3 = Double.parseDouble(eot7_3);
							subject7_3Avg = (inteot7_3) / 2;
						}

					} else {

						/***********************************************
						 * Student Did miss EOT
						 ************************************************/

						eot7_3 = "-";

						if (!(mot7_3 == null) && !(mot7_3.equals("-")) && !(mot7_3.equals(""))) {

							/***********************************************
							 * Student missed EOT but did MoT
							 ************************************************/

							intmot7_3 = Double.parseDouble(mot7_3);
							subject7_3Avg = (intmot7_3) / 2;
						} else {

							/***********************************************
							 * Student missed EOT & MoT
							 ************************************************/
							mot7_3 = "-";
							subject7_3Avg = -1;
						}
					}

				} else {
					JOptionPane.showMessageDialog(null,
							"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
				}

			} else {

				/***********************************************
				 * Student Does not offer the subject
				 ************************************************/
				mot7_1 = "";
				eot7_1 = "";
				subject7_1Avg = -1;
				mot7_2 = "";
				eot7_2 = "";
				subject7_2Avg = -1;
				mot7_3 = "";
				eot7_3 = "";
				subject7_3Avg = -1;

			}

			/****************************************************************************
			 * Coloring poorly done mid term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(mot7_1 == null) && !(mot7_1.equals("-")) && !(mot7_1.equals(""))) {
				double colormot7_1 = Double.parseDouble(mot7_1);
				if (colormot7_1 <= 50) {
					mot7_1p = new Paragraph(mot7_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot7_1p = new Paragraph(mot7_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot7_1p = new Paragraph(mot7_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(mot7_2 == null) && !(mot7_2.equals("-")) && !(mot7_2.equals(""))) {
				double colormot7_2 = Double.parseDouble(mot7_2);
				if (colormot7_2 <= 50) {
					mot7_2p = new Paragraph(mot7_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot7_2p = new Paragraph(mot7_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot7_2p = new Paragraph(mot7_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 mot
			if (!(mot7_3 == null) && !(mot7_3.equals("-")) && !(mot7_3.equals(""))) {
				double colormot7_3 = Double.parseDouble(mot7_3);
				if (colormot7_3 <= 50) {
					mot7_3p = new Paragraph(mot7_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					mot7_3p = new Paragraph(mot7_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				mot7_3p = new Paragraph(mot7_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			/****************************************************************************
			 * Coloring poorly done end of term tests
			 ****************************************************************************/

			////// Checking paper one
			if (!(eot7_1 == null) && !(eot7_1.equals("-")) && !(eot7_1.equals(""))) {
				double coloreot7_1 = Double.parseDouble(eot7_1);
				if (coloreot7_1 <= 50) {
					eot7_1p = new Paragraph(eot7_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot7_1p = new Paragraph(eot7_1,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot7_1p = new Paragraph(eot7_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			//// checking paper two
			if (!(eot7_2 == null) && !(eot7_2.equals("-")) && !(eot7_2.equals(""))) {
				double coloreot7_2 = Double.parseDouble(eot7_2);
				if (coloreot7_2 <= 50) {
					eot7_2p = new Paragraph(eot7_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot7_2p = new Paragraph(eot7_2,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot7_2p = new Paragraph(eot7_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			///// checking paper 3 eot
			if (!(eot7_3 == null) && !(eot7_3.equals("-")) && !(eot7_3.equals(""))) {
				double coloreot7_3 = Double.parseDouble(eot7_3);
				if (coloreot7_3 <= 50) {
					eot7_3p = new Paragraph(eot7_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				} else {
					eot7_3p = new Paragraph(eot7_3,
							FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				}

			} else {
				eot7_3p = new Paragraph(eot7_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

			PdfPCell cellmot7_1 = new PdfPCell(mot7_1p);
			PdfPCell cellmot7_2 = new PdfPCell(mot7_2p);
			PdfPCell cellmot7_3 = new PdfPCell(mot7_3p);
			PdfPCell celleot7_1 = new PdfPCell(eot7_1p);
			PdfPCell celleot7_2 = new PdfPCell(eot7_2p);
			PdfPCell celleot7_3 = new PdfPCell(eot7_3p);

			table.addCell(cellmot7_1);
			table.addCell(cellmot7_2);
			table.addCell(cellmot7_3);

			table.addCell(celleot7_1);
			table.addCell(celleot7_2);
			table.addCell(celleot7_3);

			if (subject7_1Avg == -1) {
				cell7_1Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell7_1Avg = new PdfPCell(new Paragraph("" + subject7_1Avg));
			}

			if (subject7_2Avg == -1) {
				cell7_2Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell7_2Avg = new PdfPCell(new Paragraph("" + subject7_2Avg));
			}

			if (subject7_3Avg == -1) {
				cell7_3Avg = new PdfPCell(new Paragraph(""));
			} else {
				cell7_3Avg = new PdfPCell(new Paragraph("" + subject7_3Avg));
			}

			/*****************************************************************************************************
			 * Grading Ave of Paper One
			 *****************************************************************************************************/
			if (subject7_1Avg > 0) {

				if (mot7_1.equals("-")) {
					SQL7_1 = "select DISTINCT (CASE WHEN " + subject7_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				} else {
					SQL7_1 = "select DISTINCT (CASE WHEN " + subject7_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_1Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` ELSE '' END)!=''";

				}

				ResultSet Grade7_1;
				try {

					Grade7_1 = generateCellValue(SQL7_1);
					if (Grade7_1.next()) {
						grade7_1 = Grade7_1.getString(1);

					} else {
						grade7_1 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				subject7_1Avg = -1;
			}

			if (subject7_1Avg <= 0 || cell7_1Avg == null || cell7_1Avg.equals("")) {
				grade7_1 = "";
			} else {
				grade7_1 = grade7_1;
			}
			table.addCell(cell7_1Avg);
			table.addCell(grade7_1);
			/*****************************************************************************************************
			 * Grading Ave of Paper two
			 *****************************************************************************************************/
			if (subject7_2Avg > 0) {

				if (mot7_2.equals("-")) {

					SQL7_2 = "select DISTINCT (CASE WHEN " + subject7_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade7_2;
					try {

						Grade7_2 = generateCellValue(SQL7_2);
						if (Grade7_2.next()) {
							grade7_2 = Grade7_2.getString(1);

						} else {
							grade7_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {
					SQL7_2 = "select DISTINCT (CASE WHEN " + subject7_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_2Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade7_2;
					try {

						Grade7_2 = generateCellValue(SQL7_2);
						if (Grade7_2.next()) {
							grade7_2 = Grade7_2.getString(1);

						} else {
							grade7_2 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject7_2Avg = -1;
			}

			if (subject7_2Avg <= 0 || cell7_2Avg == null || cell7_2Avg.equals("")) {
				grade7_2 = "";
			}
			table.addCell(cell7_2Avg);
			table.addCell(grade7_2);

			/*****************************************************************************************************
			 * Grading Ave of Paper 3
			 *****************************************************************************************************/

			if (subject7_3Avg > 0) {

				if (mot7_3.equals("-")) {
					SQL7_3 = "select DISTINCT (CASE WHEN " + subject7_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade7_3;
					try {

						Grade7_3 = generateCellValue(SQL7_3);
						if (Grade7_3.next()) {
							grade7_3 = Grade7_3.getString(1);

						} else {
							grade7_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else {
					SQL7_3 = "select DISTINCT (CASE WHEN " + subject7_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
							+ "AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
							+ " AND students_grading.`Subject`='" + subject7
							+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
							+ " and students_grading.`Subject`='" + subject7 + "' and "
							+ "students_grading.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' and students_grading.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' and (CASE WHEN " + subject7_3Avg
							+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
							+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "%' AND students_marks.`Student Class`='"
							+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
							+ "' AND students_grading.`Subject`='" + subject7 + "' "
							+ "THEN students_grading.`Grade` END)!=''";

					ResultSet Grade7_3;
					try {

						Grade7_3 = generateCellValue(SQL7_3);
						if (Grade7_3.next()) {
							grade7_3 = Grade7_3.getString(1);

						} else {
							grade7_3 = "";
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} else {
				subject7_3Avg = -1;
			}

			if (subject7_3Avg <= 0 || cell7_3Avg == null || cell7_3Avg.equals("")) {
				grade7_3 = "";
			}
			table.addCell(cell7_3Avg);
			table.addCell(grade7_3);

			/*****************************************************************************************************
			 * Determining whether A,B,C,D,E,F,O
			 ******************************************************************************************************/

			if (!(grade7_1 == null) && !(grade7_1.equals(""))) {
				gradeValue7_1 = grade7_1.replaceAll("[^0-9]", "");
			} else {
				grade7_1 = "0";
				gradeValue7_1 = grade7_1.replaceAll("[^0-9]", "");
			}

			if (!(grade7_2 == null) && !(grade7_2.equals(""))) {
				gradeValue7_2 = grade7_2.replaceAll("[^0-9]", "");
			} else {
				grade7_2 = "0";
				gradeValue7_2 = grade7_2.replaceAll("[^0-9]", "");
			}

			if (!(grade7_3 == null) && !(grade7_3.equals(""))) {
				gradeValue7_3 = grade7_3.replaceAll("[^0-9]", "");
			} else {
				grade7_3 = "0";
				gradeValue7_3 = grade7_3.replaceAll("[^0-9]", "");
			}

			if (!gradeValue7_1.equals("")) {
				valuepaper7_1 = Double.parseDouble(gradeValue7_1);
			}

			if (!gradeValue7_2.equals("")) {
				valuepaper7_2 = Double.parseDouble(gradeValue7_2);
			}
			if (!gradeValue7_3.equals("")) {
				valuepaper7_3 = Double.parseDouble(gradeValue7_3);
			}

			if (fieldPapers7.getText().equals("1")) {
				averageValue = (valuepaper7_1);
			} else if (fieldPapers7.getText().equals("2")) {
				averageValue = (valuepaper7_1 + valuepaper7_2) / 2;
			} else if (fieldPapers7.getText().equals("3")) {
				averageValue = (valuepaper7_1 + valuepaper7_2 + valuepaper7_3) / 3;
			} else {
				JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
			}

			if (averageValue > 0 && averageValue <= 2.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "A";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA7c = new PdfPCell(gradeA7p);
			}

			if (averageValue > 2.5 && averageValue <= 3.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "B";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				gradeA7c = new PdfPCell(gradeA7p);
			}

			if (averageValue > 3.5 && averageValue <= 4.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "C";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				gradeA7c = new PdfPCell(gradeA7p);
			}

			if (averageValue > 4.5 && averageValue <= 5.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "D";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				gradeA7c = new PdfPCell(gradeA7p);
			}
			//
			if (averageValue > 5.5 && averageValue <= 6.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "E";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				gradeA7c = new PdfPCell(gradeA7p);
			}

			if (averageValue > 6.5 && averageValue <= 7.5) {
				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "O";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				gradeA7c = new PdfPCell(gradeA7p);
			}

			if (averageValue > 7.5 && averageValue <= 9) {

				if (valuepaper7_1 == 9 || valuepaper7_2 == 9 || valuepaper7_3 == 9) {
					gradeA7 = "O";
				} else {
					gradeA7 = "F";
				}
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA7c = new PdfPCell(gradeA7p);
			}
			if (averageValue <= 0) {

				gradeA7 = "";
				gradeA7p = new Paragraph(gradeA7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA7c = new PdfPCell(gradeA7p);
			}
			table.addCell(gradeA7c);

			/*****************************************************************************************************
			 * Comment will be based on A,B,C,D,E,F,O
			 ******************************************************************************************************/
			if (gradeA7.equals("A")) {
				pointA7 = 6;
				comment7 = "Excellent";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("B")) {
				pointA7 = 5;
				comment7 = "V.Good";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("C")) {
				pointA7 = 4;
				comment7 = "Good";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("D")) {
				pointA7 = 3;
				comment7 = "F.Good";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("E")) {
				pointA7 = 2;
				comment7 = "Fair";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("O")) {
				pointA7 = 1;
				comment7 = "Poor";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
				comment7c = new PdfPCell(comment7p);
			} else if (gradeA7.equals("F")) {
				pointA7 = 0;
				comment7 = "V.Poor";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment7c = new PdfPCell(comment7p);
			} else {
				pointA7 = 0;
				comment7 = "";
				comment7p = new Paragraph(comment7,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment7c = new PdfPCell(comment7p);
			}
			table.addCell(comment7c);

			table.addCell(new Paragraph(teachersInitials(subject7, endOfTermTest),
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

			compileRows10upto16ofTheTable(classNumber);

			document.add(table);

			/***************************************************
			 * Signatures, Stamp and Comments/Remarks, Points
			 ***************************************************/
			if (!(gradeValue13_1.equals("")) && !(gradeValue13_1.equals("-")) && !(gradeValue13_1 == null)) {
				double val13 = Double.parseDouble(gradeValue13_1);
				if ((val13 <= 6)) {

					subsidiaryPassA13 = 1;

				} else {
					subsidiaryPassA13 = 0;
				}

			} else {
				subsidiaryPassA13 = 0;
			}

			if (!(gradeValue14_1.equals("")) && !(gradeValue14_1.equals("-")) && !(gradeValue14_1 == null)) {
				double val14 = Double.parseDouble(gradeValue14_1);
				if ((val14 <= 6)) {

					subsidiaryPassA14 = 1;

				} else {
					subsidiaryPassA14 = 0;
				}

			} else {
				subsidiaryPassA14 = 0;
			}

			if (!(gradeValue15_1.equals("")) && !(gradeValue15_1.equals("-")) && !(gradeValue15_1 == null)) {
				double val15 = Double.parseDouble(gradeValue15_1);
				if ((val15 <= 6)) {

					subsidiaryPassA15 = 1;

				} else {
					subsidiaryPassA15 = 0;
				}

			} else {
				subsidiaryPassA15 = 0;
			}

			totalpoints = pointA1 + pointA2 + pointA3 + pointA4 + pointA5 + pointA6 + pointA7 + pointA8 + pointA9
					+ pointA10 + pointA11 + pointA12 + pointA16 + subsidiaryPassA13 + subsidiaryPassA14
					+ subsidiaryPassA15;

			if (pointA1 >= 2) {
				principalPassA1 = 1;
			} else {
				principalPassA1 = 0;
			}

			if (pointA2 >= 2) {
				principalPassA2 = 1;
			} else {
				principalPassA2 = 0;
			}

			if (pointA3 >= 2) {
				principalPassA3 = 1;
			} else {
				principalPassA3 = 0;
			}

			if (pointA4 >= 2) {
				principalPassA4 = 1;
			} else {
				principalPassA4 = 0;
			}

			if (pointA5 >= 2) {
				principalPassA5 = 1;
			} else {
				principalPassA5 = 0;
			}
			if (pointA6 >= 2) {
				principalPassA6 = 1;
			} else {
				principalPassA6 = 0;
			}
			if (pointA7 >= 2) {
				principalPassA7 = 1;
			} else {
				principalPassA7 = 0;
			}
			if (pointA8 >= 2) {
				principalPassA8 = 1;
			} else {
				principalPassA8 = 0;
			}
			if (pointA9 >= 2) {
				principalPassA9 = 1;
			} else {
				principalPassA9 = 0;
			}
			if (pointA10 >= 2) {
				principalPassA10 = 1;
			} else {
				principalPassA10 = 0;
			}
			if (pointA11 >= 2) {
				principalPassA11 = 1;
			} else {
				principalPassA11 = 0;
			}
			if (pointA12 >= 2) {
				principalPassA12 = 1;
			} else {
				principalPassA12 = 0;
			}

			if (pointA16 >= 2) {
				principalPassA16 = 1;
			} else {
				principalPassA16 = 0;
			}

			totalPrincipalPasses = principalPassA1 + principalPassA2 + principalPassA3 + principalPassA4
					+ principalPassA5 + principalPassA6 + principalPassA7 + principalPassA8 + principalPassA9
					+ principalPassA10 + principalPassA11 + principalPassA12 + principalPassA16;

			totalSubsidiaryPasses = subsidiaryPassA13 + subsidiaryPassA14 + subsidiaryPassA15;

			if (totalPrincipalPasses == 0) {
				commentPP = "No Principal Pass";
			} else if (totalPrincipalPasses == 1) {
				commentPP = totalPrincipalPasses + " Principal Pass";
			} else {
				commentPP = totalPrincipalPasses + " Principal Passes";
			}

			if (totalSubsidiaryPasses == 0) {
				commentSP = "No Subsidiary Pass";
			} else if (totalSubsidiaryPasses == 1) {
				commentSP = totalSubsidiaryPasses + " Subsidiary Pass";
			} else {
				commentSP = totalSubsidiaryPasses + " Subsidiary Passes";
			}

			if (totalpoints == 0) {
				commentPoint = "No Point";
			} else if (totalpoints == 1) {
				commentPoint = totalpoints + " Point";
			} else {
				commentPoint = totalpoints + " Points";
			}

			Paragraph pointsGot = new Paragraph(
					"Total Number of Points: " + commentPoint + " (" + commentPP + ", " + commentSP + ")");

			document.add(pointsGot);
			/***************************************************
			 * Creating footer and header of the report
			 ***************************************************/

			PdfContentByte over = writer.getDirectContent();
			Phrase footer = new Phrase(schoolName + ", TERMLY STUDENTS REPORT",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new BaseColor(0, 126, 156)));
			headerSchoolName = new Paragraph(schoolName,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 20, Font.BOLD, new BaseColor(0, 126, 156)));

			// tableHeader.writeSelectedRows(0, -1, document.left(), document.top() + 16,
			// over);

			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, headerSchoolName,
					(document.right() - document.left()) / 2 + document.leftMargin(), document.top(), 0);

			ColumnText.showTextAligned(over, Element.ALIGN_CENTER, footer,
					(document.right() - document.left()) / 2 + document.leftMargin(), document.bottom(), 0);

			/***************************************************
			 * Signatures, Stamp and Comments/Remarks
			 ***************************************************/
			Paragraph classTeacher = new Paragraph(
					"Class Teacher's Remarks:................................................................................Sgnature..............................................");
			Paragraph headTeacher = new Paragraph(
					"Head Teacher's Remarks:.................................................................................Signature.............................................");

			document.add(classTeacher);
			document.add(headTeacher);

			document.add(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));

			document.add(new Paragraph(
					"Next Term Begins On:.....................................................And Ends On:............................................................................................",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			document.add(
					new Paragraph(".", FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, BaseColor.WHITE)));

			document.add(new Paragraph("School Stamp ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));

			/*****************************************************************************
			 * Grading Scale
			 *****************************************************************************/
			MARKS = new Paragraph("MARKS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			distinction1 = new Paragraph("1.0-2.5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			distinction2 = new Paragraph("2.6-3.5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit3 = new Paragraph("3.6-4.5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit4 = new Paragraph("4.6-5.5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit5 = new Paragraph("5.6-6.5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit6 = new Paragraph("6.6-8.0",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			pass7 = new Paragraph("8.1-8.9",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			GRADE = new Paragraph("GRADE",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			distinction1V = new Paragraph("A",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			distinction2V = new Paragraph("B",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit3V = new Paragraph("C",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit4V = new Paragraph("D",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit5V = new Paragraph("E",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			credit6V = new Paragraph("O",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			pass7V = new Paragraph("F", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			Points = new Paragraph("POINTS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			SixPoints = new Paragraph("6",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			FivePoints = new Paragraph("5",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			FourPoints = new Paragraph("4",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ThreePoints = new Paragraph("3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			TwoPoints = new Paragraph("2",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			OnePoints = new Paragraph("1",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ZeroPoints = new Paragraph("0",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			ForTwo = new Paragraph("FOR 2 PAPERS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			SixForTwo = new Paragraph("All must be distinctions",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			FiveForTwo = new Paragraph("At worst C3 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			FourForTwo = new Paragraph("At worst C4 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ThreeForTwo = new Paragraph("At worst C5 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			TwoForTwo = new Paragraph("At worst P7 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			OneForTwo = new Paragraph("One Pass and better score; OR F9 in any",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ZeroForTwo = new Paragraph("F9 in one and a pass in the other",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			ForThree = new Paragraph("FOR 3 PAPERS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			SixForThree = new Paragraph("At worst C4 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			FiveForThree = new Paragraph("At worst C4 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			FourForThree = new Paragraph("At worst C5 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ThreeForThree = new Paragraph("At worst C6 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			TwoForThree = new Paragraph("At worst P8 in one",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			OneForThree = new Paragraph("At worst 2Passes OR F9 with the rest between D1-C6",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));
			ZeroForThree = new Paragraph("At worst 2 F9s OR an F9 with two P8s",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK));

			PdfPTable tableGrading = new PdfPTable(8);
			tableGrading.addCell(MARKS);
			tableGrading.addCell(distinction1);
			tableGrading.addCell(distinction2);
			tableGrading.addCell(credit3);
			tableGrading.addCell(credit4);
			tableGrading.addCell(credit5);
			tableGrading.addCell(credit6);
			tableGrading.addCell(pass7);
			tableGrading.addCell(GRADE);
			tableGrading.addCell(distinction1V);
			tableGrading.addCell(distinction2V);
			tableGrading.addCell(credit3V);
			tableGrading.addCell(credit4V);
			tableGrading.addCell(credit5V);
			tableGrading.addCell(credit6V);
			tableGrading.addCell(pass7V);

			tableGrading.addCell(Points);
			tableGrading.addCell(SixPoints);
			tableGrading.addCell(FivePoints);
			tableGrading.addCell(FourPoints);
			tableGrading.addCell(ThreePoints);
			tableGrading.addCell(TwoPoints);
			tableGrading.addCell(OnePoints);
			tableGrading.addCell(ZeroPoints);

			tableGrading.addCell(ForTwo);
			tableGrading.addCell(SixForTwo);
			tableGrading.addCell(FiveForTwo);
			tableGrading.addCell(FourForTwo);
			tableGrading.addCell(ThreeForTwo);
			tableGrading.addCell(TwoForTwo);
			tableGrading.addCell(OneForTwo);
			tableGrading.addCell(ZeroForTwo);

			tableGrading.addCell(ForThree);
			tableGrading.addCell(SixForThree);
			tableGrading.addCell(FiveForThree);
			tableGrading.addCell(FourForThree);
			tableGrading.addCell(ThreeForThree);
			tableGrading.addCell(TwoForThree);
			tableGrading.addCell(OneForThree);
			tableGrading.addCell(ZeroForThree);

			tableGrading.setWidthPercentage(100);

			document.add(new Paragraph(" ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156))));
			document.add(new Paragraph("KEY",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));
			document.add(new Paragraph(" ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 2, Font.BOLD, new BaseColor(0, 126, 156))));
			tableKeys = new PdfPTable(6);
			tableKeys.setWidthPercentage(100);
			tableKeys.addCell(new PdfPCell(new Paragraph("ABBREVIATION",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, new BaseColor(0, 86, 156)))));
			tableKeys.addCell(new PdfPCell(new Paragraph("P1,P2,P3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Av1,Av2,Av3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Gr1,Gr2,Gr3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("BOT,EOT",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("IN'Ls",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("MEANING",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, new BaseColor(0, 86, 156)))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Paper 1,2,3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Average of P1,2,3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Grade of P1,2,3",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("Beginning,End of Term",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			tableKeys.addCell(new PdfPCell(new Paragraph("INITIALS",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.NORMAL, BaseColor.BLACK))));
			document.add(tableKeys);

			document.add(new Paragraph(" ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 4, Font.BOLD, new BaseColor(0, 126, 156))));

			document.add(new Paragraph("STANDARD GRADING SCALE",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 10, Font.BOLD, new BaseColor(0, 126, 156))));
			document.add(new Paragraph(" ",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 2, Font.BOLD, new BaseColor(0, 126, 156))));

			document.add(tableGrading);
			/***************************************************
			 * Adding border to the report
			 ***************************************************/
			Rectangle rect = new Rectangle(577, 825, 8, 15);
			rect.enableBorderSide(1);
			rect.enableBorderSide(2);
			rect.enableBorderSide(4);
			rect.enableBorderSide(8);
			rect.setBorderColor(new BaseColor(0, 126, 156));
			rect.setBorderWidth(2);
			document.add(rect);

			/***************************************************
			 * Alerting us for successful creation of the report
			 ***************************************************/

			// JOptionPane.showMessageDialog(null, "Report generated successfully");

			/**************************************************
			 * Close the report reading through---you're done
			 **************************************************/

			document.close();
			/***************************************************
			 * Text & Image Watermark with transparent background
			 ***************************************************/

			// File file = new File(DESTA);
			// file.getParentFile().mkdirs();
			// try {
			// new AutoGeneratingAndPrintingReportCards().manipulatePdfAlevel(SRCA, DESTA);
			// } catch (IOException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (DocumentException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void compileRows10upto16ofTheTable(String classNumber) {

		/***********************************************
		 * Subject Number 8
		 ************************************************/

		ResultSet Subject8;
		try {

			Subject8 = generateCellValue("SELECT subject_name from student_subjectsa where id=8");
			if (Subject8.next()) {
				subject8 = Subject8.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum8 = new PdfPCell(
				new Paragraph("8", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum8 = new PdfPCell(
				new Paragraph(subject8, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum8);
		table.addCell(subNum8);
		ResultSet MoT8_1;
		try {

			MoT8_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT8_1.next()) {
				mot8_1 = MoT8_1.getString(1);

			} else {
				mot8_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT8_2;
		try {

			MoT8_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT8_2.next()) {
				mot8_2 = MoT8_2.getString(1);

			} else {
				mot8_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT8_3;
		try {

			MoT8_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT8_3.next()) {
				mot8_3 = MoT8_3.getString(1);

			} else {
				mot8_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT8_1;
		try {

			EoT8_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT8_1.next()) {
				eot8_1 = EoT8_1.getString(1);

			} else {
				eot8_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT8_2;
		try {

			EoT8_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT8_2.next()) {
				eot8_2 = EoT8_2.getString(1);

			} else {
				eot8_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT8_3;
		try {

			EoT8_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject8
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT8_3.next()) {
				eot8_3 = EoT8_3.getString(1);

			} else {
				eot8_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered8;
		try {

			Subjectoffered8 = generateCellValue("select `" + subject8 + "` from subjects_offereda where payment_code='"
					+ labelPaymentCode.getText() + "'");
			if (Subjectoffered8.next()) {

				yes8 = Subjectoffered8.getInt(1);

			} else {
				yes8 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes8 == 1) {

			if (fieldPapers8.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot8_1 == null) && !(eot8_1.equals("-")) && !(eot8_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (intmot8_1 + inteot8_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_1 = "-";
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (inteot8_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_1 = "-";

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						subject8_1Avg = (intmot8_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_1 = "-";
						subject8_1Avg = -1;
					}
				}

				mot8_2 = "";
				eot8_2 = "";
				mot8_3 = "";
				eot8_3 = "";
				subject8_2Avg = -1;
				subject8_3Avg = -1;

			} else if (fieldPapers8.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot8_1 == null) && !(eot8_1.equals("-")) && !(eot8_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (intmot8_1 + inteot8_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_1 = "-";
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (inteot8_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_1 = "-";

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						subject8_1Avg = (intmot8_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_1 = "-";
						subject8_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot8_2 == null) && !(eot8_2.equals("-")) && !(eot8_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_2 == null) && !(mot8_2.equals("-")) && !(mot8_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_2 = Double.parseDouble(mot8_2);
						inteot8_2 = Double.parseDouble(eot8_2);
						subject8_2Avg = (intmot8_2 + inteot8_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_2 = "-";
						inteot8_2 = Double.parseDouble(eot8_2);
						subject8_2Avg = (inteot8_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_2 = "-";

					if (!(mot8_2 == null) && !(mot8_2.equals("-")) && !(mot8_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_2 = Double.parseDouble(mot8_2);
						subject8_2Avg = (intmot8_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_2 = "-";
						subject8_2Avg = -1;
					}
				}

				mot8_3 = "";
				eot8_3 = "";
				subject8_3Avg = -1;

			} else if (fieldPapers8.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot8_1 == null) && !(eot8_1.equals("-")) && !(eot8_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (intmot8_1 + inteot8_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_1 = "-";
						inteot8_1 = Double.parseDouble(eot8_1);
						subject8_1Avg = (inteot8_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_1 = "-";

					if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_1 = Double.parseDouble(mot8_1);
						subject8_1Avg = (intmot8_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_1 = "-";
						subject8_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot8_2 == null) && !(eot8_2.equals("-")) && !(eot8_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_2 == null) && !(mot8_2.equals("-")) && !(mot8_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_2 = Double.parseDouble(mot8_2);
						inteot8_2 = Double.parseDouble(eot8_2);
						subject8_2Avg = (intmot8_2 + inteot8_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_2 = "-";
						inteot8_2 = Double.parseDouble(eot8_2);
						subject8_2Avg = (inteot8_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_2 = "-";

					if (!(mot8_2 == null) && !(mot8_2.equals("-")) && !(mot8_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_2 = Double.parseDouble(mot8_2);
						subject8_2Avg = (intmot8_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_2 = "-";
						subject8_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot8_3 == null) && !(eot8_3.equals("-")) && !(eot8_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot8_3 == null) && !(mot8_3.equals("-")) && !(mot8_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot8_3 = Double.parseDouble(mot8_3);
						inteot8_3 = Double.parseDouble(eot8_3);
						subject8_3Avg = (intmot8_3 + inteot8_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot8_3 = "-";
						inteot8_3 = Double.parseDouble(eot8_3);
						subject8_3Avg = (inteot8_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot8_3 = "-";

					if (!(mot8_3 == null) && !(mot8_3.equals("-")) && !(mot8_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot8_3 = Double.parseDouble(mot8_3);
						subject8_3Avg = (intmot8_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot8_3 = "-";
						subject8_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot8_1 = "";
			eot8_1 = "";
			subject8_1Avg = -1;
			mot8_2 = "";
			eot8_2 = "";
			subject8_2Avg = -1;
			mot8_3 = "";
			eot8_3 = "";
			subject8_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot8_1 == null) && !(mot8_1.equals("-")) && !(mot8_1.equals(""))) {
			double colormot8_1 = Double.parseDouble(mot8_1);
			if (colormot8_1 <= 50) {
				mot8_1p = new Paragraph(mot8_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot8_1p = new Paragraph(mot8_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot8_1p = new Paragraph(mot8_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot8_2 == null) && !(mot8_2.equals("-")) && !(mot8_2.equals(""))) {
			double colormot8_2 = Double.parseDouble(mot8_2);
			if (colormot8_2 <= 50) {
				mot8_2p = new Paragraph(mot8_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot8_2p = new Paragraph(mot8_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot8_2p = new Paragraph(mot8_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot8_3 == null) && !(mot8_3.equals("-")) && !(mot8_3.equals(""))) {
			double colormot8_3 = Double.parseDouble(mot8_3);
			if (colormot8_3 <= 50) {
				mot8_3p = new Paragraph(mot8_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot8_3p = new Paragraph(mot8_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot8_3p = new Paragraph(mot8_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot8_1 == null) && !(eot8_1.equals("-")) && !(eot8_1.equals(""))) {
			double coloreot8_1 = Double.parseDouble(eot8_1);
			if (coloreot8_1 <= 50) {
				eot8_1p = new Paragraph(eot8_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot8_1p = new Paragraph(eot8_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot8_1p = new Paragraph(eot8_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot8_2 == null) && !(eot8_2.equals("-")) && !(eot8_2.equals(""))) {
			double coloreot8_2 = Double.parseDouble(eot8_2);
			if (coloreot8_2 <= 50) {
				eot8_2p = new Paragraph(eot8_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot8_2p = new Paragraph(eot8_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot8_2p = new Paragraph(eot8_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot8_3 == null) && !(eot8_3.equals("-")) && !(eot8_3.equals(""))) {
			double coloreot8_3 = Double.parseDouble(eot8_3);
			if (coloreot8_3 <= 50) {
				eot8_3p = new Paragraph(eot8_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot8_3p = new Paragraph(eot8_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot8_3p = new Paragraph(eot8_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot8_1 = new PdfPCell(mot8_1p);
		PdfPCell cellmot8_2 = new PdfPCell(mot8_2p);
		PdfPCell cellmot8_3 = new PdfPCell(mot8_3p);
		PdfPCell celleot8_1 = new PdfPCell(eot8_1p);
		PdfPCell celleot8_2 = new PdfPCell(eot8_2p);
		PdfPCell celleot8_3 = new PdfPCell(eot8_3p);

		table.addCell(cellmot8_1);
		table.addCell(cellmot8_2);
		table.addCell(cellmot8_3);

		table.addCell(celleot8_1);
		table.addCell(celleot8_2);
		table.addCell(celleot8_3);

		if (subject8_1Avg == -1) {
			cell8_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell8_1Avg = new PdfPCell(new Paragraph("" + subject8_1Avg));
		}

		if (subject8_2Avg == -1) {
			cell8_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell8_2Avg = new PdfPCell(new Paragraph("" + subject8_2Avg));
		}

		if (subject8_3Avg == -1) {
			cell8_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell8_3Avg = new PdfPCell(new Paragraph("" + subject8_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject8_1Avg > 0) {

			if (mot8_1.equals("-")) {
				SQL8_1 = "select DISTINCT (CASE WHEN " + subject8_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL8_1 = "select DISTINCT (CASE WHEN " + subject8_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade8_1;
			try {

				Grade8_1 = generateCellValue(SQL8_1);
				if (Grade8_1.next()) {
					grade8_1 = Grade8_1.getString(1);

				} else {
					grade8_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject8_1Avg = -1;
		}

		if (subject8_1Avg <= 0 || cell8_1Avg == null || cell8_1Avg.equals("")) {
			grade8_1 = "";
		} else {
			grade8_1 = grade8_1;
		}
		table.addCell(cell8_1Avg);
		table.addCell(grade8_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject8_2Avg > 0) {

			if (mot8_2.equals("-")) {

				SQL8_2 = "select DISTINCT (CASE WHEN " + subject8_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade8_2;
				try {

					Grade8_2 = generateCellValue(SQL8_2);
					if (Grade8_2.next()) {
						grade8_2 = Grade8_2.getString(1);

					} else {
						grade8_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL8_2 = "select DISTINCT (CASE WHEN " + subject8_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade8_2;
				try {

					Grade8_2 = generateCellValue(SQL8_2);
					if (Grade8_2.next()) {
						grade8_2 = Grade8_2.getString(1);

					} else {
						grade8_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject8_2Avg = -1;
		}

		if (subject8_2Avg <= 0 || cell8_2Avg == null || cell8_2Avg.equals("")) {
			grade8_2 = "";
		}
		table.addCell(cell8_2Avg);
		table.addCell(grade8_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject8_3Avg > 0) {

			if (mot8_3.equals("-")) {
				SQL8_3 = "select DISTINCT (CASE WHEN " + subject8_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade8_3;
				try {

					Grade8_3 = generateCellValue(SQL8_3);
					if (Grade8_3.next()) {
						grade8_3 = Grade8_3.getString(1);

					} else {
						grade8_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL8_3 = "select DISTINCT (CASE WHEN " + subject8_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject8
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject8 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject8_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject8 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade8_3;
				try {

					Grade8_3 = generateCellValue(SQL8_3);
					if (Grade8_3.next()) {
						grade8_3 = Grade8_3.getString(1);

					} else {
						grade8_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject8_3Avg = -1;
		}

		if (subject8_3Avg <= 0 || cell8_3Avg == null || cell8_3Avg.equals("")) {
			grade8_3 = "";
		}
		table.addCell(cell8_3Avg);
		table.addCell(grade8_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade8_1 == null) && !(grade8_1.equals(""))) {
			gradeValue8_1 = grade8_1.replaceAll("[^0-9]", "");
		} else {
			grade8_1 = "0";
			gradeValue8_1 = grade8_1.replaceAll("[^0-9]", "");
		}

		if (!(grade8_2 == null) && !(grade8_2.equals(""))) {
			gradeValue8_2 = grade8_2.replaceAll("[^0-9]", "");
		} else {
			grade8_2 = "0";
			gradeValue8_2 = grade8_2.replaceAll("[^0-9]", "");
		}

		if (!(grade8_3 == null) && !(grade8_3.equals(""))) {
			gradeValue8_3 = grade8_3.replaceAll("[^0-9]", "");
		} else {
			grade8_3 = "0";
			gradeValue8_3 = grade8_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue8_1.equals("")) {
			valuepaper8_1 = Double.parseDouble(gradeValue8_1);
		}

		if (!gradeValue8_2.equals("")) {
			valuepaper8_2 = Double.parseDouble(gradeValue8_2);
		}
		if (!gradeValue8_3.equals("")) {
			valuepaper8_3 = Double.parseDouble(gradeValue8_3);
		}

		if (fieldPapers8.getText().equals("1")) {
			averageValue = (valuepaper8_1);
		} else if (fieldPapers8.getText().equals("2")) {
			averageValue = (valuepaper8_1 + valuepaper8_2) / 2;
		} else if (fieldPapers8.getText().equals("3")) {
			averageValue = (valuepaper8_1 + valuepaper8_2 + valuepaper8_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "A";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA8c = new PdfPCell(gradeA8p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "B";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA8c = new PdfPCell(gradeA8p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "C";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA8c = new PdfPCell(gradeA8p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "D";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA8c = new PdfPCell(gradeA8p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "E";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA8c = new PdfPCell(gradeA8p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "O";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA8c = new PdfPCell(gradeA8p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper8_1 == 9 || valuepaper8_2 == 9 || valuepaper8_3 == 9) {
				gradeA8 = "O";
			} else {
				gradeA8 = "F";
			}
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA8c = new PdfPCell(gradeA8p);
		}
		if (averageValue <= 0) {

			gradeA8 = "";
			gradeA8p = new Paragraph(gradeA8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA8c = new PdfPCell(gradeA8p);
		}
		table.addCell(gradeA8c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA8.equals("A")) {
			pointA8 = 6;
			comment8 = "Excellent";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("B")) {
			pointA8 = 5;
			comment8 = "V.Good";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("C")) {
			pointA8 = 4;
			comment8 = "Good";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("D")) {
			pointA8 = 3;
			comment8 = "F.Good";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("E")) {
			pointA8 = 2;
			comment8 = "Fair";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("O")) {
			pointA8 = 1;
			comment8 = "Poor";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment8c = new PdfPCell(comment8p);
		} else if (gradeA8.equals("F")) {
			pointA8 = 0;
			comment8 = "V.Poor";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment8c = new PdfPCell(comment8p);
		} else {
			pointA8 = 0;
			comment8 = "";
			comment8p = new Paragraph(comment8,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment8c = new PdfPCell(comment8p);
		}

		table.addCell(comment8c);

		table.addCell(new Paragraph(teachersInitials(subject8, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		/***********************************************
		 * Subject Number 9
		 ************************************************/

		ResultSet Subject9;
		try {

			Subject9 = generateCellValue("SELECT subject_name from student_subjectsa where id=9");
			if (Subject9.next()) {
				subject9 = Subject9.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum9 = new PdfPCell(
				new Paragraph("9", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum9 = new PdfPCell(
				new Paragraph(subject9, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum9);
		table.addCell(subNum9);
		ResultSet MoT9_1;
		try {

			MoT9_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT9_1.next()) {
				mot9_1 = MoT9_1.getString(1);

			} else {
				mot9_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT9_2;
		try {

			MoT9_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT9_2.next()) {
				mot9_2 = MoT9_2.getString(1);

			} else {
				mot9_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT9_3;
		try {

			MoT9_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT9_3.next()) {
				mot9_3 = MoT9_3.getString(1);

			} else {
				mot9_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT9_1;
		try {

			EoT9_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT9_1.next()) {
				eot9_1 = EoT9_1.getString(1);

			} else {
				eot9_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT9_2;
		try {

			EoT9_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT9_2.next()) {
				eot9_2 = EoT9_2.getString(1);

			} else {
				eot9_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT9_3;
		try {

			EoT9_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject9
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT9_3.next()) {
				eot9_3 = EoT9_3.getString(1);

			} else {
				eot9_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered9;
		try {

			Subjectoffered9 = generateCellValue("select `" + subject9 + "` from subjects_offereda where payment_code='"
					+ labelPaymentCode.getText() + "'");
			if (Subjectoffered9.next()) {

				yes9 = Subjectoffered9.getInt(1);

			} else {
				yes9 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes9 == 1) {

			if (fieldPapers9.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot9_1 == null) && !(eot9_1.equals("-")) && !(eot9_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (intmot9_1 + inteot9_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_1 = "-";
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (inteot9_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_1 = "-";

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						subject9_1Avg = (intmot9_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_1 = "-";
						subject9_1Avg = -1;
					}
				}

				mot9_2 = "";
				eot9_2 = "";
				mot9_3 = "";
				eot9_3 = "";
				subject9_2Avg = -1;
				subject9_3Avg = -1;

			} else if (fieldPapers9.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot9_1 == null) && !(eot9_1.equals("-")) && !(eot9_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (intmot9_1 + inteot9_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_1 = "-";
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (inteot9_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_1 = "-";

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						subject9_1Avg = (intmot9_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_1 = "-";
						subject9_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot9_2 == null) && !(eot9_2.equals("-")) && !(eot9_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_2 == null) && !(mot9_2.equals("-")) && !(mot9_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_2 = Double.parseDouble(mot9_2);
						inteot9_2 = Double.parseDouble(eot9_2);
						subject9_2Avg = (intmot9_2 + inteot9_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_2 = "-";
						inteot9_2 = Double.parseDouble(eot9_2);
						subject9_2Avg = (inteot9_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_2 = "-";

					if (!(mot9_2 == null) && !(mot9_2.equals("-")) && !(mot9_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_2 = Double.parseDouble(mot9_2);
						subject9_2Avg = (intmot9_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_2 = "-";
						subject9_2Avg = -1;
					}
				}

				mot9_3 = "";
				eot9_3 = "";
				subject9_3Avg = -1;

			} else if (fieldPapers9.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot9_1 == null) && !(eot9_1.equals("-")) && !(eot9_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (intmot9_1 + inteot9_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_1 = "-";
						inteot9_1 = Double.parseDouble(eot9_1);
						subject9_1Avg = (inteot9_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_1 = "-";

					if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_1 = Double.parseDouble(mot9_1);
						subject9_1Avg = (intmot9_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_1 = "-";
						subject9_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot9_2 == null) && !(eot9_2.equals("-")) && !(eot9_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_2 == null) && !(mot9_2.equals("-")) && !(mot9_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_2 = Double.parseDouble(mot9_2);
						inteot9_2 = Double.parseDouble(eot9_2);
						subject9_2Avg = (intmot9_2 + inteot9_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_2 = "-";
						inteot9_2 = Double.parseDouble(eot9_2);
						subject9_2Avg = (inteot9_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_2 = "-";

					if (!(mot9_2 == null) && !(mot9_2.equals("-")) && !(mot9_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_2 = Double.parseDouble(mot9_2);
						subject9_2Avg = (intmot9_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_2 = "-";
						subject9_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot9_3 == null) && !(eot9_3.equals("-")) && !(eot9_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot9_3 == null) && !(mot9_3.equals("-")) && !(mot9_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot9_3 = Double.parseDouble(mot9_3);
						inteot9_3 = Double.parseDouble(eot9_3);
						subject9_3Avg = (intmot9_3 + inteot9_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot9_3 = "-";
						inteot9_3 = Double.parseDouble(eot9_3);
						subject9_3Avg = (inteot9_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot9_3 = "-";

					if (!(mot9_3 == null) && !(mot9_3.equals("-")) && !(mot9_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot9_3 = Double.parseDouble(mot9_3);
						subject9_3Avg = (intmot9_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot9_3 = "-";
						subject9_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot9_1 = "";
			eot9_1 = "";
			subject9_1Avg = -1;
			mot9_2 = "";
			eot9_2 = "";
			subject9_2Avg = -1;
			mot9_3 = "";
			eot9_3 = "";
			subject9_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot9_1 == null) && !(mot9_1.equals("-")) && !(mot9_1.equals(""))) {
			double colormot9_1 = Double.parseDouble(mot9_1);
			if (colormot9_1 <= 50) {
				mot9_1p = new Paragraph(mot9_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot9_1p = new Paragraph(mot9_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot9_1p = new Paragraph(mot9_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot9_2 == null) && !(mot9_2.equals("-")) && !(mot9_2.equals(""))) {
			double colormot9_2 = Double.parseDouble(mot9_2);
			if (colormot9_2 <= 50) {
				mot9_2p = new Paragraph(mot9_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot9_2p = new Paragraph(mot9_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot9_2p = new Paragraph(mot9_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot9_3 == null) && !(mot9_3.equals("-")) && !(mot9_3.equals(""))) {
			double colormot9_3 = Double.parseDouble(mot9_3);
			if (colormot9_3 <= 50) {
				mot9_3p = new Paragraph(mot9_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot9_3p = new Paragraph(mot9_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot9_3p = new Paragraph(mot9_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot9_1 == null) && !(eot9_1.equals("-")) && !(eot9_1.equals(""))) {
			double coloreot9_1 = Double.parseDouble(eot9_1);
			if (coloreot9_1 <= 50) {
				eot9_1p = new Paragraph(eot9_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot9_1p = new Paragraph(eot9_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot9_1p = new Paragraph(eot9_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot9_2 == null) && !(eot9_2.equals("-")) && !(eot9_2.equals(""))) {
			double coloreot9_2 = Double.parseDouble(eot9_2);
			if (coloreot9_2 <= 50) {
				eot9_2p = new Paragraph(eot9_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot9_2p = new Paragraph(eot9_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot9_2p = new Paragraph(eot9_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot9_3 == null) && !(eot9_3.equals("-")) && !(eot9_3.equals(""))) {
			double coloreot9_3 = Double.parseDouble(eot9_3);
			if (coloreot9_3 <= 50) {
				eot9_3p = new Paragraph(eot9_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot9_3p = new Paragraph(eot9_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot9_3p = new Paragraph(eot9_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot9_1 = new PdfPCell(mot9_1p);
		PdfPCell cellmot9_2 = new PdfPCell(mot9_2p);
		PdfPCell cellmot9_3 = new PdfPCell(mot9_3p);
		PdfPCell celleot9_1 = new PdfPCell(eot9_1p);
		PdfPCell celleot9_2 = new PdfPCell(eot9_2p);
		PdfPCell celleot9_3 = new PdfPCell(eot9_3p);

		table.addCell(cellmot9_1);
		table.addCell(cellmot9_2);
		table.addCell(cellmot9_3);

		table.addCell(celleot9_1);
		table.addCell(celleot9_2);
		table.addCell(celleot9_3);

		if (subject9_1Avg == -1) {
			cell9_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell9_1Avg = new PdfPCell(new Paragraph("" + subject9_1Avg));
		}

		if (subject9_2Avg == -1) {
			cell9_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell9_2Avg = new PdfPCell(new Paragraph("" + subject9_2Avg));
		}

		if (subject9_3Avg == -1) {
			cell9_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell9_3Avg = new PdfPCell(new Paragraph("" + subject9_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject9_1Avg > 0) {

			if (mot9_1.equals("-")) {
				SQL9_1 = "select DISTINCT (CASE WHEN " + subject9_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL9_1 = "select DISTINCT (CASE WHEN " + subject9_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade9_1;
			try {

				Grade9_1 = generateCellValue(SQL9_1);
				if (Grade9_1.next()) {
					grade9_1 = Grade9_1.getString(1);

				} else {
					grade9_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject9_1Avg = -1;
		}

		if (subject9_1Avg <= 0 || cell9_1Avg == null || cell9_1Avg.equals("")) {
			grade9_1 = "";
		} else {
			grade9_1 = grade9_1;
		}
		table.addCell(cell9_1Avg);
		table.addCell(grade9_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject9_2Avg > 0) {

			if (mot9_2.equals("-")) {

				SQL9_2 = "select DISTINCT (CASE WHEN " + subject9_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade9_2;
				try {

					Grade9_2 = generateCellValue(SQL9_2);
					if (Grade9_2.next()) {
						grade9_2 = Grade9_2.getString(1);

					} else {
						grade9_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL9_2 = "select DISTINCT (CASE WHEN " + subject9_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade9_2;
				try {

					Grade9_2 = generateCellValue(SQL9_2);
					if (Grade9_2.next()) {
						grade9_2 = Grade9_2.getString(1);

					} else {
						grade9_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject9_2Avg = -1;
		}

		if (subject9_2Avg <= 0 || cell9_2Avg == null || cell9_2Avg.equals("")) {
			grade9_2 = "";
		}
		table.addCell(cell9_2Avg);
		table.addCell(grade9_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject9_3Avg > 0) {

			if (mot9_3.equals("-")) {
				SQL9_3 = "select DISTINCT (CASE WHEN " + subject9_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade9_3;
				try {

					Grade9_3 = generateCellValue(SQL9_3);
					if (Grade9_3.next()) {
						grade9_3 = Grade9_3.getString(1);

					} else {
						grade9_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL9_3 = "select DISTINCT (CASE WHEN " + subject9_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject9
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject9 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject9_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject9 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade9_3;
				try {

					Grade9_3 = generateCellValue(SQL9_3);
					if (Grade9_3.next()) {
						grade9_3 = Grade9_3.getString(1);

					} else {
						grade9_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject9_3Avg = -1;
		}

		if (subject9_3Avg <= 0 || cell9_3Avg == null || cell9_3Avg.equals("")) {
			grade9_3 = "";
		}
		table.addCell(cell9_3Avg);
		table.addCell(grade9_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade9_1 == null) && !(grade9_1.equals(""))) {
			gradeValue9_1 = grade9_1.replaceAll("[^0-9]", "");
		} else {
			grade9_1 = "0";
			gradeValue9_1 = grade9_1.replaceAll("[^0-9]", "");
		}

		if (!(grade9_2 == null) && !(grade9_2.equals(""))) {
			gradeValue9_2 = grade9_2.replaceAll("[^0-9]", "");
		} else {
			grade9_2 = "0";
			gradeValue9_2 = grade9_2.replaceAll("[^0-9]", "");
		}

		if (!(grade9_3 == null) && !(grade9_3.equals(""))) {
			gradeValue9_3 = grade9_3.replaceAll("[^0-9]", "");
		} else {
			grade9_3 = "0";
			gradeValue9_3 = grade9_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue9_1.equals("")) {
			valuepaper9_1 = Double.parseDouble(gradeValue9_1);
		}

		if (!gradeValue9_2.equals("")) {
			valuepaper9_2 = Double.parseDouble(gradeValue9_2);
		}
		if (!gradeValue9_3.equals("")) {
			valuepaper9_3 = Double.parseDouble(gradeValue9_3);
		}

		if (fieldPapers9.getText().equals("1")) {
			averageValue = (valuepaper9_1);
		} else if (fieldPapers9.getText().equals("2")) {
			averageValue = (valuepaper9_1 + valuepaper9_2) / 2;
		} else if (fieldPapers9.getText().equals("3")) {
			averageValue = (valuepaper9_1 + valuepaper9_2 + valuepaper9_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "A";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "B";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "C";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "D";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA9c = new PdfPCell(gradeA9p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "E";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "O";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper9_1 == 9 || valuepaper9_2 == 9 || valuepaper9_3 == 9) {
				gradeA9 = "O";
			} else {
				gradeA9 = "F";
			}
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA9c = new PdfPCell(gradeA9p);
		}
		if (averageValue <= 0) {

			gradeA9 = "";
			gradeA9p = new Paragraph(gradeA9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA9c = new PdfPCell(gradeA9p);
		}

		table.addCell(gradeA9c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA9.equals("A")) {
			pointA9 = 6;
			comment9 = "Excellent";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("B")) {
			pointA9 = 5;
			comment9 = "V.Good";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("C")) {
			pointA9 = 4;
			comment9 = "Good";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("D")) {
			pointA9 = 3;
			comment9 = "F.Good";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("E")) {
			pointA9 = 2;
			comment9 = "Fair";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("O")) {
			pointA9 = 1;
			comment9 = "Poor";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment9c = new PdfPCell(comment9p);
		} else if (gradeA9.equals("F")) {
			pointA9 = 0;
			comment9 = "V.Poor";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment9c = new PdfPCell(comment9p);
		} else {
			pointA9 = 0;
			comment9 = "";
			comment9p = new Paragraph(comment9,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment9c = new PdfPCell(comment9p);
		}

		table.addCell(comment9c);

		table.addCell(new Paragraph(teachersInitials(subject9, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 10
		 ************************************************/

		ResultSet Subject10;
		try {

			Subject10 = generateCellValue("SELECT subject_name from student_subjectsa where id=10");
			if (Subject10.next()) {
				subject10 = Subject10.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum10 = new PdfPCell(
				new Paragraph("10", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum10 = new PdfPCell(
				new Paragraph(subject10, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum10);
		table.addCell(subNum10);
		ResultSet MoT10_1;
		try {

			MoT10_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT10_1.next()) {
				mot10_1 = MoT10_1.getString(1);

			} else {
				mot10_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT10_2;
		try {

			MoT10_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT10_2.next()) {
				mot10_2 = MoT10_2.getString(1);

			} else {
				mot10_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT10_3;
		try {

			MoT10_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT10_3.next()) {
				mot10_3 = MoT10_3.getString(1);

			} else {
				mot10_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT10_1;
		try {

			EoT10_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT10_1.next()) {
				eot10_1 = EoT10_1.getString(1);

			} else {
				eot10_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT10_2;
		try {

			EoT10_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT10_2.next()) {
				eot10_2 = EoT10_2.getString(1);

			} else {
				eot10_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT10_3;
		try {

			EoT10_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject10
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT10_3.next()) {
				eot10_3 = EoT10_3.getString(1);

			} else {
				eot10_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered10;
		try {

			Subjectoffered10 = generateCellValue("select `" + subject10
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered10.next()) {

				yes10 = Subjectoffered10.getInt(1);

			} else {
				yes10 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (yes10 == 1) {

			if (fieldPapers10.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot10_1 == null) && !(eot10_1.equals("-")) && !(eot10_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (intmot10_1 + inteot10_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_1 = "-";
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (inteot10_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_1 = "-";

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						subject10_1Avg = (intmot10_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_1 = "-";
						subject10_1Avg = -1;
					}
				}

				mot10_2 = "";
				eot10_2 = "";
				mot10_3 = "";
				eot10_3 = "";
				subject10_2Avg = -1;
				subject10_3Avg = -1;

			} else if (fieldPapers10.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot10_1 == null) && !(eot10_1.equals("-")) && !(eot10_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (intmot10_1 + inteot10_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_1 = "-";
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (inteot10_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_1 = "-";

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						subject10_1Avg = (intmot10_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_1 = "-";
						subject10_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot10_2 == null) && !(eot10_2.equals("-")) && !(eot10_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_2 == null) && !(mot10_2.equals("-")) && !(mot10_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_2 = Double.parseDouble(mot10_2);
						inteot10_2 = Double.parseDouble(eot10_2);
						subject10_2Avg = (intmot10_2 + inteot10_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_2 = "-";
						inteot10_2 = Double.parseDouble(eot10_2);
						subject10_2Avg = (inteot10_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_2 = "-";

					if (!(mot10_2 == null) && !(mot10_2.equals("-")) && !(mot10_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_2 = Double.parseDouble(mot10_2);
						subject10_2Avg = (intmot10_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_2 = "-";
						subject10_2Avg = -1;
					}
				}

				mot10_3 = "";
				eot10_3 = "";
				subject10_3Avg = -1;

			} else if (fieldPapers10.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot10_1 == null) && !(eot10_1.equals("-")) && !(eot10_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (intmot10_1 + inteot10_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_1 = "-";
						inteot10_1 = Double.parseDouble(eot10_1);
						subject10_1Avg = (inteot10_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_1 = "-";

					if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_1 = Double.parseDouble(mot10_1);
						subject10_1Avg = (intmot10_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_1 = "-";
						subject10_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot10_2 == null) && !(eot10_2.equals("-")) && !(eot10_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_2 == null) && !(mot10_2.equals("-")) && !(mot10_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_2 = Double.parseDouble(mot10_2);
						inteot10_2 = Double.parseDouble(eot10_2);
						subject10_2Avg = (intmot10_2 + inteot10_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_2 = "-";
						inteot10_2 = Double.parseDouble(eot10_2);
						subject10_2Avg = (inteot10_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_2 = "-";

					if (!(mot10_2 == null) && !(mot10_2.equals("-")) && !(mot10_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_2 = Double.parseDouble(mot10_2);
						subject10_2Avg = (intmot10_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_2 = "-";
						subject10_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot10_3 == null) && !(eot10_3.equals("-")) && !(eot10_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot10_3 == null) && !(mot10_3.equals("-")) && !(mot10_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot10_3 = Double.parseDouble(mot10_3);
						inteot10_3 = Double.parseDouble(eot10_3);
						subject10_3Avg = (intmot10_3 + inteot10_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot10_3 = "-";
						inteot10_3 = Double.parseDouble(eot10_3);
						subject10_3Avg = (inteot10_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot10_3 = "-";

					if (!(mot10_3 == null) && !(mot10_3.equals("-")) && !(mot10_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot10_3 = Double.parseDouble(mot10_3);
						subject10_3Avg = (intmot10_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot10_3 = "-";
						subject10_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot10_1 = "";
			eot10_1 = "";
			subject10_1Avg = -1;
			mot10_2 = "";
			eot10_2 = "";
			subject10_2Avg = -1;
			mot10_3 = "";
			eot10_3 = "";
			subject10_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot10_1 == null) && !(mot10_1.equals("-")) && !(mot10_1.equals(""))) {
			double colormot10_1 = Double.parseDouble(mot10_1);
			if (colormot10_1 <= 50) {
				mot10_1p = new Paragraph(mot10_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot10_1p = new Paragraph(mot10_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot10_1p = new Paragraph(mot10_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot10_2 == null) && !(mot10_2.equals("-")) && !(mot10_2.equals(""))) {
			double colormot10_2 = Double.parseDouble(mot10_2);
			if (colormot10_2 <= 50) {
				mot10_2p = new Paragraph(mot10_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot10_2p = new Paragraph(mot10_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot10_2p = new Paragraph(mot10_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot10_3 == null) && !(mot10_3.equals("-")) && !(mot10_3.equals(""))) {
			double colormot10_3 = Double.parseDouble(mot10_3);
			if (colormot10_3 <= 50) {
				mot10_3p = new Paragraph(mot10_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot10_3p = new Paragraph(mot10_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot10_3p = new Paragraph(mot10_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot10_1 == null) && !(eot10_1.equals("-")) && !(eot10_1.equals(""))) {
			double coloreot10_1 = Double.parseDouble(eot10_1);
			if (coloreot10_1 <= 50) {
				eot10_1p = new Paragraph(eot10_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot10_1p = new Paragraph(eot10_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot10_1p = new Paragraph(eot10_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot10_2 == null) && !(eot10_2.equals("-")) && !(eot10_2.equals(""))) {
			double coloreot10_2 = Double.parseDouble(eot10_2);
			if (coloreot10_2 <= 50) {
				eot10_2p = new Paragraph(eot10_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot10_2p = new Paragraph(eot10_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot10_2p = new Paragraph(eot10_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot10_3 == null) && !(eot10_3.equals("-")) && !(eot10_3.equals(""))) {
			double coloreot10_3 = Double.parseDouble(eot10_3);
			if (coloreot10_3 <= 50) {
				eot10_3p = new Paragraph(eot10_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot10_3p = new Paragraph(eot10_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot10_3p = new Paragraph(eot10_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot10_1 = new PdfPCell(mot10_1p);
		PdfPCell cellmot10_2 = new PdfPCell(mot10_2p);
		PdfPCell cellmot10_3 = new PdfPCell(mot10_3p);
		PdfPCell celleot10_1 = new PdfPCell(eot10_1p);
		PdfPCell celleot10_2 = new PdfPCell(eot10_2p);
		PdfPCell celleot10_3 = new PdfPCell(eot10_3p);

		table.addCell(cellmot10_1);
		table.addCell(cellmot10_2);
		table.addCell(cellmot10_3);

		table.addCell(celleot10_1);
		table.addCell(celleot10_2);
		table.addCell(celleot10_3);

		if (subject10_1Avg == -1) {
			cell10_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell10_1Avg = new PdfPCell(new Paragraph("" + subject10_1Avg));
		}

		if (subject10_2Avg == -1) {
			cell10_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell10_2Avg = new PdfPCell(new Paragraph("" + subject10_2Avg));
		}

		if (subject10_3Avg == -1) {
			cell10_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell10_3Avg = new PdfPCell(new Paragraph("" + subject10_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject10_1Avg > 0) {

			if (mot10_1.equals("-")) {
				SQL10_1 = "select DISTINCT (CASE WHEN " + subject10_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL10_1 = "select DISTINCT (CASE WHEN " + subject10_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade10_1;
			try {

				Grade10_1 = generateCellValue(SQL10_1);
				if (Grade10_1.next()) {
					grade10_1 = Grade10_1.getString(1);

				} else {
					grade10_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject10_1Avg = -1;
		}

		if (subject10_1Avg <= 0 || cell10_1Avg == null || cell10_1Avg.equals("")) {
			grade10_1 = "";
		} else {
			grade10_1 = grade10_1;
		}
		table.addCell(cell10_1Avg);
		table.addCell(grade10_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject10_2Avg > 0) {

			if (mot10_2.equals("-")) {

				SQL10_2 = "select DISTINCT (CASE WHEN " + subject10_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade10_2;
				try {

					Grade10_2 = generateCellValue(SQL10_2);
					if (Grade10_2.next()) {
						grade10_2 = Grade10_2.getString(1);

					} else {
						grade10_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL10_2 = "select DISTINCT (CASE WHEN " + subject10_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade10_2;
				try {

					Grade10_2 = generateCellValue(SQL10_2);
					if (Grade10_2.next()) {
						grade10_2 = Grade10_2.getString(1);

					} else {
						grade10_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject10_2Avg = -1;
		}

		if (subject10_2Avg <= 0 || cell10_2Avg == null || cell10_2Avg.equals("")) {
			grade10_2 = "";
		}
		table.addCell(cell10_2Avg);
		table.addCell(grade10_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject10_3Avg > 0) {

			if (mot10_3.equals("-")) {
				SQL10_3 = "select DISTINCT (CASE WHEN " + subject10_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade10_3;
				try {

					Grade10_3 = generateCellValue(SQL10_3);
					if (Grade10_3.next()) {
						grade10_3 = Grade10_3.getString(1);

					} else {
						grade10_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL10_3 = "select DISTINCT (CASE WHEN " + subject10_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject10
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject10 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject10_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject10 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade10_3;
				try {

					Grade10_3 = generateCellValue(SQL10_3);
					if (Grade10_3.next()) {
						grade10_3 = Grade10_3.getString(1);

					} else {
						grade10_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject10_3Avg = -1;
		}

		if (subject10_3Avg <= 0 || cell10_3Avg == null || cell10_3Avg.equals("")) {
			grade10_3 = "";
		}
		table.addCell(cell10_3Avg);
		table.addCell(grade10_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade10_1 == null) && !(grade10_1.equals(""))) {
			gradeValue10_1 = grade10_1.replaceAll("[^0-9]", "");
		} else {
			grade10_1 = "0";
			gradeValue10_1 = grade10_1.replaceAll("[^0-9]", "");
		}

		if (!(grade10_2 == null) && !(grade10_2.equals(""))) {
			gradeValue10_2 = grade10_2.replaceAll("[^0-9]", "");
		} else {
			grade10_2 = "0";
			gradeValue10_2 = grade10_2.replaceAll("[^0-9]", "");
		}

		if (!(grade10_3 == null) && !(grade10_3.equals(""))) {
			gradeValue10_3 = grade10_3.replaceAll("[^0-9]", "");
		} else {
			grade10_3 = "0";
			gradeValue10_3 = grade10_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue10_1.equals("")) {
			valuepaper10_1 = Double.parseDouble(gradeValue10_1);
		}

		if (!gradeValue10_2.equals("")) {
			valuepaper10_2 = Double.parseDouble(gradeValue10_2);
		}
		if (!gradeValue10_3.equals("")) {
			valuepaper10_3 = Double.parseDouble(gradeValue10_3);
		}

		if (fieldPapers10.getText().equals("1")) {
			averageValue = (valuepaper10_1);
		} else if (fieldPapers10.getText().equals("2")) {
			averageValue = (valuepaper10_1 + valuepaper10_2) / 2;
		} else if (fieldPapers10.getText().equals("3")) {
			averageValue = (valuepaper10_1 + valuepaper10_2 + valuepaper10_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "A";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "B";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "C";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "D";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA10c = new PdfPCell(gradeA10p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "E";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "O";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper10_1 == 9 || valuepaper10_2 == 9 || valuepaper10_3 == 9) {
				gradeA10 = "O";
			} else {
				gradeA10 = "F";
			}
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA10c = new PdfPCell(gradeA10p);
		}

		if (averageValue <= 0) {

			gradeA10 = "";
			gradeA10p = new Paragraph(gradeA10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA10c = new PdfPCell(gradeA10p);
		}
		table.addCell(gradeA10c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA10.equals("A")) {
			pointA10 = 6;
			comment10 = "Excellent";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("B")) {
			pointA10 = 5;
			comment10 = "V.Good";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("C")) {
			pointA10 = 4;
			comment10 = "Good";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("D")) {
			pointA10 = 3;
			comment10 = "F.Good";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("E")) {
			pointA10 = 2;
			comment10 = "Fair";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("O")) {
			pointA10 = 1;
			comment10 = "Poor";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment10c = new PdfPCell(comment10p);
		} else if (gradeA10.equals("F")) {
			pointA10 = 0;
			comment10 = "V.Poor";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment10c = new PdfPCell(comment10p);
		} else {
			pointA10 = 0;
			comment10 = "";
			comment10p = new Paragraph(comment10,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment10c = new PdfPCell(comment10p);
		}

		table.addCell(comment10c);

		table.addCell(new Paragraph(teachersInitials(subject10, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 11
		 ************************************************/

		ResultSet Subject11;
		try {

			Subject11 = generateCellValue("SELECT subject_name from student_subjectsa where id=11");
			if (Subject11.next()) {
				subject11 = Subject11.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum11 = new PdfPCell(
				new Paragraph("11", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum11 = new PdfPCell(
				new Paragraph(subject11, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum11);
		table.addCell(subNum11);
		ResultSet MoT11_1;
		try {

			MoT11_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT11_1.next()) {
				mot11_1 = MoT11_1.getString(1);

			} else {
				mot11_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT11_2;
		try {

			MoT11_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT11_2.next()) {
				mot11_2 = MoT11_2.getString(1);

			} else {
				mot11_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT11_3;
		try {

			MoT11_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT11_3.next()) {
				mot11_3 = MoT11_3.getString(1);

			} else {
				mot11_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT11_1;
		try {

			EoT11_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT11_1.next()) {
				eot11_1 = EoT11_1.getString(1);

			} else {
				eot11_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT11_2;
		try {

			EoT11_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT11_2.next()) {
				eot11_2 = EoT11_2.getString(1);

			} else {
				eot11_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT11_3;
		try {

			EoT11_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject11
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT11_3.next()) {
				eot11_3 = EoT11_3.getString(1);

			} else {
				eot11_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered11;
		try {

			Subjectoffered11 = generateCellValue("select `" + subject11
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered11.next()) {

				yes11 = Subjectoffered11.getInt(1);

			} else {
				yes11 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes11 == 1) {

			if (fieldPapers11.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot11_1 == null) && !(eot11_1.equals("-")) && !(eot11_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (intmot11_1 + inteot11_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_1 = "-";
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (inteot11_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_1 = "-";

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						subject11_1Avg = (intmot11_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_1 = "-";
						subject11_1Avg = -1;
					}
				}

				mot11_2 = "";
				eot11_2 = "";
				mot11_3 = "";
				eot11_3 = "";
				subject11_2Avg = -1;
				subject11_3Avg = -1;

			} else if (fieldPapers11.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot11_1 == null) && !(eot11_1.equals("-")) && !(eot11_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (intmot11_1 + inteot11_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_1 = "-";
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (inteot11_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_1 = "-";

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						subject11_1Avg = (intmot11_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_1 = "-";
						subject11_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot11_2 == null) && !(eot11_2.equals("-")) && !(eot11_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_2 == null) && !(mot11_2.equals("-")) && !(mot11_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_2 = Double.parseDouble(mot11_2);
						inteot11_2 = Double.parseDouble(eot11_2);
						subject11_2Avg = (intmot11_2 + inteot11_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_2 = "-";
						inteot11_2 = Double.parseDouble(eot11_2);
						subject11_2Avg = (inteot11_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_2 = "-";

					if (!(mot11_2 == null) && !(mot11_2.equals("-")) && !(mot11_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_2 = Double.parseDouble(mot11_2);
						subject11_2Avg = (intmot11_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_2 = "-";
						subject11_2Avg = -1;
					}
				}

				mot11_3 = "";
				eot11_3 = "";
				subject11_3Avg = -1;

			} else if (fieldPapers11.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot11_1 == null) && !(eot11_1.equals("-")) && !(eot11_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (intmot11_1 + inteot11_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_1 = "-";
						inteot11_1 = Double.parseDouble(eot11_1);
						subject11_1Avg = (inteot11_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_1 = "-";

					if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_1 = Double.parseDouble(mot11_1);
						subject11_1Avg = (intmot11_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_1 = "-";
						subject11_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot11_2 == null) && !(eot11_2.equals("-")) && !(eot11_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_2 == null) && !(mot11_2.equals("-")) && !(mot11_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_2 = Double.parseDouble(mot11_2);
						inteot11_2 = Double.parseDouble(eot11_2);
						subject11_2Avg = (intmot11_2 + inteot11_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_2 = "-";
						inteot11_2 = Double.parseDouble(eot11_2);
						subject11_2Avg = (inteot11_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_2 = "-";

					if (!(mot11_2 == null) && !(mot11_2.equals("-")) && !(mot11_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_2 = Double.parseDouble(mot11_2);
						subject11_2Avg = (intmot11_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_2 = "-";
						subject11_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot11_3 == null) && !(eot11_3.equals("-")) && !(eot11_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot11_3 == null) && !(mot11_3.equals("-")) && !(mot11_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot11_3 = Double.parseDouble(mot11_3);
						inteot11_3 = Double.parseDouble(eot11_3);
						subject11_3Avg = (intmot11_3 + inteot11_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot11_3 = "-";
						inteot11_3 = Double.parseDouble(eot11_3);
						subject11_3Avg = (inteot11_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot11_3 = "-";

					if (!(mot11_3 == null) && !(mot11_3.equals("-")) && !(mot11_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot11_3 = Double.parseDouble(mot11_3);
						subject11_3Avg = (intmot11_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot11_3 = "-";
						subject11_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot11_1 = "";
			eot11_1 = "";
			subject11_1Avg = -1;
			mot11_2 = "";
			eot11_2 = "";
			subject11_2Avg = -1;
			mot11_3 = "";
			eot11_3 = "";
			subject11_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot11_1 == null) && !(mot11_1.equals("-")) && !(mot11_1.equals(""))) {
			double colormot11_1 = Double.parseDouble(mot11_1);
			if (colormot11_1 <= 50) {
				mot11_1p = new Paragraph(mot11_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot11_1p = new Paragraph(mot11_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot11_1p = new Paragraph(mot11_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot11_2 == null) && !(mot11_2.equals("-")) && !(mot11_2.equals(""))) {
			double colormot11_2 = Double.parseDouble(mot11_2);
			if (colormot11_2 <= 50) {
				mot11_2p = new Paragraph(mot11_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot11_2p = new Paragraph(mot11_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot11_2p = new Paragraph(mot11_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot11_3 == null) && !(mot11_3.equals("-")) && !(mot11_3.equals(""))) {
			double colormot11_3 = Double.parseDouble(mot11_3);
			if (colormot11_3 <= 50) {
				mot11_3p = new Paragraph(mot11_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot11_3p = new Paragraph(mot11_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot11_3p = new Paragraph(mot11_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot11_1 == null) && !(eot11_1.equals("-")) && !(eot11_1.equals(""))) {
			double coloreot11_1 = Double.parseDouble(eot11_1);
			if (coloreot11_1 <= 50) {
				eot11_1p = new Paragraph(eot11_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot11_1p = new Paragraph(eot11_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot11_1p = new Paragraph(eot11_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot11_2 == null) && !(eot11_2.equals("-")) && !(eot11_2.equals(""))) {
			double coloreot11_2 = Double.parseDouble(eot11_2);
			if (coloreot11_2 <= 50) {
				eot11_2p = new Paragraph(eot11_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot11_2p = new Paragraph(eot11_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot11_2p = new Paragraph(eot11_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot11_3 == null) && !(eot11_3.equals("-")) && !(eot11_3.equals(""))) {
			double coloreot11_3 = Double.parseDouble(eot11_3);
			if (coloreot11_3 <= 50) {
				eot11_3p = new Paragraph(eot11_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot11_3p = new Paragraph(eot11_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot11_3p = new Paragraph(eot11_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot11_1 = new PdfPCell(mot11_1p);
		PdfPCell cellmot11_2 = new PdfPCell(mot11_2p);
		PdfPCell cellmot11_3 = new PdfPCell(mot11_3p);
		PdfPCell celleot11_1 = new PdfPCell(eot11_1p);
		PdfPCell celleot11_2 = new PdfPCell(eot11_2p);
		PdfPCell celleot11_3 = new PdfPCell(eot11_3p);

		table.addCell(cellmot11_1);
		table.addCell(cellmot11_2);
		table.addCell(cellmot11_3);

		table.addCell(celleot11_1);
		table.addCell(celleot11_2);
		table.addCell(celleot11_3);

		if (subject11_1Avg == -1) {
			cell11_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell11_1Avg = new PdfPCell(new Paragraph("" + subject11_1Avg));
		}

		if (subject11_2Avg == -1) {
			cell11_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell11_2Avg = new PdfPCell(new Paragraph("" + subject11_2Avg));
		}

		if (subject11_3Avg == -1) {
			cell11_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell11_3Avg = new PdfPCell(new Paragraph("" + subject11_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject11_1Avg > 0) {

			if (mot11_1.equals("-")) {
				SQL11_1 = "select DISTINCT (CASE WHEN " + subject11_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL11_1 = "select DISTINCT (CASE WHEN " + subject11_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade11_1;
			try {

				Grade11_1 = generateCellValue(SQL11_1);
				if (Grade11_1.next()) {
					grade11_1 = Grade11_1.getString(1);

				} else {
					grade11_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject11_1Avg = -1;
		}

		if (subject11_1Avg <= 0 || cell11_1Avg == null || cell11_1Avg.equals("")) {
			grade11_1 = "";
		} else {
			grade11_1 = grade11_1;
		}
		table.addCell(cell11_1Avg);
		table.addCell(grade11_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject11_2Avg > 0) {

			if (mot11_2.equals("-")) {

				SQL11_2 = "select DISTINCT (CASE WHEN " + subject11_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade11_2;
				try {

					Grade11_2 = generateCellValue(SQL11_2);
					if (Grade11_2.next()) {
						grade11_2 = Grade11_2.getString(1);

					} else {
						grade11_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL11_2 = "select DISTINCT (CASE WHEN " + subject11_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade11_2;
				try {

					Grade11_2 = generateCellValue(SQL11_2);
					if (Grade11_2.next()) {
						grade11_2 = Grade11_2.getString(1);

					} else {
						grade11_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject11_2Avg = -1;
		}

		if (subject11_2Avg <= 0 || cell11_2Avg == null || cell11_2Avg.equals("")) {
			grade11_2 = "";
		}
		table.addCell(cell11_2Avg);
		table.addCell(grade11_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject11_3Avg > 0) {

			if (mot11_3.equals("-")) {
				SQL11_3 = "select DISTINCT (CASE WHEN " + subject11_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade11_3;
				try {

					Grade11_3 = generateCellValue(SQL11_3);
					if (Grade11_3.next()) {
						grade11_3 = Grade11_3.getString(1);

					} else {
						grade11_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL11_3 = "select DISTINCT (CASE WHEN " + subject11_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject11
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject11 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject11_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject11 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade11_3;
				try {

					Grade11_3 = generateCellValue(SQL11_3);
					if (Grade11_3.next()) {
						grade11_3 = Grade11_3.getString(1);

					} else {
						grade11_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject11_3Avg = -1;
		}

		if (subject11_3Avg <= 0 || cell11_3Avg == null || cell11_3Avg.equals("")) {
			grade11_3 = "";
		}
		table.addCell(cell11_3Avg);
		table.addCell(grade11_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade11_1 == null) && !(grade11_1.equals(""))) {
			gradeValue11_1 = grade11_1.replaceAll("[^0-9]", "");
		} else {
			grade11_1 = "0";
			gradeValue11_1 = grade11_1.replaceAll("[^0-9]", "");
		}

		if (!(grade11_2 == null) && !(grade11_2.equals(""))) {
			gradeValue11_2 = grade11_2.replaceAll("[^0-9]", "");
		} else {
			grade11_2 = "0";
			gradeValue11_2 = grade11_2.replaceAll("[^0-9]", "");
		}

		if (!(grade11_3 == null) && !(grade11_3.equals(""))) {
			gradeValue11_3 = grade11_3.replaceAll("[^0-9]", "");
		} else {
			grade11_3 = "0";
			gradeValue11_3 = grade11_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue11_1.equals("")) {
			valuepaper11_1 = Double.parseDouble(gradeValue11_1);
		}

		if (!gradeValue11_2.equals("")) {
			valuepaper11_2 = Double.parseDouble(gradeValue11_2);
		}
		if (!gradeValue11_3.equals("")) {
			valuepaper11_3 = Double.parseDouble(gradeValue11_3);
		}

		if (fieldPapers11.getText().equals("1")) {
			averageValue = (valuepaper11_1);
		} else if (fieldPapers11.getText().equals("2")) {
			averageValue = (valuepaper11_1 + valuepaper11_2) / 2;
		} else if (fieldPapers11.getText().equals("3")) {
			averageValue = (valuepaper11_1 + valuepaper11_2 + valuepaper11_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "A";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "B";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "C";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "D";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA11c = new PdfPCell(gradeA11p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "E";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "O";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper11_1 == 9 || valuepaper11_2 == 9 || valuepaper11_3 == 9) {
				gradeA11 = "O";
			} else {
				gradeA11 = "F";
			}
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA11c = new PdfPCell(gradeA11p);
		}

		if (averageValue <= 0) {

			gradeA11 = "";
			gradeA11p = new Paragraph(gradeA11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA11c = new PdfPCell(gradeA11p);
		}
		table.addCell(gradeA11c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA11.equals("A")) {
			pointA11 = 6;
			comment11 = "Excellent";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("B")) {
			pointA11 = 5;
			comment11 = "V.Good";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("C")) {
			pointA11 = 4;
			comment11 = "Good";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("D")) {
			pointA11 = 3;
			comment11 = "F.Good";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("E")) {
			pointA11 = 2;
			comment11 = "Fair";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("O")) {
			pointA11 = 1;
			comment11 = "Poor";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment11c = new PdfPCell(comment11p);
		} else if (gradeA11.equals("F")) {
			pointA11 = 0;
			comment11 = "V.Poor";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment11c = new PdfPCell(comment11p);
		} else {
			pointA11 = 0;
			comment11 = "";
			comment11p = new Paragraph(comment11,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment11c = new PdfPCell(comment11p);
		}

		table.addCell(comment11c);

		table.addCell(new Paragraph(teachersInitials(subject11, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 12
		 ************************************************/

		ResultSet Subject12;
		try {

			Subject12 = generateCellValue("SELECT subject_name from student_subjectsa where id=12");
			if (Subject12.next()) {
				subject12 = Subject12.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum12 = new PdfPCell(
				new Paragraph("12", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum12 = new PdfPCell(
				new Paragraph(subject12, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum12);
		table.addCell(subNum12);
		ResultSet MoT12_1;
		try {

			MoT12_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT12_1.next()) {
				mot12_1 = MoT12_1.getString(1);

			} else {
				mot12_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT12_2;
		try {

			MoT12_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT12_2.next()) {
				mot12_2 = MoT12_2.getString(1);

			} else {
				mot12_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT12_3;
		try {

			MoT12_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT12_3.next()) {
				mot12_3 = MoT12_3.getString(1);

			} else {
				mot12_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT12_1;
		try {

			EoT12_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT12_1.next()) {
				eot12_1 = EoT12_1.getString(1);

			} else {
				eot12_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT12_2;
		try {

			EoT12_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT12_2.next()) {
				eot12_2 = EoT12_2.getString(1);

			} else {
				eot12_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT12_3;
		try {

			EoT12_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject12
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT12_3.next()) {
				eot12_3 = EoT12_3.getString(1);

			} else {
				eot12_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered12;
		try {

			Subjectoffered12 = generateCellValue("select `" + subject12
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered12.next()) {

				yes12 = Subjectoffered12.getInt(1);

			} else {
				yes12 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes12 == 1) {

			if (fieldPapers12.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot12_1 == null) && !(eot12_1.equals("-")) && !(eot12_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (intmot12_1 + inteot12_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_1 = "-";
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (inteot12_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_1 = "-";

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						subject12_1Avg = (intmot12_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_1 = "-";
						subject12_1Avg = -1;
					}
				}

				mot12_2 = "";
				eot12_2 = "";
				mot12_3 = "";
				eot12_3 = "";
				subject12_2Avg = -1;
				subject12_3Avg = -1;

			} else if (fieldPapers12.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot12_1 == null) && !(eot12_1.equals("-")) && !(eot12_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (intmot12_1 + inteot12_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_1 = "-";
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (inteot12_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_1 = "-";

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						subject12_1Avg = (intmot12_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_1 = "-";
						subject12_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot12_2 == null) && !(eot12_2.equals("-")) && !(eot12_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_2 == null) && !(mot12_2.equals("-")) && !(mot12_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_2 = Double.parseDouble(mot12_2);
						inteot12_2 = Double.parseDouble(eot12_2);
						subject12_2Avg = (intmot12_2 + inteot12_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_2 = "-";
						inteot12_2 = Double.parseDouble(eot12_2);
						subject12_2Avg = (inteot12_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_2 = "-";

					if (!(mot12_2 == null) && !(mot12_2.equals("-")) && !(mot12_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_2 = Double.parseDouble(mot12_2);
						subject12_2Avg = (intmot12_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_2 = "-";
						subject12_2Avg = -1;
					}
				}

				mot12_3 = "";
				eot12_3 = "";
				subject12_3Avg = -1;

			} else if (fieldPapers12.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot12_1 == null) && !(eot12_1.equals("-")) && !(eot12_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (intmot12_1 + inteot12_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_1 = "-";
						inteot12_1 = Double.parseDouble(eot12_1);
						subject12_1Avg = (inteot12_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_1 = "-";

					if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_1 = Double.parseDouble(mot12_1);
						subject12_1Avg = (intmot12_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_1 = "-";
						subject12_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot12_2 == null) && !(eot12_2.equals("-")) && !(eot12_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_2 == null) && !(mot12_2.equals("-")) && !(mot12_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_2 = Double.parseDouble(mot12_2);
						inteot12_2 = Double.parseDouble(eot12_2);
						subject12_2Avg = (intmot12_2 + inteot12_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_2 = "-";
						inteot12_2 = Double.parseDouble(eot12_2);
						subject12_2Avg = (inteot12_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_2 = "-";

					if (!(mot12_2 == null) && !(mot12_2.equals("-")) && !(mot12_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_2 = Double.parseDouble(mot12_2);
						subject12_2Avg = (intmot12_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_2 = "-";
						subject12_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot12_3 == null) && !(eot12_3.equals("-")) && !(eot12_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot12_3 == null) && !(mot12_3.equals("-")) && !(mot12_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot12_3 = Double.parseDouble(mot12_3);
						inteot12_3 = Double.parseDouble(eot12_3);
						subject12_3Avg = (intmot12_3 + inteot12_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot12_3 = "-";
						inteot12_3 = Double.parseDouble(eot12_3);
						subject12_3Avg = (inteot12_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot12_3 = "-";

					if (!(mot12_3 == null) && !(mot12_3.equals("-")) && !(mot12_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot12_3 = Double.parseDouble(mot12_3);
						subject12_3Avg = (intmot12_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot12_3 = "-";
						subject12_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot12_1 = "";
			eot12_1 = "";
			subject12_1Avg = -1;
			mot12_2 = "";
			eot12_2 = "";
			subject12_2Avg = -1;
			mot12_3 = "";
			eot12_3 = "";
			subject12_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot12_1 == null) && !(mot12_1.equals("-")) && !(mot12_1.equals(""))) {
			double colormot12_1 = Double.parseDouble(mot12_1);
			if (colormot12_1 <= 50) {
				mot12_1p = new Paragraph(mot12_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot12_1p = new Paragraph(mot12_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot12_1p = new Paragraph(mot12_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot12_2 == null) && !(mot12_2.equals("-")) && !(mot12_2.equals(""))) {
			double colormot12_2 = Double.parseDouble(mot12_2);
			if (colormot12_2 <= 50) {
				mot12_2p = new Paragraph(mot12_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot12_2p = new Paragraph(mot12_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot12_2p = new Paragraph(mot12_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot12_3 == null) && !(mot12_3.equals("-")) && !(mot12_3.equals(""))) {
			double colormot12_3 = Double.parseDouble(mot12_3);
			if (colormot12_3 <= 50) {
				mot12_3p = new Paragraph(mot12_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot12_3p = new Paragraph(mot12_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot12_3p = new Paragraph(mot12_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot12_1 == null) && !(eot12_1.equals("-")) && !(eot12_1.equals(""))) {
			double coloreot12_1 = Double.parseDouble(eot12_1);
			if (coloreot12_1 <= 50) {
				eot12_1p = new Paragraph(eot12_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot12_1p = new Paragraph(eot12_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot12_1p = new Paragraph(eot12_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot12_2 == null) && !(eot12_2.equals("-")) && !(eot12_2.equals(""))) {
			double coloreot12_2 = Double.parseDouble(eot12_2);
			if (coloreot12_2 <= 50) {
				eot12_2p = new Paragraph(eot12_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot12_2p = new Paragraph(eot12_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot12_2p = new Paragraph(eot12_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot12_3 == null) && !(eot12_3.equals("-")) && !(eot12_3.equals(""))) {
			double coloreot12_3 = Double.parseDouble(eot12_3);
			if (coloreot12_3 <= 50) {
				eot12_3p = new Paragraph(eot12_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot12_3p = new Paragraph(eot12_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot12_3p = new Paragraph(eot12_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot12_1 = new PdfPCell(mot12_1p);
		PdfPCell cellmot12_2 = new PdfPCell(mot12_2p);
		PdfPCell cellmot12_3 = new PdfPCell(mot12_3p);
		PdfPCell celleot12_1 = new PdfPCell(eot12_1p);
		PdfPCell celleot12_2 = new PdfPCell(eot12_2p);
		PdfPCell celleot12_3 = new PdfPCell(eot12_3p);

		table.addCell(cellmot12_1);
		table.addCell(cellmot12_2);
		table.addCell(cellmot12_3);

		table.addCell(celleot12_1);
		table.addCell(celleot12_2);
		table.addCell(celleot12_3);

		if (subject12_1Avg == -1) {
			cell12_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell12_1Avg = new PdfPCell(new Paragraph("" + subject12_1Avg));
		}

		if (subject12_2Avg == -1) {
			cell12_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell12_2Avg = new PdfPCell(new Paragraph("" + subject12_2Avg));
		}

		if (subject12_3Avg == -1) {
			cell12_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell12_3Avg = new PdfPCell(new Paragraph("" + subject12_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject12_1Avg > 0) {

			if (mot12_1.equals("-")) {
				SQL12_1 = "select DISTINCT (CASE WHEN " + subject12_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL12_1 = "select DISTINCT (CASE WHEN " + subject12_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade12_1;
			try {

				Grade12_1 = generateCellValue(SQL12_1);
				if (Grade12_1.next()) {
					grade12_1 = Grade12_1.getString(1);

				} else {
					grade12_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject12_1Avg = -1;
		}

		if (subject12_1Avg <= 0 || cell12_1Avg == null || cell12_1Avg.equals("")) {
			grade12_1 = "";
		} else {
			grade12_1 = grade12_1;
		}
		table.addCell(cell12_1Avg);
		table.addCell(grade12_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject12_2Avg > 0) {

			if (mot12_2.equals("-")) {

				SQL12_2 = "select DISTINCT (CASE WHEN " + subject12_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade12_2;
				try {

					Grade12_2 = generateCellValue(SQL12_2);
					if (Grade12_2.next()) {
						grade12_2 = Grade12_2.getString(1);

					} else {
						grade12_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL12_2 = "select DISTINCT (CASE WHEN " + subject12_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade12_2;
				try {

					Grade12_2 = generateCellValue(SQL12_2);
					if (Grade12_2.next()) {
						grade12_2 = Grade12_2.getString(1);

					} else {
						grade12_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject12_2Avg = -1;
		}

		if (subject12_2Avg <= 0 || cell12_2Avg == null || cell12_2Avg.equals("")) {
			grade12_2 = "";
		}
		table.addCell(cell12_2Avg);
		table.addCell(grade12_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject12_3Avg > 0) {

			if (mot12_3.equals("-")) {
				SQL12_3 = "select DISTINCT (CASE WHEN " + subject12_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade12_3;
				try {

					Grade12_3 = generateCellValue(SQL12_3);
					if (Grade12_3.next()) {
						grade12_3 = Grade12_3.getString(1);

					} else {
						grade12_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL12_3 = "select DISTINCT (CASE WHEN " + subject12_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject12
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject12 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject12_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject12 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade12_3;
				try {

					Grade12_3 = generateCellValue(SQL12_3);
					if (Grade12_3.next()) {
						grade12_3 = Grade12_3.getString(1);

					} else {
						grade12_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject12_3Avg = -1;
		}

		if (subject12_3Avg <= 0 || cell12_3Avg == null || cell12_3Avg.equals("")) {
			grade12_3 = "";
		}
		table.addCell(cell12_3Avg);
		table.addCell(grade12_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade12_1 == null) && !(grade12_1.equals(""))) {
			gradeValue12_1 = grade12_1.replaceAll("[^0-9]", "");
		} else {
			grade12_1 = "0";
			gradeValue12_1 = grade12_1.replaceAll("[^0-9]", "");
		}

		if (!(grade12_2 == null) && !(grade12_2.equals(""))) {
			gradeValue12_2 = grade12_2.replaceAll("[^0-9]", "");
		} else {
			grade12_2 = "0";
			gradeValue12_2 = grade12_2.replaceAll("[^0-9]", "");
		}

		if (!(grade12_3 == null) && !(grade12_3.equals(""))) {
			gradeValue12_3 = grade12_3.replaceAll("[^0-9]", "");
		} else {
			grade12_3 = "0";
			gradeValue12_3 = grade12_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue12_1.equals("")) {
			valuepaper12_1 = Double.parseDouble(gradeValue12_1);
		}

		if (!gradeValue12_2.equals("")) {
			valuepaper12_2 = Double.parseDouble(gradeValue12_2);
		}
		if (!gradeValue12_3.equals("")) {
			valuepaper12_3 = Double.parseDouble(gradeValue12_3);
		}

		if (fieldPapers12.getText().equals("1")) {
			averageValue = (valuepaper12_1);
		} else if (fieldPapers12.getText().equals("2")) {
			averageValue = (valuepaper12_1 + valuepaper12_2) / 2;
		} else if (fieldPapers12.getText().equals("3")) {
			averageValue = (valuepaper12_1 + valuepaper12_2 + valuepaper12_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "A";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "B";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "C";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "D";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA12c = new PdfPCell(gradeA12p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "E";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "O";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper12_1 == 9 || valuepaper12_2 == 9 || valuepaper12_3 == 9) {
				gradeA12 = "O";
			} else {
				gradeA12 = "F";
			}
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		if (averageValue <= 0) {

			gradeA12 = "";
			gradeA12p = new Paragraph(gradeA12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA12c = new PdfPCell(gradeA12p);
		}

		table.addCell(gradeA12c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA12.equals("A")) {
			pointA12 = 6;
			comment12 = "Excellent";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("B")) {
			pointA12 = 5;
			comment12 = "V.Good";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("C")) {
			pointA12 = 4;
			comment12 = "Good";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("D")) {
			pointA12 = 3;
			comment12 = "F.Good";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("E")) {
			pointA12 = 2;
			comment12 = "Fair";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("O")) {
			pointA12 = 1;
			comment12 = "Poor";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment12c = new PdfPCell(comment12p);
		} else if (gradeA12.equals("F")) {
			pointA12 = 0;
			comment12 = "V.Poor";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment12c = new PdfPCell(comment12p);
		} else {
			pointA12 = 0;
			comment12 = "";
			comment12p = new Paragraph(comment12,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment12c = new PdfPCell(comment12p);
		}

		table.addCell(comment12c);

		table.addCell(new Paragraph(teachersInitials(subject12, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 13
		 ************************************************/

		ResultSet Subject13;
		try {

			Subject13 = generateCellValue("SELECT subject_name from student_subjectsa where id=13");
			if (Subject13.next()) {
				subject13 = Subject13.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum13 = new PdfPCell(
				new Paragraph("13", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum13 = new PdfPCell(
				new Paragraph(subject13, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum13);
		table.addCell(subNum13);
		ResultSet MoT13_1;
		try {

			MoT13_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT13_1.next()) {
				mot13_1 = MoT13_1.getString(1);

			} else {
				mot13_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT13_2;
		try {

			MoT13_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT13_2.next()) {
				mot13_2 = MoT13_2.getString(1);

			} else {
				mot13_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT13_3;
		try {

			MoT13_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT13_3.next()) {
				mot13_3 = MoT13_3.getString(1);

			} else {
				mot13_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT13_1;
		try {

			EoT13_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT13_1.next()) {
				eot13_1 = EoT13_1.getString(1);

			} else {
				eot13_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT13_2;
		try {

			EoT13_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT13_2.next()) {
				eot13_2 = EoT13_2.getString(1);

			} else {
				eot13_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT13_3;
		try {

			EoT13_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject13
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT13_3.next()) {
				eot13_3 = EoT13_3.getString(1);

			} else {
				eot13_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered13;
		try {

			Subjectoffered13 = generateCellValue("select `" + subject13
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered13.next()) {

				yes13 = Subjectoffered13.getInt(1);

			} else {
				yes13 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes13 == 1) {

			if (fieldPapers13.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot13_1 == null) && !(eot13_1.equals("-")) && !(eot13_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (intmot13_1 + inteot13_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_1 = "-";
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (inteot13_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_1 = "-";

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						subject13_1Avg = (intmot13_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_1 = "-";
						subject13_1Avg = -1;
					}
				}

				mot13_2 = "";
				eot13_2 = "";
				mot13_3 = "";
				eot13_3 = "";
				subject13_2Avg = -1;
				subject13_3Avg = -1;

			} else if (fieldPapers13.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot13_1 == null) && !(eot13_1.equals("-")) && !(eot13_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (intmot13_1 + inteot13_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_1 = "-";
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (inteot13_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_1 = "-";

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						subject13_1Avg = (intmot13_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_1 = "-";
						subject13_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot13_2 == null) && !(eot13_2.equals("-")) && !(eot13_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_2 == null) && !(mot13_2.equals("-")) && !(mot13_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_2 = Double.parseDouble(mot13_2);
						inteot13_2 = Double.parseDouble(eot13_2);
						subject13_2Avg = (intmot13_2 + inteot13_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_2 = "-";
						inteot13_2 = Double.parseDouble(eot13_2);
						subject13_2Avg = (inteot13_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_2 = "-";

					if (!(mot13_2 == null) && !(mot13_2.equals("-")) && !(mot13_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_2 = Double.parseDouble(mot13_2);
						subject13_2Avg = (intmot13_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_2 = "-";
						subject13_2Avg = -1;
					}
				}

				mot13_3 = "";
				eot13_3 = "";
				subject13_3Avg = -1;

			} else if (fieldPapers13.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot13_1 == null) && !(eot13_1.equals("-")) && !(eot13_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (intmot13_1 + inteot13_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_1 = "-";
						inteot13_1 = Double.parseDouble(eot13_1);
						subject13_1Avg = (inteot13_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_1 = "-";

					if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_1 = Double.parseDouble(mot13_1);
						subject13_1Avg = (intmot13_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_1 = "-";
						subject13_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot13_2 == null) && !(eot13_2.equals("-")) && !(eot13_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_2 == null) && !(mot13_2.equals("-")) && !(mot13_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_2 = Double.parseDouble(mot13_2);
						inteot13_2 = Double.parseDouble(eot13_2);
						subject13_2Avg = (intmot13_2 + inteot13_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_2 = "-";
						inteot13_2 = Double.parseDouble(eot13_2);
						subject13_2Avg = (inteot13_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_2 = "-";

					if (!(mot13_2 == null) && !(mot13_2.equals("-")) && !(mot13_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_2 = Double.parseDouble(mot13_2);
						subject13_2Avg = (intmot13_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_2 = "-";
						subject13_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot13_3 == null) && !(eot13_3.equals("-")) && !(eot13_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot13_3 == null) && !(mot13_3.equals("-")) && !(mot13_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot13_3 = Double.parseDouble(mot13_3);
						inteot13_3 = Double.parseDouble(eot13_3);
						subject13_3Avg = (intmot13_3 + inteot13_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot13_3 = "-";
						inteot13_3 = Double.parseDouble(eot13_3);
						subject13_3Avg = (inteot13_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot13_3 = "-";

					if (!(mot13_3 == null) && !(mot13_3.equals("-")) && !(mot13_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot13_3 = Double.parseDouble(mot13_3);
						subject13_3Avg = (intmot13_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot13_3 = "-";
						subject13_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot13_1 = "";
			eot13_1 = "";
			subject13_1Avg = -1;
			mot13_2 = "";
			eot13_2 = "";
			subject13_2Avg = -1;
			mot13_3 = "";
			eot13_3 = "";
			subject13_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot13_1 == null) && !(mot13_1.equals("-")) && !(mot13_1.equals(""))) {
			double colormot13_1 = Double.parseDouble(mot13_1);
			if (colormot13_1 <= 50) {
				mot13_1p = new Paragraph(mot13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot13_1p = new Paragraph(mot13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot13_1p = new Paragraph(mot13_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot13_2 == null) && !(mot13_2.equals("-")) && !(mot13_2.equals(""))) {
			double colormot13_2 = Double.parseDouble(mot13_2);
			if (colormot13_2 <= 50) {
				mot13_2p = new Paragraph(mot13_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot13_2p = new Paragraph(mot13_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot13_2p = new Paragraph(mot13_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot13_3 == null) && !(mot13_3.equals("-")) && !(mot13_3.equals(""))) {
			double colormot13_3 = Double.parseDouble(mot13_3);
			if (colormot13_3 <= 50) {
				mot13_3p = new Paragraph(mot13_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot13_3p = new Paragraph(mot13_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot13_3p = new Paragraph(mot13_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot13_1 == null) && !(eot13_1.equals("-")) && !(eot13_1.equals(""))) {
			double coloreot13_1 = Double.parseDouble(eot13_1);
			if (coloreot13_1 <= 50) {
				eot13_1p = new Paragraph(eot13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot13_1p = new Paragraph(eot13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot13_1p = new Paragraph(eot13_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot13_2 == null) && !(eot13_2.equals("-")) && !(eot13_2.equals(""))) {
			double coloreot13_2 = Double.parseDouble(eot13_2);
			if (coloreot13_2 <= 50) {
				eot13_2p = new Paragraph(eot13_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot13_2p = new Paragraph(eot13_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot13_2p = new Paragraph(eot13_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot13_3 == null) && !(eot13_3.equals("-")) && !(eot13_3.equals(""))) {
			double coloreot13_3 = Double.parseDouble(eot13_3);
			if (coloreot13_3 <= 50) {
				eot13_3p = new Paragraph(eot13_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot13_3p = new Paragraph(eot13_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot13_3p = new Paragraph(eot13_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot13_1 = new PdfPCell(mot13_1p);
		PdfPCell cellmot13_2 = new PdfPCell(mot13_2p);
		PdfPCell cellmot13_3 = new PdfPCell(mot13_3p);
		PdfPCell celleot13_1 = new PdfPCell(eot13_1p);
		PdfPCell celleot13_2 = new PdfPCell(eot13_2p);
		PdfPCell celleot13_3 = new PdfPCell(eot13_3p);

		table.addCell(cellmot13_1);
		table.addCell(cellmot13_2);
		table.addCell(cellmot13_3);

		table.addCell(celleot13_1);
		table.addCell(celleot13_2);
		table.addCell(celleot13_3);

		if (subject13_1Avg == -1) {
			cell13_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell13_1Avg = new PdfPCell(new Paragraph("" + subject13_1Avg));
		}

		if (subject13_2Avg == -1) {
			cell13_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell13_2Avg = new PdfPCell(new Paragraph("" + subject13_2Avg));
		}

		if (subject13_3Avg == -1) {
			cell13_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell13_3Avg = new PdfPCell(new Paragraph("" + subject13_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject13_1Avg > 0) {

			if (mot13_1.equals("-")) {
				SQL13_1 = "select DISTINCT (CASE WHEN " + subject13_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject13
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject13 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject13_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject13 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL13_1 = "select DISTINCT (CASE WHEN " + subject13_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject13
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject13 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject13_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject13 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade13_1;
			try {

				Grade13_1 = generateCellValue(SQL13_1);
				if (Grade13_1.next()) {
					grade13_1 = Grade13_1.getString(1);

				} else {
					grade13_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject13_1Avg = -1;
		}

		if (yes13 == 1) {

			if (subject13_1Avg <= 0 || cell13_1Avg == null || cell13_1Avg.equals("")) {
				grade13_1 = "";
			} else {
				grade13_1 = grade13_1;
			}

		} else {
			grade13_1 = "";
		}

		table.addCell(cell13_1Avg);
		table.addCell(grade13_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade13_1 == null) && !(grade13_1.equals("")) && !(grade13_1.equals("-"))) {
			gradeValue13_1 = grade13_1.replaceAll("[^0-9]", "");
		} else {
			grade13_1 = "";
			gradeValue13_1 = grade13_1.replaceAll("[^0-9]", "");
		}

		if (!(gradeValue13_1.equals("")) && !(gradeValue13_1.equals("-")) && !(gradeValue13_1 == null)) {
			if ((Double.parseDouble(gradeValue13_1) <= 6)) {
				gradeA13p = new Paragraph(gradeValue13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA13c = new PdfPCell(gradeA13p);
			} else {
				gradeA13p = new Paragraph(gradeValue13_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA13c = new PdfPCell(gradeA13p);
			}

		} else {
			gradeA13p = new Paragraph(gradeValue13_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA13c = new PdfPCell(gradeA13p);
		}

		table.addCell(gradeA13c);

		/*****************************************************************************************************
		 * Comment will be based on 1,2,3,4,5,6,7,8,9
		 ******************************************************************************************************/
		if (!(gradeValue13_1 == null) && !(gradeValue13_1.equals("")) && !(gradeValue13_1.equals("-"))) {
			if (Double.parseDouble(gradeValue13_1) <= 6) {
				comment13 = "Passed";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment13c = new PdfPCell(comment13p);
			} else if (Double.parseDouble(gradeValue13_1) > 6) {
				comment13 = "Failed";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment13c = new PdfPCell(comment13p);
			} else {
				comment13 = "";
				comment13p = new Paragraph(comment13,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment13c = new PdfPCell(comment13p);
			}
		} else {

			comment13 = "";
			comment13p = new Paragraph(comment13,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment13c = new PdfPCell(comment13p);

		}
		table.addCell(comment13c);

		table.addCell(new Paragraph(teachersInitials(subject13, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 14
		 ************************************************/

		ResultSet Subject14;
		try {

			Subject14 = generateCellValue("SELECT subject_name from student_subjectsa where id=14");
			if (Subject14.next()) {
				subject14 = Subject14.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum14 = new PdfPCell(
				new Paragraph("14", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum14 = new PdfPCell(
				new Paragraph(subject14, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum14);
		table.addCell(subNum14);
		ResultSet MoT14_1;
		try {

			MoT14_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT14_1.next()) {
				mot14_1 = MoT14_1.getString(1);

			} else {
				mot14_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT14_2;
		try {

			MoT14_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT14_2.next()) {
				mot14_2 = MoT14_2.getString(1);

			} else {
				mot14_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT14_3;
		try {

			MoT14_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT14_3.next()) {
				mot14_3 = MoT14_3.getString(1);

			} else {
				mot14_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT14_1;
		try {

			EoT14_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT14_1.next()) {
				eot14_1 = EoT14_1.getString(1);

			} else {
				eot14_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT14_2;
		try {

			EoT14_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT14_2.next()) {
				eot14_2 = EoT14_2.getString(1);

			} else {
				eot14_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT14_3;
		try {

			EoT14_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject14
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT14_3.next()) {
				eot14_3 = EoT14_3.getString(1);

			} else {
				eot14_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered14;
		try {

			Subjectoffered14 = generateCellValue("select `" + subject14
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered14.next()) {

				yes14 = Subjectoffered14.getInt(1);

			} else {
				yes14 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes14 == 1) {

			if (fieldPapers14.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot14_1 == null) && !(eot14_1.equals("-")) && !(eot14_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (intmot14_1 + inteot14_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_1 = "-";
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (inteot14_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_1 = "-";

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						subject14_1Avg = (intmot14_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_1 = "-";
						subject14_1Avg = -1;
					}
				}

				mot14_2 = "";
				eot14_2 = "";
				mot14_3 = "";
				eot14_3 = "";
				subject14_2Avg = -1;
				subject14_3Avg = -1;

			} else if (fieldPapers14.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot14_1 == null) && !(eot14_1.equals("-")) && !(eot14_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (intmot14_1 + inteot14_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_1 = "-";
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (inteot14_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_1 = "-";

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						subject14_1Avg = (intmot14_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_1 = "-";
						subject14_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot14_2 == null) && !(eot14_2.equals("-")) && !(eot14_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_2 == null) && !(mot14_2.equals("-")) && !(mot14_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_2 = Double.parseDouble(mot14_2);
						inteot14_2 = Double.parseDouble(eot14_2);
						subject14_2Avg = (intmot14_2 + inteot14_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_2 = "-";
						inteot14_2 = Double.parseDouble(eot14_2);
						subject14_2Avg = (inteot14_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_2 = "-";

					if (!(mot14_2 == null) && !(mot14_2.equals("-")) && !(mot14_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_2 = Double.parseDouble(mot14_2);
						subject14_2Avg = (intmot14_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_2 = "-";
						subject14_2Avg = -1;
					}
				}

				mot14_3 = "";
				eot14_3 = "";
				subject14_3Avg = -1;

			} else if (fieldPapers14.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot14_1 == null) && !(eot14_1.equals("-")) && !(eot14_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (intmot14_1 + inteot14_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_1 = "-";
						inteot14_1 = Double.parseDouble(eot14_1);
						subject14_1Avg = (inteot14_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_1 = "-";

					if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_1 = Double.parseDouble(mot14_1);
						subject14_1Avg = (intmot14_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_1 = "-";
						subject14_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot14_2 == null) && !(eot14_2.equals("-")) && !(eot14_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_2 == null) && !(mot14_2.equals("-")) && !(mot14_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_2 = Double.parseDouble(mot14_2);
						inteot14_2 = Double.parseDouble(eot14_2);
						subject14_2Avg = (intmot14_2 + inteot14_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_2 = "-";
						inteot14_2 = Double.parseDouble(eot14_2);
						subject14_2Avg = (inteot14_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_2 = "-";

					if (!(mot14_2 == null) && !(mot14_2.equals("-")) && !(mot14_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_2 = Double.parseDouble(mot14_2);
						subject14_2Avg = (intmot14_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_2 = "-";
						subject14_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot14_3 == null) && !(eot14_3.equals("-")) && !(eot14_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot14_3 == null) && !(mot14_3.equals("-")) && !(mot14_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot14_3 = Double.parseDouble(mot14_3);
						inteot14_3 = Double.parseDouble(eot14_3);
						subject14_3Avg = (intmot14_3 + inteot14_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot14_3 = "-";
						inteot14_3 = Double.parseDouble(eot14_3);
						subject14_3Avg = (inteot14_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot14_3 = "-";

					if (!(mot14_3 == null) && !(mot14_3.equals("-")) && !(mot14_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot14_3 = Double.parseDouble(mot14_3);
						subject14_3Avg = (intmot14_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot14_3 = "-";
						subject14_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot14_1 = "";
			eot14_1 = "";
			subject14_1Avg = -1;
			mot14_2 = "";
			eot14_2 = "";
			subject14_2Avg = -1;
			mot14_3 = "";
			eot14_3 = "";
			subject14_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot14_1 == null) && !(mot14_1.equals("-")) && !(mot14_1.equals(""))) {
			double colormot14_1 = Double.parseDouble(mot14_1);
			if (colormot14_1 <= 50) {
				mot14_1p = new Paragraph(mot14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot14_1p = new Paragraph(mot14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot14_1p = new Paragraph(mot14_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot14_2 == null) && !(mot14_2.equals("-")) && !(mot14_2.equals(""))) {
			double colormot14_2 = Double.parseDouble(mot14_2);
			if (colormot14_2 <= 50) {
				mot14_2p = new Paragraph(mot14_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot14_2p = new Paragraph(mot14_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot14_2p = new Paragraph(mot14_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot14_3 == null) && !(mot14_3.equals("-")) && !(mot14_3.equals(""))) {
			double colormot14_3 = Double.parseDouble(mot14_3);
			if (colormot14_3 <= 50) {
				mot14_3p = new Paragraph(mot14_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot14_3p = new Paragraph(mot14_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot14_3p = new Paragraph(mot14_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot14_1 == null) && !(eot14_1.equals("-")) && !(eot14_1.equals(""))) {
			double coloreot14_1 = Double.parseDouble(eot14_1);
			if (coloreot14_1 <= 50) {
				eot14_1p = new Paragraph(eot14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot14_1p = new Paragraph(eot14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot14_1p = new Paragraph(eot14_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot14_2 == null) && !(eot14_2.equals("-")) && !(eot14_2.equals(""))) {
			double coloreot14_2 = Double.parseDouble(eot14_2);
			if (coloreot14_2 <= 50) {
				eot14_2p = new Paragraph(eot14_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot14_2p = new Paragraph(eot14_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot14_2p = new Paragraph(eot14_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot14_3 == null) && !(eot14_3.equals("-")) && !(eot14_3.equals(""))) {
			double coloreot14_3 = Double.parseDouble(eot14_3);
			if (coloreot14_3 <= 50) {
				eot14_3p = new Paragraph(eot14_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot14_3p = new Paragraph(eot14_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot14_3p = new Paragraph(eot14_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot14_1 = new PdfPCell(mot14_1p);
		PdfPCell cellmot14_2 = new PdfPCell(mot14_2p);
		PdfPCell cellmot14_3 = new PdfPCell(mot14_3p);
		PdfPCell celleot14_1 = new PdfPCell(eot14_1p);
		PdfPCell celleot14_2 = new PdfPCell(eot14_2p);
		PdfPCell celleot14_3 = new PdfPCell(eot14_3p);

		table.addCell(cellmot14_1);
		table.addCell(cellmot14_2);
		table.addCell(cellmot14_3);

		table.addCell(celleot14_1);
		table.addCell(celleot14_2);
		table.addCell(celleot14_3);

		if (subject14_1Avg == -1) {
			cell14_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell14_1Avg = new PdfPCell(new Paragraph("" + subject14_1Avg));
		}

		if (subject14_2Avg == -1) {
			cell14_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell14_2Avg = new PdfPCell(new Paragraph("" + subject14_2Avg));
		}

		if (subject14_3Avg == -1) {
			cell14_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell14_3Avg = new PdfPCell(new Paragraph("" + subject14_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject14_1Avg > 0) {

			if (mot14_1.equals("-")) {
				SQL14_1 = "select DISTINCT (CASE WHEN " + subject14_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject14
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject14 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject14_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject14 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL14_1 = "select DISTINCT (CASE WHEN " + subject14_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject14
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject14 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject14_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject14 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade14_1;
			try {

				Grade14_1 = generateCellValue(SQL14_1);
				if (Grade14_1.next()) {
					grade14_1 = Grade14_1.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject14_1Avg = -1;
		}

		if (yes14 == 1) {

			if (subject14_1Avg <= 0 || cell14_1Avg == null || cell14_1Avg.equals("")) {
				grade14_1 = "";
			} else {
				grade14_1 = grade14_1;
			}

		} else {
			grade14_1 = "";
		}

		table.addCell(cell14_1Avg);
		table.addCell(grade14_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade14_1 == null) && !(grade14_1.equals("")) && !(grade14_1.equals("-"))) {
			gradeValue14_1 = grade14_1.replaceAll("[^0-9]", "");
		} else {
			grade14_1 = "";
			gradeValue14_1 = grade14_1.replaceAll("[^0-9]", "");
		}

		if (!(gradeValue14_1.equals("")) && !(gradeValue14_1.equals("-")) && !(gradeValue14_1 == null)) {
			if ((Double.parseDouble(gradeValue14_1) <= 6)) {
				gradeA14p = new Paragraph(gradeValue14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA14c = new PdfPCell(gradeA14p);
			} else {
				gradeA14p = new Paragraph(gradeValue14_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA14c = new PdfPCell(gradeA14p);
			}

		} else {
			gradeA14p = new Paragraph(gradeValue14_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA14c = new PdfPCell(gradeA14p);
		}

		table.addCell(gradeA14c);

		/*****************************************************************************************************
		 * Comment will be based on 1,2,3,4,5,6,7,8,9
		 ******************************************************************************************************/
		if (!(gradeValue14_1 == null) && !(gradeValue14_1.equals("")) && !(gradeValue14_1.equals("-"))) {
			if (Double.parseDouble(gradeValue14_1) <= 6) {
				comment14 = "Passed";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment14c = new PdfPCell(comment14p);
			} else if (Double.parseDouble(gradeValue14_1) > 6) {
				comment14 = "Failed";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment14c = new PdfPCell(comment14p);
			} else {
				comment14 = "";
				comment14p = new Paragraph(comment14,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment14c = new PdfPCell(comment14p);
			}
		} else {

			comment14 = "";
			comment14p = new Paragraph(comment14,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment14c = new PdfPCell(comment14p);

		}
		table.addCell(comment14c);

		table.addCell(new Paragraph(teachersInitials(subject14, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***********************************************
		 * Subject Number 15
		 ************************************************/

		ResultSet Subject15;
		try {

			Subject15 = generateCellValue("SELECT subject_name from student_subjectsa where id=15");
			if (Subject15.next()) {
				subject15 = Subject15.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum15 = new PdfPCell(
				new Paragraph("15", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum15 = new PdfPCell(
				new Paragraph(subject15, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum15);
		table.addCell(subNum15);
		ResultSet MoT15_1;
		try {

			MoT15_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT15_1.next()) {
				mot15_1 = MoT15_1.getString(1);

			} else {
				mot15_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT15_2;
		try {

			MoT15_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT15_2.next()) {
				mot15_2 = MoT15_2.getString(1);

			} else {
				mot15_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT15_3;
		try {

			MoT15_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT15_3.next()) {
				mot15_3 = MoT15_3.getString(1);

			} else {
				mot15_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT15_1;
		try {

			EoT15_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT15_1.next()) {
				eot15_1 = EoT15_1.getString(1);

			} else {
				eot15_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT15_2;
		try {

			EoT15_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT15_2.next()) {
				eot15_2 = EoT15_2.getString(1);

			} else {
				eot15_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT15_3;
		try {

			EoT15_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject15
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT15_3.next()) {
				eot15_3 = EoT15_3.getString(1);

			} else {
				eot15_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered15;
		try {

			Subjectoffered15 = generateCellValue("select `" + subject15
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered15.next()) {

				yes15 = Subjectoffered15.getInt(1);

			} else {
				yes15 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		if (yes15 == 1) {

			if (fieldPapers15.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot15_1 == null) && !(eot15_1.equals("-")) && !(eot15_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (intmot15_1 + inteot15_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_1 = "-";
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (inteot15_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_1 = "-";

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						subject15_1Avg = (intmot15_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_1 = "-";
						subject15_1Avg = -1;
					}
				}

				mot15_2 = "";
				eot15_2 = "";
				mot15_3 = "";
				eot15_3 = "";
				subject15_2Avg = -1;
				subject15_3Avg = -1;

			} else if (fieldPapers15.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot15_1 == null) && !(eot15_1.equals("-")) && !(eot15_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (intmot15_1 + inteot15_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_1 = "-";
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (inteot15_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_1 = "-";

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						subject15_1Avg = (intmot15_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_1 = "-";
						subject15_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot15_2 == null) && !(eot15_2.equals("-")) && !(eot15_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_2 == null) && !(mot15_2.equals("-")) && !(mot15_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_2 = Double.parseDouble(mot15_2);
						inteot15_2 = Double.parseDouble(eot15_2);
						subject15_2Avg = (intmot15_2 + inteot15_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_2 = "-";
						inteot15_2 = Double.parseDouble(eot15_2);
						subject15_2Avg = (inteot15_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_2 = "-";

					if (!(mot15_2 == null) && !(mot15_2.equals("-")) && !(mot15_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_2 = Double.parseDouble(mot15_2);
						subject15_2Avg = (intmot15_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_2 = "-";
						subject15_2Avg = -1;
					}
				}

				mot15_3 = "";
				eot15_3 = "";
				subject15_3Avg = -1;

			} else if (fieldPapers15.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot15_1 == null) && !(eot15_1.equals("-")) && !(eot15_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (intmot15_1 + inteot15_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_1 = "-";
						inteot15_1 = Double.parseDouble(eot15_1);
						subject15_1Avg = (inteot15_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_1 = "-";

					if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_1 = Double.parseDouble(mot15_1);
						subject15_1Avg = (intmot15_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_1 = "-";
						subject15_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot15_2 == null) && !(eot15_2.equals("-")) && !(eot15_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_2 == null) && !(mot15_2.equals("-")) && !(mot15_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_2 = Double.parseDouble(mot15_2);
						inteot15_2 = Double.parseDouble(eot15_2);
						subject15_2Avg = (intmot15_2 + inteot15_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_2 = "-";
						inteot15_2 = Double.parseDouble(eot15_2);
						subject15_2Avg = (inteot15_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_2 = "-";

					if (!(mot15_2 == null) && !(mot15_2.equals("-")) && !(mot15_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_2 = Double.parseDouble(mot15_2);
						subject15_2Avg = (intmot15_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_2 = "-";
						subject15_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot15_3 == null) && !(eot15_3.equals("-")) && !(eot15_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot15_3 == null) && !(mot15_3.equals("-")) && !(mot15_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot15_3 = Double.parseDouble(mot15_3);
						inteot15_3 = Double.parseDouble(eot15_3);
						subject15_3Avg = (intmot15_3 + inteot15_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot15_3 = "-";
						inteot15_3 = Double.parseDouble(eot15_3);
						subject15_3Avg = (inteot15_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot15_3 = "-";

					if (!(mot15_3 == null) && !(mot15_3.equals("-")) && !(mot15_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot15_3 = Double.parseDouble(mot15_3);
						subject15_3Avg = (intmot15_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot15_3 = "-";
						subject15_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot15_1 = "";
			eot15_1 = "";
			subject15_1Avg = -1;
			mot15_2 = "";
			eot15_2 = "";
			subject15_2Avg = -1;
			mot15_3 = "";
			eot15_3 = "";
			subject15_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot15_1 == null) && !(mot15_1.equals("-")) && !(mot15_1.equals(""))) {
			double colormot15_1 = Double.parseDouble(mot15_1);
			if (colormot15_1 <= 50) {
				mot15_1p = new Paragraph(mot15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot15_1p = new Paragraph(mot15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot15_1p = new Paragraph(mot15_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot15_2 == null) && !(mot15_2.equals("-")) && !(mot15_2.equals(""))) {
			double colormot15_2 = Double.parseDouble(mot15_2);
			if (colormot15_2 <= 50) {
				mot15_2p = new Paragraph(mot15_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot15_2p = new Paragraph(mot15_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot15_2p = new Paragraph(mot15_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot15_3 == null) && !(mot15_3.equals("-")) && !(mot15_3.equals(""))) {
			double colormot15_3 = Double.parseDouble(mot15_3);
			if (colormot15_3 <= 50) {
				mot15_3p = new Paragraph(mot15_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot15_3p = new Paragraph(mot15_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot15_3p = new Paragraph(mot15_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot15_1 == null) && !(eot15_1.equals("-")) && !(eot15_1.equals(""))) {
			double coloreot15_1 = Double.parseDouble(eot15_1);
			if (coloreot15_1 <= 50) {
				eot15_1p = new Paragraph(eot15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot15_1p = new Paragraph(eot15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot15_1p = new Paragraph(eot15_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot15_2 == null) && !(eot15_2.equals("-")) && !(eot15_2.equals(""))) {
			double coloreot15_2 = Double.parseDouble(eot15_2);
			if (coloreot15_2 <= 50) {
				eot15_2p = new Paragraph(eot15_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot15_2p = new Paragraph(eot15_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot15_2p = new Paragraph(eot15_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot15_3 == null) && !(eot15_3.equals("-")) && !(eot15_3.equals(""))) {
			double coloreot15_3 = Double.parseDouble(eot15_3);
			if (coloreot15_3 <= 50) {
				eot15_3p = new Paragraph(eot15_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot15_3p = new Paragraph(eot15_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot15_3p = new Paragraph(eot15_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot15_1 = new PdfPCell(mot15_1p);
		PdfPCell cellmot15_2 = new PdfPCell(mot15_2p);
		PdfPCell cellmot15_3 = new PdfPCell(mot15_3p);
		PdfPCell celleot15_1 = new PdfPCell(eot15_1p);
		PdfPCell celleot15_2 = new PdfPCell(eot15_2p);
		PdfPCell celleot15_3 = new PdfPCell(eot15_3p);

		table.addCell(cellmot15_1);
		table.addCell(cellmot15_2);
		table.addCell(cellmot15_3);

		table.addCell(celleot15_1);
		table.addCell(celleot15_2);
		table.addCell(celleot15_3);

		if (subject15_1Avg == -1) {
			cell15_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell15_1Avg = new PdfPCell(new Paragraph("" + subject15_1Avg));
		}

		if (subject15_2Avg == -1) {
			cell15_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell15_2Avg = new PdfPCell(new Paragraph("" + subject15_2Avg));
		}

		if (subject15_3Avg == -1) {
			cell15_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell15_3Avg = new PdfPCell(new Paragraph("" + subject15_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject15_1Avg > 0) {

			if (mot15_1.equals("-")) {
				SQL15_1 = "select DISTINCT (CASE WHEN " + subject15_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject15
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject15 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject15_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject15 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL15_1 = "select DISTINCT (CASE WHEN " + subject15_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject15
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject15 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject15_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject15 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade15_1;
			try {

				Grade15_1 = generateCellValue(SQL15_1);
				if (Grade15_1.next()) {
					grade15_1 = Grade15_1.getString(1);

				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject15_1Avg = -1;
		}

		if (yes15 == 1) {

			if (subject15_1Avg <= 0 || cell15_1Avg == null || cell15_1Avg.equals("")) {
				grade15_1 = "";
			} else {
				grade15_1 = grade15_1;
			}

		} else {
			grade15_1 = "";
		}

		table.addCell(cell15_1Avg);
		table.addCell(grade15_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		table.addCell("");
		table.addCell("");

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade15_1 == null) && !(grade15_1.equals("")) && !(grade15_1.equals("-"))) {
			gradeValue15_1 = grade15_1.replaceAll("[^0-9]", "");
		} else {
			grade15_1 = "";
			gradeValue15_1 = grade15_1.replaceAll("[^0-9]", "");
		}

		if (!(gradeValue15_1.equals("")) && !(gradeValue15_1.equals("-")) && !(gradeValue15_1 == null)) {
			if ((Double.parseDouble(gradeValue15_1) <= 6)) {
				gradeA15p = new Paragraph(gradeValue15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				gradeA15c = new PdfPCell(gradeA15p);
			} else {
				gradeA15p = new Paragraph(gradeValue15_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				gradeA15c = new PdfPCell(gradeA15p);
			}

		} else {
			gradeA15p = new Paragraph(gradeValue15_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA15c = new PdfPCell(gradeA15p);
		}

		table.addCell(gradeA15c);

		/*****************************************************************************************************
		 * Comment will be based on 1,2,3,4,5,6,7,8,9
		 ******************************************************************************************************/
		if (!(gradeValue15_1 == null) && !(gradeValue15_1.equals("")) && !(gradeValue15_1.equals("-"))) {
			if (Double.parseDouble(gradeValue15_1) <= 6) {
				comment15 = "Passed";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
				comment15c = new PdfPCell(comment15p);
			} else if (Double.parseDouble(gradeValue15_1) > 6) {
				comment15 = "Failed";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment15c = new PdfPCell(comment15p);
			} else {
				comment15 = "";
				comment15p = new Paragraph(comment15,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
				comment15c = new PdfPCell(comment15p);
			}
		} else {

			comment15 = "";
			comment15p = new Paragraph(comment15,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment15c = new PdfPCell(comment15p);

		}
		table.addCell(comment15c);

		table.addCell(new Paragraph(teachersInitials(subject15, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		/***************************************************
		 * Subject Number 16
		 ***************************************************/

		ResultSet Subject16;
		try {

			Subject16 = generateCellValue("SELECT subject_name from student_subjectsa where id=16");
			if (Subject16.next()) {
				subject16 = Subject16.getString(1);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		PdfPCell cellNum16 = new PdfPCell(
				new Paragraph("16", FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));
		PdfPCell subNum16 = new PdfPCell(
				new Paragraph(subject16, FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

		table.addCell(cellNum16);
		table.addCell(subNum16);
		ResultSet MoT16_1;
		try {

			MoT16_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (MoT16_1.next()) {
				mot16_1 = MoT16_1.getString(1);

			} else {
				mot16_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT16_2;
		try {

			MoT16_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (MoT16_2.next()) {
				mot16_2 = MoT16_2.getString(1);

			} else {
				mot16_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet MoT16_3;
		try {

			MoT16_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (MoT16_3.next()) {
				mot16_3 = MoT16_3.getString(1);

			} else {
				mot16_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT16_1;
		try {

			EoT16_1 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=1");
			if (EoT16_1.next()) {
				eot16_1 = EoT16_1.getString(1);

			} else {
				eot16_1 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT16_2;
		try {

			EoT16_2 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=2");
			if (EoT16_2.next()) {
				eot16_2 = EoT16_2.getString(1);

			} else {
				eot16_2 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet EoT16_3;
		try {

			EoT16_3 = generateCellValue("SELECT `Marks Obtained` from students_marks where " + "`Test Name` LIKE '%"
					+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
					+ "%' AND `Class Number`='" + classNumber + "' AND `Student Subject`='" + subject16
					+ "' AND `Student Class`='"
					+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' AND `Paper`=3");
			if (EoT16_3.next()) {
				eot16_3 = EoT16_3.getString(1);

			} else {
				eot16_3 = "";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		ResultSet Subjectoffered16;
		try {

			Subjectoffered16 = generateCellValue("select `" + subject16
					+ "` from subjects_offereda where payment_code='" + labelPaymentCode.getText() + "'");
			if (Subjectoffered16.next()) {

				yes16 = Subjectoffered16.getInt(1);

			} else {
				yes16 = -1;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if (yes16 == 1) {

			if (fieldPapers16.getText().equals("1")) {

				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot16_1 == null) && !(eot16_1.equals("-")) && !(eot16_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (intmot16_1 + inteot16_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_1 = "-";
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (inteot16_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_1 = "-";

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						subject16_1Avg = (intmot16_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_1 = "-";
						subject16_1Avg = -1;
					}
				}

				mot16_2 = "";
				eot16_2 = "";
				mot16_3 = "";
				eot16_3 = "";
				subject16_2Avg = -1;
				subject16_3Avg = -1;

			} else if (fieldPapers16.getText().equals("2")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot16_1 == null) && !(eot16_1.equals("-")) && !(eot16_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (intmot16_1 + inteot16_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_1 = "-";
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (inteot16_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_1 = "-";

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						subject16_1Avg = (intmot16_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_1 = "-";
						subject16_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot16_2 == null) && !(eot16_2.equals("-")) && !(eot16_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_2 == null) && !(mot16_2.equals("-")) && !(mot16_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_2 = Double.parseDouble(mot16_2);
						inteot16_2 = Double.parseDouble(eot16_2);
						subject16_2Avg = (intmot16_2 + inteot16_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_2 = "-";
						inteot16_2 = Double.parseDouble(eot16_2);
						subject16_2Avg = (inteot16_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_2 = "-";

					if (!(mot16_2 == null) && !(mot16_2.equals("-")) && !(mot16_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_2 = Double.parseDouble(mot16_2);
						subject16_2Avg = (intmot16_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_2 = "-";
						subject16_2Avg = -1;
					}
				}

				mot16_3 = "";
				eot16_3 = "";
				subject16_3Avg = -1;

			} else if (fieldPapers16.getText().equals("3")) {
				/***********************************************
				 * Student Does offer the subject Paper 1
				 ************************************************/
				if (!(eot16_1 == null) && !(eot16_1.equals("-")) && !(eot16_1.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (intmot16_1 + inteot16_1) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_1 = "-";
						inteot16_1 = Double.parseDouble(eot16_1);
						subject16_1Avg = (inteot16_1) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_1 = "-";

					if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_1 = Double.parseDouble(mot16_1);
						subject16_1Avg = (intmot16_1) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_1 = "-";
						subject16_1Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject Paper 2
				 ************************************************/
				if (!(eot16_2 == null) && !(eot16_2.equals("-")) && !(eot16_2.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_2 == null) && !(mot16_2.equals("-")) && !(mot16_2.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_2 = Double.parseDouble(mot16_2);
						inteot16_2 = Double.parseDouble(eot16_2);
						subject16_2Avg = (intmot16_2 + inteot16_2) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_2 = "-";
						inteot16_2 = Double.parseDouble(eot16_2);
						subject16_2Avg = (inteot16_2) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_2 = "-";

					if (!(mot16_2 == null) && !(mot16_2.equals("-")) && !(mot16_2.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_2 = Double.parseDouble(mot16_2);
						subject16_2Avg = (intmot16_2) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_2 = "-";
						subject16_2Avg = -1;
					}
				}

				/***********************************************
				 * Student Does offer the subject paper 3
				 ************************************************/
				if (!(eot16_3 == null) && !(eot16_3.equals("-")) && !(eot16_3.equals(""))) {

					/***********************************************
					 * Student Did not miss EOT
					 ************************************************/

					if (!(mot16_3 == null) && !(mot16_3.equals("-")) && !(mot16_3.equals(""))) {

						/***********************************************
						 * Student Did not miss EOT and MoT
						 ************************************************/

						intmot16_3 = Double.parseDouble(mot16_3);
						inteot16_3 = Double.parseDouble(eot16_3);
						subject16_3Avg = (intmot16_3 + inteot16_3) / 2;
					} else {

						/***********************************************
						 * Student Did not miss EOT but missed EoT
						 ************************************************/

						mot16_3 = "-";
						inteot16_3 = Double.parseDouble(eot16_3);
						subject16_3Avg = (inteot16_3) / 2;
					}

				} else {

					/***********************************************
					 * Student Did miss EOT
					 ************************************************/

					eot16_3 = "-";

					if (!(mot16_3 == null) && !(mot16_3.equals("-")) && !(mot16_3.equals(""))) {

						/***********************************************
						 * Student missed EOT but did MoT
						 ************************************************/

						intmot16_3 = Double.parseDouble(mot16_3);
						subject16_3Avg = (intmot16_3) / 2;
					} else {

						/***********************************************
						 * Student missed EOT & MoT
						 ************************************************/
						mot16_3 = "-";
						subject16_3Avg = -1;
					}
				}

			} else {
				JOptionPane.showMessageDialog(null,
						"Paper Number Invalid----Paper Numbers That Are Supported Currently Are: 1,2,or 3");
			}

		} else {

			/***********************************************
			 * Student Does not offer the subject
			 ************************************************/
			mot16_1 = "";
			eot16_1 = "";
			subject16_1Avg = -1;
			mot16_2 = "";
			eot16_2 = "";
			subject16_2Avg = -1;
			mot16_3 = "";
			eot16_3 = "";
			subject16_3Avg = -1;

		}

		/****************************************************************************
		 * Coloring poorly done mid term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(mot16_1 == null) && !(mot16_1.equals("-")) && !(mot16_1.equals(""))) {
			double colormot16_1 = Double.parseDouble(mot16_1);
			if (colormot16_1 <= 50) {
				mot16_1p = new Paragraph(mot16_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot16_1p = new Paragraph(mot16_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot16_1p = new Paragraph(mot16_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(mot16_2 == null) && !(mot16_2.equals("-")) && !(mot16_2.equals(""))) {
			double colormot16_2 = Double.parseDouble(mot16_2);
			if (colormot16_2 <= 50) {
				mot16_2p = new Paragraph(mot16_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot16_2p = new Paragraph(mot16_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot16_2p = new Paragraph(mot16_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 mot
		if (!(mot16_3 == null) && !(mot16_3.equals("-")) && !(mot16_3.equals(""))) {
			double colormot16_3 = Double.parseDouble(mot16_3);
			if (colormot16_3 <= 50) {
				mot16_3p = new Paragraph(mot16_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				mot16_3p = new Paragraph(mot16_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			mot16_3p = new Paragraph(mot16_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		/****************************************************************************
		 * Coloring poorly done end of term tests
		 ****************************************************************************/

		////// Checking paper one
		if (!(eot16_1 == null) && !(eot16_1.equals("-")) && !(eot16_1.equals(""))) {
			double coloreot16_1 = Double.parseDouble(eot16_1);
			if (coloreot16_1 <= 50) {
				eot16_1p = new Paragraph(eot16_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot16_1p = new Paragraph(eot16_1,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot16_1p = new Paragraph(eot16_1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		//// checking paper two
		if (!(eot16_2 == null) && !(eot16_2.equals("-")) && !(eot16_2.equals(""))) {
			double coloreot16_2 = Double.parseDouble(eot16_2);
			if (coloreot16_2 <= 50) {
				eot16_2p = new Paragraph(eot16_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot16_2p = new Paragraph(eot16_2,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot16_2p = new Paragraph(eot16_2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		///// checking paper 3 eot
		if (!(eot16_3 == null) && !(eot16_3.equals("-")) && !(eot16_3.equals(""))) {
			double coloreot16_3 = Double.parseDouble(eot16_3);
			if (coloreot16_3 <= 50) {
				eot16_3p = new Paragraph(eot16_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			} else {
				eot16_3p = new Paragraph(eot16_3,
						FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			}

		} else {
			eot16_3p = new Paragraph(eot16_3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
		}

		PdfPCell cellmot16_1 = new PdfPCell(mot16_1p);
		PdfPCell cellmot16_2 = new PdfPCell(mot16_2p);
		PdfPCell cellmot16_3 = new PdfPCell(mot16_3p);
		PdfPCell celleot16_1 = new PdfPCell(eot16_1p);
		PdfPCell celleot16_2 = new PdfPCell(eot16_2p);
		PdfPCell celleot16_3 = new PdfPCell(eot16_3p);

		table.addCell(cellmot16_1);
		table.addCell(cellmot16_2);
		table.addCell(cellmot16_3);

		table.addCell(celleot16_1);
		table.addCell(celleot16_2);
		table.addCell(celleot16_3);

		if (subject16_1Avg == -1) {
			cell16_1Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell16_1Avg = new PdfPCell(new Paragraph("" + subject16_1Avg));
		}

		if (subject16_2Avg == -1) {
			cell16_2Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell16_2Avg = new PdfPCell(new Paragraph("" + subject16_2Avg));
		}

		if (subject16_3Avg == -1) {
			cell16_3Avg = new PdfPCell(new Paragraph(""));
		} else {
			cell16_3Avg = new PdfPCell(new Paragraph("" + subject16_3Avg));
		}

		/*****************************************************************************************************
		 * Grading Ave of Paper One
		 *****************************************************************************************************/
		if (subject16_1Avg > 0) {

			if (mot16_1.equals("-")) {
				SQL16_1 = "select DISTINCT (CASE WHEN " + subject16_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			} else {
				SQL16_1 = "select DISTINCT (CASE WHEN " + subject16_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_1Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` ELSE '' END)!=''";

			}

			ResultSet Grade16_1;
			try {

				Grade16_1 = generateCellValue(SQL16_1);
				if (Grade16_1.next()) {
					grade16_1 = Grade16_1.getString(1);

				} else {
					grade16_1 = "";
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			subject16_1Avg = -1;
		}

		if (subject16_1Avg <= 0 || cell16_1Avg == null || cell16_1Avg.equals("")) {
			grade16_1 = "";
		} else {
			grade16_1 = grade16_1;
		}
		table.addCell(cell16_1Avg);
		table.addCell(grade16_1);
		/*****************************************************************************************************
		 * Grading Ave of Paper two
		 *****************************************************************************************************/
		if (subject16_2Avg > 0) {

			if (mot16_2.equals("-")) {

				SQL16_2 = "select DISTINCT (CASE WHEN " + subject16_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade16_2;
				try {

					Grade16_2 = generateCellValue(SQL16_2);
					if (Grade16_2.next()) {
						grade16_2 = Grade16_2.getString(1);

					} else {
						grade16_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

			} else {
				SQL16_2 = "select DISTINCT (CASE WHEN " + subject16_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_2Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade16_2;
				try {

					Grade16_2 = generateCellValue(SQL16_2);
					if (Grade16_2.next()) {
						grade16_2 = Grade16_2.getString(1);

					} else {
						grade16_2 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject16_2Avg = -1;
		}

		if (subject16_2Avg <= 0 || cell16_2Avg == null || cell16_2Avg.equals("")) {
			grade16_2 = "";
		}
		table.addCell(cell16_2Avg);
		table.addCell(grade16_2);

		/*****************************************************************************************************
		 * Grading Ave of Paper 3
		 *****************************************************************************************************/

		if (subject16_3Avg > 0) {

			if (mot16_3.equals("-")) {
				SQL16_3 = "select DISTINCT (CASE WHEN " + subject16_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxTermEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade16_3;
				try {

					Grade16_3 = generateCellValue(SQL16_3);
					if (Grade16_3.next()) {
						grade16_3 = Grade16_3.getString(1);

					} else {
						grade16_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				SQL16_3 = "select DISTINCT (CASE WHEN " + subject16_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` "
						+ "AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem() + "' "
						+ " AND students_grading.`Subject`='" + subject16
						+ "' THEN students_grading.`Grade` ELSE '' END) AS Grade from students_marks,students_grading where students_grading.`Subject`=students_marks.`Student Subject`"
						+ " and students_grading.`Subject`='" + subject16 + "' and "
						+ "students_grading.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' and students_grading.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' and (CASE WHEN " + subject16_3Avg
						+ " BETWEEN students_grading.`From (%)` AND students_grading.`To (%)` AND students_marks.`Test Name` LIKE '%"
						+ comboBoxSubjectEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "%' AND students_marks.`Student Class`='"
						+ comboBoxClassEntriesAttendanceLesson.getSelectionModel().getSelectedItem()
						+ "' AND students_grading.`Subject`='" + subject16 + "' "
						+ "THEN students_grading.`Grade` END)!=''";

				ResultSet Grade16_3;
				try {

					Grade16_3 = generateCellValue(SQL16_3);
					if (Grade16_3.next()) {
						grade16_3 = Grade16_3.getString(1);

					} else {
						grade16_3 = "";
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} else {
			subject16_3Avg = -1;
		}

		if (subject16_3Avg <= 0 || cell16_3Avg == null || cell16_3Avg.equals("")) {
			grade16_3 = "";
		}
		table.addCell(cell16_3Avg);
		table.addCell(grade16_3);

		/*****************************************************************************************************
		 * Determining whether A,B,C,D,E,F,O
		 ******************************************************************************************************/

		if (!(grade16_1 == null) && !(grade16_1.equals(""))) {
			gradeValue16_1 = grade16_1.replaceAll("[^0-9]", "");
		} else {
			grade16_1 = "0";
			gradeValue16_1 = grade16_1.replaceAll("[^0-9]", "");
		}

		if (!(grade16_2 == null) && !(grade16_2.equals(""))) {
			gradeValue16_2 = grade16_2.replaceAll("[^0-9]", "");
		} else {
			grade16_2 = "0";
			gradeValue16_2 = grade16_2.replaceAll("[^0-9]", "");
		}

		if (!(grade16_3 == null) && !(grade16_3.equals(""))) {
			gradeValue16_3 = grade16_3.replaceAll("[^0-9]", "");
		} else {
			grade16_3 = "0";
			gradeValue16_3 = grade16_3.replaceAll("[^0-9]", "");
		}

		if (!gradeValue16_1.equals("")) {
			valuepaper16_1 = Double.parseDouble(gradeValue16_1);
		}

		if (!gradeValue16_2.equals("")) {
			valuepaper16_2 = Double.parseDouble(gradeValue16_2);
		}
		if (!gradeValue16_3.equals("")) {
			valuepaper16_3 = Double.parseDouble(gradeValue16_3);
		}

		if (fieldPapers16.getText().equals("1")) {
			averageValue = (valuepaper16_1);
		} else if (fieldPapers16.getText().equals("2")) {
			averageValue = (valuepaper16_1 + valuepaper16_2) / 2;
		} else if (fieldPapers16.getText().equals("3")) {
			averageValue = (valuepaper16_1 + valuepaper16_2 + valuepaper16_3) / 3;
		} else {
			JOptionPane.showMessageDialog(null, "Unable to calculate grade average ");
		}

		if (averageValue > 0 && averageValue <= 2.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "A";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue > 2.5 && averageValue <= 3.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "B";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue > 3.5 && averageValue <= 4.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "C";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue > 4.5 && averageValue <= 5.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "D";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			gradeA16c = new PdfPCell(gradeA16p);
		}
		//
		if (averageValue > 5.5 && averageValue <= 6.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "E";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue > 6.5 && averageValue <= 7.5) {
			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "O";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue > 7.5 && averageValue <= 9) {

			if (valuepaper16_1 == 9 || valuepaper16_2 == 9 || valuepaper16_3 == 9) {
				gradeA16 = "O";
			} else {
				gradeA16 = "F";
			}
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		if (averageValue <= 0) {

			gradeA16 = "";
			gradeA16p = new Paragraph(gradeA16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			gradeA16c = new PdfPCell(gradeA16p);
		}

		table.addCell(gradeA16c);

		/*****************************************************************************************************
		 * Comment will be based on A,B,C,D,E,F,O
		 ******************************************************************************************************/
		if (gradeA16.equals("A")) {
			pointA16 = 6;
			comment16 = "Excellent";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(23, 176, 196)));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("B")) {
			pointA16 = 5;
			comment16 = "V.Good";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, new BaseColor(0, 126, 156)));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("C")) {
			pointA16 = 4;
			comment16 = "Good";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.MAGENTA));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("D")) {
			pointA16 = 3;
			comment16 = "F.Good";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("E")) {
			pointA16 = 2;
			comment16 = "Fair";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.PINK));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("O")) {
			pointA16 = 1;
			comment16 = "Poor";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.ORANGE));
			comment16c = new PdfPCell(comment16p);
		} else if (gradeA16.equals("F")) {
			pointA16 = 0;
			comment16 = "V.Poor";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment16c = new PdfPCell(comment16p);
		} else {
			pointA16 = 0;
			comment16 = "";
			comment16p = new Paragraph(comment16,
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.RED));
			comment16c = new PdfPCell(comment16p);
		}

		table.addCell(comment16c);
		table.addCell(new Paragraph(teachersInitials(subject16, endOfTermTest),
				FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD, BaseColor.BLACK)));

	}

	public static String TestValues(int value) {

		int remForHun = value % 100;
		int remForTen = value % 10;
		if (remForHun - remForTen == 10) {
			return "th";
		}

		switch (remForTen) {
		case 1:
			return "st";
		case 2:
			return "nd";
		case 3:
			return "rd";
		default:
			return "th";

		}

	}

	public static int wordCount(String s) {

		if (s == null) {
			return 0;
		} else {
			return s.trim().split("\\s+").length;
		}

	}
}
